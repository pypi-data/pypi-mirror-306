"""This data helps download the movisens data"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_Movisens_Helper.ipynb.

# %% auto 0
__all__ = ['MovisensHelper']

# %% ../nbs/02_Movisens_Helper.ipynb 3
from .config import Config
from .download import download_movisens_data
import pandas as pd
from fastcore.foundation import patch

# %% ../nbs/02_Movisens_Helper.ipynb 4
class MovisensHelper():
    def __init__(self, update = False):
        self.get_mov_data(update = update)

    def get_mov_data(self, update = False, columns = None):
        if update:
            download_movisens_data()
        df = pd.read_csv(Config().get_path("raw_mov_data"), sep=';')
        df = df.applymap(lambda x: None if isinstance(x, str) and x.startswith('//data') else x)
        df = df.dropna(axis=1, how='all')
    
        # Convert the columns to datetime
        df['trigger_date'] = pd.to_datetime(df['Trigger_date'] + ' ' + df['Trigger_time'])
        df['form_start_date'] = pd.to_datetime(df['Form_start_date'] + ' ' + df['Form_start_time'])
        df['form_finish_date'] = pd.to_datetime(df['Form_finish_date'] + ' ' + df['Form_finish_time'])
        df['form_upload_date'] = pd.to_datetime(df['Form_upload_date'] + ' ' + df['Form_upload_time'])
    
        # Drop the original date and time columns
        df.drop(columns=['Trigger_date', 'Trigger_time', 'Form_start_date', 'Form_start_time', 'Form_finish_date', 'Form_finish_time', 'Form_upload_date', 'Form_upload_time'], inplace=True)
        df.columns = [c.lower() for c in df.columns]
        # Fill participant variables forward and backward within each participant group
    
        # Sampling day
        df['starting_date'] = df.groupby('participant')['trigger_date'].transform(lambda x: x.min())
        df['sampling_day'] = (df.trigger_date.dt.date - df.starting_date.dt.date).apply(lambda x: x.days + 1)
    
        # More readable trigger values
        df['trigger'] = df['trigger'].replace(
        {'^Participant Defined Time Trigger.*': 'alarm', 
         '^Button Pressed.*': 'button'}, 
        regex=True)
    
        # More readable game skips
        df = df.replace('{canceled": true}"','skipped')
        
        # Compute session number
        df['session_number'] = df.groupby('participant')['trigger_date'].rank(method='dense').astype(int)
        df['completion_time_seconds'] = (pd.to_datetime(df.form_finish_date) - pd.to_datetime(df.form_start_date)).dt.total_seconds().astype(int)
        # Reorder the columns
        df = df[['participant', 'trigger_date', 'form_start_date', 'form_finish_date', 'form_upload_date', 'session_number'] + [col for col in df.columns if col not in ['participant', 'trigger_date', 'form_start_date', 'form_finish_date', 'form_upload_date', 'session_number']]]
        df = df.rename(columns={'gender':'is_female'})
        df['is_female'] = df.is_female.astype(float).replace({2:0})
        df['age'] = df.age.astype(float)
    
        # More readable forms
        df.form = df.form.str.lower().str.replace(' ','_')
        df.form.replace('greatbrainexperiment','gbe',inplace=True)
        df = df.reset_index().rename(columns={"index":"mov_index"})
        self.df = df
        if columns != None:
            df = df[columns]
        return df

# %% ../nbs/02_Movisens_Helper.ipynb 6
@patch
def get_form_column_dict(self:MovisensHelper):
    return {"demographics":['age','is_female'],
            "hakemp-90":[f"hak_{str(i).zfill(2)}" for i in range(1,25)],
            "wpb":[f"wpb_{i}" for i in range(1,12)],
            "gbe": ['fruittapgame','workingmemorygame','cardgame','rewardandhappinessgame'],
            "sushi_game_initial":["sushi_initial"],
            "sushi_game_ema":["sushi_ema"],
           }

@patch
def get_available_forms(self:MovisensHelper):
    return sorted(list(self.get_form_column_dict().keys()))

@patch
def get_form(self:MovisensHelper, form):
    columns = self.get_form_column_dict()[form]
    return self.df.query(f'form=="{form}"')[['participant','sampling_day','mov_index','trigger_date','trigger']+columns+['completion_time_seconds']]
    
