"""This data helps download the movisens data"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_Download.ipynb.

# %% auto 0
__all__ = ['download_movisens_data']

# %% ../nbs/01_Download.ipynb 3
import requests
from bs4 import BeautifulSoup
import os
from dotenv import load_dotenv
from .config import Config

# %% ../nbs/01_Download.ipynb 4
def download_movisens_data():
    # Load environment variables from .env file
    load_dotenv()
    
    # Access the variables
    username = os.environ.get('MOVISENS_USERNAME')
    password = os.environ.get('MOVISENS_PASSWORD')
    # Create a session to persist cookies and authentication across requests
    session = requests.Session()
    
    # Base URL of the website
    base_url = 'https://xs.movisens.com'
    
    # URLs for login and data download
    login_url = f'{base_url}/login'
    data_url = f'{base_url}/studies/14148/results/formresults.csv?delimiter=%3B'
    
    # Step 1: Fetch the login page to get the authenticityToken
    login_page = session.get(login_url)
    soup = BeautifulSoup(login_page.content, 'html.parser')
    
    # Step 2: Extract the authenticityToken from the hidden input field
    token_input = soup.find('input', {'name': 'authenticityToken'})
    if token_input:
        authenticity_token = token_input.get('value')
        print(f'Authenticity Token found: {authenticity_token}')
    else:
        #print('Authenticity Token not found. Cannot proceed with login.')
        exit()
    
    # Step 3: Prepare the login payload
    payload = {
        'username': username,       # Replace with your actual username
        'password': password,       # Replace with your actual password
        'authenticityToken': authenticity_token
    }
    
    # Headers (if necessary)
    headers = {
        'Referer': login_url,
        'User-Agent': 'Mozilla/5.0'
    }
    
    # Step 4: Perform the login by submitting the form data
    response = session.post(login_url, data=payload, headers=headers)
    
    # Check if login was successful by looking for a logout link or a specific element in the response
    if 'Logout' in response.text or 'logout' in response.text.lower():
        print('Downloading data.')
    
        # Step 5: Download the protected CSV data
        data_response = session.get(data_url)
    
        # Verify if the data was fetched successfully
        if data_response.status_code == 200:
            # Save the CSV content to a file
            with open(Config().get_path("raw_mov_data"), 'wb') as file:
                file.write(data_response.content)
            print('Data downloaded successfully.')
        else:
            print(f'Failed to download data. Status code: {data_response.status_code}')
    else:
        print('Login failed. Please check your credentials and try again.')

