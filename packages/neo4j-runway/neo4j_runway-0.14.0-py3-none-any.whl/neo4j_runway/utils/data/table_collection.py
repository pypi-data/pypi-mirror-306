import os
from typing import Any, Dict, List, Optional

from .table import Table


class TableCollection:
    """
    A container for all data to be used in graph data modeling. This class will handle data in Table objects.

    Attributes
    ----------
    data_directory : str
        The directory where all data is found.
    tables : List[Table]
        A list of all Tables to be used in graph data modeling.
    general_description : str
        A general description of the data.
    data_dictionary : Dict[str, Any], optional
        A dictionary with file names as keys. Each key contains a dictionary containing a description of each column in the file that is available for data modeling.
    use_cases : Optional[List[str]], optional
        Any use cases that the graph data model should address.
    discovery : Optional[DiscoveryContent], optional
        Any insights gathered about the data. This is contained within the DiscoveryContent class.
    """

    data_directory: str
    tables: List[Table]
    general_description: str = ""
    data_dictionary: Dict[str, Any] = dict()
    use_cases: Optional[List[str]] = None
    discovery: Optional[str] = None

    def __init__(
        self,
        data_directory: str,
        tables: List[Table],
        general_description: str = "",
        data_dictionary: Dict[str, Any] = dict(),
        use_cases: Optional[List[str]] = None,
        discovery: Optional[str] = None,
    ) -> None:
        """
        A container for all data to be used in graph data modeling. This class will handle data in Table objects.

        Parameters
        ----------
        data_directory : str
            The directory where all data is found.
        tables : List[Table]
            A list of all Tables to be used in graph data modeling.
        general_description : str
            A general description of the data, by default None
        data_dictionary : Optional[Dict[str, str]], optional
            A dictionary with file names as keys. Each key contains a dictionary containing a description of each column in the file that is available for data modeling.
            Only columns identified here will be considered for inclusion in the data model. By default None
        use_cases : Optional[List[str]], optional
            Any use cases that the graph data model should address, by default None
        discovery : Optional[str], optional
        Any insights gathered about the data as a whole. By default None
        """
        self.data_directory = data_directory
        self.tables = tables
        self.general_description = general_description
        self.data_dictionary = data_dictionary
        self.use_cases = use_cases
        self.discovery = discovery

    def __len__(self) -> int:
        return len(self.tables)

    @property
    def size(self) -> int:
        """
        The number of Tables in the collection.

        Returns
        -------
        int
            The count of Tables.
        """

        return self.__len__()

    @property
    def table_dict(self) -> Dict[str, Table]:
        """
        A dictionary of Table name to Table.

        Returns
        -------
        Dict[str, Table]
            The dictionary.
        """
        return {t.name: t for t in self.tables}

    @property
    def pretty_use_cases(self) -> str:
        """
        Format the use cases in a more readable format.

        Returns
        -------
        str
            The formatted use cases as a String.
        """

        if self.use_cases is None:
            return ""

        res = ""
        for uc in self.use_cases:
            res += "* " + uc + "\n"
        return res

    @property
    def sub_discoveries(self) -> List[str]:
        """
        All unique sub discoveries generated by the Discovery module.

        Returns
        -------
        List[str]
            The sub discoveries.
        """

        return list({t.discovery for t in self.tables})

    def get_pandas_summary(self, ignore_files: List[str] = list()) -> str:
        """
        A String containing all Pandas summaries generated for the contained Tables.

        Parameters
        ----------
        ignore_files : List[str], optional
            Any files to ignore, by default list()

        Returns
        -------
        str
            The Pandas summaries formatted into a String.
        """
        response = (
            "Here are Summary Statistics generated with the Pandas Python library"
        )
        for t in self.tables:
            if t.name not in ignore_files and t.discovery_content is not None:
                response += (
                    f"\n\n### {t.name}\n{t.discovery_content.pandas_response}\n\n-----"
                )

        return response

    def to_txt(self, file_dir: str = "./", file_name: str = "discovery.txt") -> None:
        """
        Write the generated discovery to a .txt file.

        Parameters
        ----------
        file_dir : str, optional
            The file directory to write to, by default "./"
        file_name : str, optional
            The name of the file, by default "discovery.txt"
        """

        assert file_name.endswith(".txt"), "File name is not .txt"

        self._export_to_file(file_dir=file_dir, file_name=file_name)

    def to_markdown(
        self, file_dir: str = "./", file_name: str = "discovery.md"
    ) -> None:
        """
        Write the generated discovery to a Markdown file.

        Parameters
        ----------
        file_dir : str, optional
            The file directory to write to, by default "./"
        file_name : str, optional
            The name of the file, by default "discovery.md"
        """

        assert file_name.endswith(".md"), "File name is not .md"

        self._export_to_file(file_dir=file_dir, file_name=file_name)

    def _export_to_file(self, file_name: str, file_dir: str = "./") -> None:
        assert self.discovery is not None, "No discovery information to write."

        if file_dir != "./":
            os.makedirs(file_dir, exist_ok=True)

        with open(f"{file_dir}{file_name}", "w") as f:
            f.write(self.discovery)
