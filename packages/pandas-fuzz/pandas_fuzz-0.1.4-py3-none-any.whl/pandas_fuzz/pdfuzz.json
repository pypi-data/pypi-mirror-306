{
    "FuzzSeriesAccessor": {
        "ratio": [
            "Calculates the normalized Indel similarity.",
            "",
            "Parameters",
            "----------",
            "s2 : Sequence[Hashable]",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            "",
            "See Also",
            "--------",
            "rapidfuzz.distance.Indel.normalized_similarity : Normalized Indel similarity",
            ""
        ],
        "partial_ratio": [
            "Searches for the optimal alignment of the shorter string in the",
            "longer string and returns the fuzz.ratio for this alignment.",
            "",
            "Parameters",
            "----------",
            "s2 : Sequence[Hashable]",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            "",
            "Notes",
            "-----",
            "Depending on the length of the needle (shorter string) different",
            "implementations are used to improve the performance.",
            "",
            "short needle (length \u2264 64):",
            "    When using a short needle length the fuzz.ratio is calculated for all",
            "    alignments that could result in an optimal alignment. It is",
            "    guaranteed to find the optimal alignment. For short needles this is very",
            "    fast, since for them fuzz.ratio runs in ``O(N)`` time. This results in a worst",
            "    case performance of ``O(NM)``.",
            "",
            "long needle (length > 64):",
            "    For long needles a similar implementation to FuzzyWuzzy is used.",
            "    This implementation only considers alignments which start at one",
            "    of the longest common substrings. This results in a worst case performance",
            "    of ``O(N[N/64]M)``. However usually most of the alignments can be skipped.",
            "    The following Python code shows the concept:",
            "",
            "````python",
            "",
            "blocks = SequenceMatcher(None, needle, longer, False).get_matching_blocks()",
            "score = 0",
            "for block in blocks:",
            "    long_start = block[1] - block[0] if (block[1] - block[0]) > 0 else 0",
            "    long_end = long_start + len(shorter)",
            "    long_substr = longer[long_start:long_end]",
            "    score = max(score, fuzz.ratio(needle, long_substr))",
            "````",
            "",
            "This is a lot faster than checking all possible alignments. However it",
            "only finds one of the best alignments and not necessarily the optimal one.",
            ""
        ],
        "partial_ratio_alignment": [
            ""
        ],
        "token_sort_ratio": [
            "Sorts the words in the strings and calculates the fuzz.ratio between them",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ],
        "token_set_ratio": [
            "Compares the words in the strings based on unique and common words between them",
            "using fuzz.ratio",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ],
        "token_ratio": [
            "Helper method that returns the maximum of fuzz.token_set_ratio and fuzz.token_sort_ratio",
            "(faster than manually executing the two functions)",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ],
        "partial_token_sort_ratio": [
            "sorts the words in the strings and calculates the fuzz.partial_ratio between them",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ],
        "partial_token_set_ratio": [
            "Compares the words in the strings based on unique and common words between them",
            "using fuzz.partial_ratio",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ],
        "partial_token_ratio": [
            "Helper method that returns the maximum of fuzz.partial_token_set_ratio and",
            "fuzz.partial_token_sort_ratio (faster than manually executing the two functions)",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ],
        "WRatio": [
            "Calculates a weighted ratio based on the other ratio algorithms",
            "",
            "Parameters",
            "----------",
            "s2 : str",
            "    String to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "QRatio": [
            "Calculates a quick ratio between two strings using fuzz.ratio.",
            "",
            "Since v3.0 this behaves similar to fuzz.ratio with the exception that this",
            "returns 0 when comparing two empty strings",
            "",
            "Parameters",
            "----------",
            "s2 : Sequence[Hashable]",
            "    Sring to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity : pd.Series[float]",
            "    similarities between self and s2 as a float between 0 and 100",
            ""
        ]
    },
    "FuzzDataFrameAccessor": {
        "ratio": [
            "Calculates the normalized Indel similarity.",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            "See Also",
            "--------",
            "rapidfuzz.distance.Indel.normalized_similarity : Normalized Indel similarity",
            ""
        ],
        "partial_ratio": [
            "Searches for the optimal alignment of the shorter string in the",
            "longer string and returns the fuzz.ratio for this alignment.",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            "",
            "Notes",
            "-----",
            "Depending on the length of the needle (shorter string) different",
            "implementations are used to improve the performance.",
            "",
            "short needle (length \u2264 64):",
            "    When using a short needle length the fuzz.ratio is calculated for all",
            "    alignments that could result in an optimal alignment. It is",
            "    guaranteed to find the optimal alignment. For short needles this is very",
            "    fast, since for them fuzz.ratio runs in ``O(N)`` time. This results in a worst",
            "    case performance of ``O(NM)``.",
            "",
            "long needle (length > 64):",
            "    For long needles a similar implementation to FuzzyWuzzy is used.",
            "    This implementation only considers alignments which start at one",
            "    of the longest common substrings. This results in a worst case performance",
            "    of ``O(N[N/64]M)``. However usually most of the alignments can be skipped.",
            "    The following Python code shows the concept:",
            "",
            "````python",
            "",
            "blocks = SequenceMatcher(None, needle, longer, False).get_matching_blocks()",
            "score = 0",
            "for block in blocks:",
            "    long_start = block[1] - block[0] if (block[1] - block[0]) > 0 else 0",
            "    long_end = long_start + len(shorter)",
            "    long_substr = longer[long_start:long_end]",
            "    score = max(score, fuzz.ratio(needle, long_substr))",
            "````",
            "",
            "This is a lot faster than checking all possible alignments. However it",
            "only finds one of the best alignments and not necessarily the optimal one.",
            ""
        ],
        "partial_ratio_alignment": [
            ""
        ],
        "token_sort_ratio": [
            "Sorts the words in the strings and calculates the fuzz.ratio between them",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "token_set_ratio": [
            "Compares the words in the strings based on unique and common words between them",
            "using fuzz.ratio",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "token_ratio": [
            "Helper method that returns the maximum of fuzz.token_set_ratio and fuzz.token_sort_ratio",
            "(faster than manually executing the two functions)",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "partial_token_sort_ratio": [
            "sorts the words in the strings and calculates the fuzz.partial_ratio between them",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "partial_token_set_ratio": [
            "Compares the words in the strings based on unique and common words between them",
            "using fuzz.partial_ratio",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "partial_token_ratio": [
            "Helper method that returns the maximum of fuzz.partial_token_set_ratio and",
            "fuzz.partial_token_sort_ratio (faster than manually executing the two functions)",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "WRatio": [
            "Calculates a weighted ratio based on the other ratio algorithms",
            "",
            "Parameters",
            "----------",
            "s1 : Sequence[Hashable]",
            "    Name of first column.",
            "s2 : Sequence[Hashable]",
            "    Name of second column.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ],
        "QRatio": [
            "Calculates a quick ratio between two strings using fuzz.ratio.",
            "",
            "Since v3.0 this behaves similar to fuzz.ratio with the exception that this",
            "returns 0 when comparing two empty strings",
            "",
            "Parameters",
            "----------",
            "s2 : Sequence[Hashable]",
            "    Sring to compare.",
            "processor: callable, optional",
            "    Optional callable that is used to preprocess the strings before",
            "    comparing them. Default is None, which deactivates this behaviour.",
            "score_cutoff : float, optional",
            "    Optional argument for a score threshold as a float between 0 and 100.",
            "    For ratio < score_cutoff 0 is returned instead. Default is 0,",
            "    which deactivates this behaviour.",
            "",
            "Returns",
            "-------",
            "similarity: pd.Series[float]",
            "    Similarities between elements along axis=1, comparing row[s1] and row[s2], represented as floats between 0 and 100.",
            ""
        ]
    }
}
