# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .types.user_metadata_patch import UserMetadataPatch

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def metadata(
        self, *, request: typing.Sequence[UserMetadataPatch], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Bulk patch metadata for users

        Parameters
        ----------
        request : typing.Sequence[UserMetadataPatch]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from credal import UserMetadataPatch
        from credal.client import CredalApi

        client = CredalApi(
            api_key="YOUR_API_KEY",
        )
        client.users.metadata(
            request=[
                UserMetadataPatch(
                    metadata={"State": "NY", "Job Role": "CEO"},
                    user_email="ravin@credal.ai",
                ),
                UserMetadataPatch(
                    metadata={"State": "NY", "Department": "Engineering"},
                    user_email="jack@credal.ai",
                ),
            ],
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v0/users/metadata", method="PATCH", json=request, request_options=request_options, omit=OMIT
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def metadata(
        self, *, request: typing.Sequence[UserMetadataPatch], request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Bulk patch metadata for users

        Parameters
        ----------
        request : typing.Sequence[UserMetadataPatch]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from credal import UserMetadataPatch
        from credal.client import AsyncCredalApi

        client = AsyncCredalApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.users.metadata(
                request=[
                    UserMetadataPatch(
                        metadata={"State": "NY", "Job Role": "CEO"},
                        user_email="ravin@credal.ai",
                    ),
                    UserMetadataPatch(
                        metadata={"State": "NY", "Department": "Engineering"},
                        user_email="jack@credal.ai",
                    ),
                ],
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v0/users/metadata", method="PATCH", json=request, request_options=request_options, omit=OMIT
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
