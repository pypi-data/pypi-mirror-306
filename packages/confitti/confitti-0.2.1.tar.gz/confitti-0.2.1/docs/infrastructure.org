* Notebooks
- These will be used for exploration and demonstration of the code, plus producing graphics output
- Although I do not want to put too much code in them, anything useful should be moved to the library

** Converting notebooks to python scripts
- I can use ~jupytext~ for this to allow bidirectional syncing
- Run the following when we have made new notebooks to pair them with python scripts
  #+begin_src sh :dir ../notebooks :results output verbatim
    jupytext --set-formats 'ipynb,py:light' *.ipynb *.py
  #+end_src

  #+RESULTS:
  #+begin_example
  [jupytext] Reading demo01-basic.ipynb in format ipynb
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading demo01-basic.py
  [jupytext] Updating the timestamp of demo01-basic.py
  [jupytext] Reading demo02-emcee.ipynb in format ipynb
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading demo02-emcee.py
  [jupytext] Updating the timestamp of demo02-emcee.py
  [jupytext] Reading demo03-proplyd.ipynb in format ipynb
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Updating demo03-proplyd.ipynb
  [jupytext] Updating demo03-proplyd.py
  [jupytext] Reading demo01-basic.py in format py
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading demo01-basic.ipynb
  [jupytext] Updating the timestamp of demo01-basic.py
  [jupytext] Reading demo02-emcee.py in format py
  [jupytext] Updating notebook metadata with '{"jupytext": {"formats": "ipynb,py:light"}}'
  [jupytext] Loading demo02-emcee.ipynb
  [jupytext] Updating the timestamp of demo02-emcee.py
  #+end_example
- Then after editing either the python version, we can sync them as follows
  #+begin_src sh :dir ../notebooks :results output verbatim
    jupytext --show-changes --update --sync *.py
    printf "\nLast run: $(date)\n"
  #+end_src

  #+RESULTS:
  #+begin_example
  [jupytext] Reading demo01-basic.py in format py
  [jupytext] Loading demo01-basic.ipynb
  [jupytext] Updating demo01-basic.py with this change:
  @@ -6,7 +6,7 @@
   #       extension: .py
   #       format_name: light
   #       format_version: '1.5'
  -#       jupytext_version: 1.15.2
  +#       jupytext_version: 1.16.1
   #   kernelspec:
   #     display_name: Python 3 (ipykernel)
   #     language: python
  [jupytext] Reading demo02-emcee.py in format py
  [jupytext] Loading demo02-emcee.ipynb
  [jupytext] Updating demo02-emcee.py with this change:
  @@ -6,7 +6,7 @@
   #       extension: .py
   #       format_name: light
   #       format_version: '1.5'
  -#       jupytext_version: 1.15.2
  +#       jupytext_version: 1.16.1
   #   kernelspec:
   #     display_name: Python 3 (ipykernel)
   #     language: python
  [jupytext] Reading demo03-proplyd.py in format py
  [jupytext] Loading demo03-proplyd.ipynb
  [jupytext] Updating demo03-proplyd.py with this change:
  @@ -6,7 +6,7 @@
   #       extension: .py
   #       format_name: light
   #       format_version: '1.5'
  -#       jupytext_version: 1.15.2
  +#       jupytext_version: 1.16.1
   #   kernelspec:
   #     display_name: Python 3 (ipykernel)
   #     language: python
  [jupytext] Reading demo04-other-proplyd.py in format py
  [jupytext] Loading demo04-other-proplyd.ipynb
  [jupytext] Updating demo04-other-proplyd.py with this change:
  @@ -6,7 +6,7 @@
   #       extension: .py
   #       format_name: light
   #       format_version: '1.5'
  -#       jupytext_version: 1.15.2
  +#       jupytext_version: 1.16.1
   #   kernelspec:
   #     display_name: Python 3 (ipykernel)
   #     language: python
  [jupytext] Reading demo05-quadrants.py in format py
  [jupytext] Loading demo05-quadrants.ipynb
  [jupytext] Updating demo05-quadrants.py with this change:
  @@ -6,7 +6,7 @@
   #       extension: .py
   #       format_name: light
   #       format_version: '1.5'
  -#       jupytext_version: 1.15.2
  +#       jupytext_version: 1.16.1
   #   kernelspec:
   #     display_name: Python 3 (ipykernel)
   #     language: python

  Last run: Fri Apr  5 10:02:33 CST 2024
  #+end_example
  where the ~--show-changes~ flag displays a diff of what has changed and the ~--update~ flag preserves the output cells in the notebook, even if it is being updated from the python file
- It is not necessary to use this after editing the ~.ipynb~ file since the ~.py~ file will be updated automatically.
- Do I want to automate this?
- And do I want to be running it through rye?
  - Seems unnecessary. On the other hand, I am getting inconsistent versions according to whether my conda environment is active or not, which can cause unnecessary churn in the notebook files since the version number is stored in the metadata.
    
#+begin_src sh :results output verbatim
  which jupytext
#+end_src

#+RESULTS:
: /Users/will/.local/bin/jupytext


#+RESULTS with no env active:
: /Users/will/.local/bin/jupytext

#+RESULTS with conda env active:
: /Users/will/miniconda3/envs/py39/bin/jupytext

* Testing

** TODO Testing my library code with ~pytest~

** Testing a set of notebooks with ~pytest~ and ~nbmake~
- See [[https://semaphoreci.com/blog/test-jupyter-notebooks-with-pytest-and-nbmake]["How to Test Jupyter Notebooks with Pytest and Nbmake"]] by Alex Remedios

*** Just testing that they run without modifying the .ipynb file
- The default behavior of ~nbmake~ is read only. It checks that the notebooks run, but does not overwrite them.
- [2024-04-03 Wed] I am using this to test my migration to a rye-based setup
  - I have added nbmake as a dev dependency ~rye add nbmake --dev~
  - I will first test it by running pytest by hand from rye:
    #+begin_src sh :dir ../notebooks :results output verbatim
      rye run pytest --nbmake demo01-basic.ipynb
    #+end_src
  - This failed, which is great since it pointed to a problem with the library structure
  - I needed to add ~from .confitti import *~ to ~__init__.py~ in the package directory so as to hoist up all the functions so they are available at the top level
  - I converted all the notebooks and now the tests all passed
    - I had to add emcee as a dependency, since lmfit does not pull it in automatically
    - I made it a normal dependency rather than a dev dependency, since in the future there may be core functionality that needs it

*** Overwriting the notebook files with the test output
- [2024-04-03 Wed] I am doing this after having migrated the notebooks to use the editable install of the package
- I will run the tests again, but this time with the ~--overwrite~ flag, and also taking advantage of parallel execution with ~-n=auto~ (using pydist-xdist ~rye add pytest-xdist --dev~)
  #+begin_src sh :dir ../notebooks :results output verbatim
    rye run pytest --nbmake --overwrite -n=auto demo*.ipynb
  #+end_src

** Testing functions within a notebook with ~ipytest~
- See [[https://medium.com/@mefengl/using-pytest-in-jupyter-notebooks-a-practical-guide-1ba8e02af288]["Using Pytest in Jupyter Notebooks: A Practical Guide"]] by Mefeng Lin
* Requirements
- do I want to use a requirements.txt file?
- or pyproject.toml?
* Packaging
** What sort of system should I use?
- I have previously tried poetry, but there seem to be a lot more options these days
- Looks like I am currently [2024-10-15 Tue] using rye, but may update to uv in the future
** How to publish a new version
- Bump the version number
- Add to [[file:../CHANGELOG.md]]
- Add a git tag
#+begin_src sh
  rye publish --skip-existing
#+end_src
* Documentation
** TODO Building a prettier version of docs for github
- The org files are great for use within emacs, but github doesn't render them nicely
  - In particular, it does not support mathjax latex rendering
- I could maybe export to markdown, but at that point I might as well export to html
* Formatting and linting
** TODO How to preserve the semicolons in notebooks
- I like to use semicolons to suppress output in notebooks, but black and other formatters remove them
- There must be some configuration option to preserve them
- At the moment, I see this due to the emacs save hook that runs black on the file
- But in the future I want to migrate to ruff, so I want a solution for that too
- Ideally, it would be a per-folder configuration so that I can have different behavior in the notebooks folder

