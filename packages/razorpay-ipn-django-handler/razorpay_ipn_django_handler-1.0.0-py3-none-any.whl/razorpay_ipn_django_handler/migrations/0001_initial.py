# Generated by Django 5.1.1 on 2024-10-27 17:54

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BillingAddress',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Unique identifier for the billing address.', max_length=255)),
                ('primary', models.BooleanField(default=False, help_text='Indicates if this is the primary billing address.')),
                ('line1', models.CharField(help_text='First line of the address.', max_length=255)),
                ('line2', models.CharField(blank=True, help_text='Second line of the address.', max_length=255, null=True)),
                ('city', models.CharField(help_text='City of the address.', max_length=100)),
                ('zipcode', models.CharField(help_text='Zip code of the address.', max_length=20)),
                ('state', models.CharField(help_text='State of the address.', max_length=100)),
                ('country', models.CharField(help_text='Country of the address.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CardDetails',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('card_id', models.CharField(blank=True, help_text='ID of the card used', max_length=255, null=True)),
                ('name', models.CharField(blank=True, help_text='Name of the cardholder', max_length=255, null=True)),
                ('last4', models.CharField(blank=True, help_text='Last 4 digits of the card number', max_length=4, null=True)),
                ('network', models.CharField(blank=True, choices=[('American Express', 'American Express'), ('Diners Club', 'Diners Club'), ('Maestro', 'Maestro'), ('MasterCard', 'MasterCard'), ('RuPay', 'RuPay'), ('Unknown', 'Unknown'), ('Visa', 'Visa')], max_length=50, null=True)),
                ('card_type', models.CharField(blank=True, choices=[('credit', 'Credit'), ('debit', 'Debit'), ('prepaid', 'Prepaid'), ('unknown', 'Unknown')], max_length=10, null=True)),
                ('sub_type', models.CharField(blank=True, choices=[('customer', 'Customer'), ('business', 'Business')], max_length=10, null=True)),
                ('international', models.BooleanField(default=False, help_text='Indicates if the card is international')),
                ('emi', models.BooleanField(default=False, help_text='Indicates if the card supports EMI payment')),
                ('issuer', models.CharField(blank=True, help_text='Issuer bank of the card', max_length=255, null=True)),
                ('token_iin', models.CharField(blank=True, help_text='Card token identifier (IIN)', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Unique identifier for the item.', max_length=255)),
                ('name', models.CharField(help_text='Name of the item.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the item.', null=True)),
                ('amount', models.IntegerField(help_text='Price of the item.')),
                ('unit_amount', models.IntegerField(blank=True, help_text='Unit amount of the item.', null=True)),
                ('currency', models.CharField(default='INR', help_text='Currency for the item.', max_length=10)),
                ('type', models.CharField(default='invoice', help_text='Type of the item.', max_length=50)),
                ('unit', models.CharField(blank=True, help_text='Unit of the item.', max_length=50, null=True)),
                ('tax_inclusive', models.BooleanField(default=False, help_text='Indicates if the price is tax-inclusive.')),
                ('hsn_code', models.CharField(blank=True, help_text='HSN code for the item.', max_length=50, null=True)),
                ('sac_code', models.CharField(blank=True, help_text='SAC code for the item.', max_length=50, null=True)),
                ('tax_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Tax rate for the item.', max_digits=5, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Order', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Unique identifier of the order', max_length=255)),
                ('amount', models.IntegerField(help_text='Payment amount in the smallest currency sub-unit')),
                ('partial_payment', models.BooleanField(default=False, help_text='Indicates whether the customer can make a partial payment')),
                ('amount_paid', models.IntegerField(blank=True, help_text='The amount paid against the order', null=True)),
                ('amount_due', models.IntegerField(blank=True, help_text='The amount pending against the order', null=True)),
                ('currency', models.CharField(help_text='ISO code for the currency in which you want to accept the payment', max_length=3)),
                ('receipt', models.CharField(blank=True, help_text='Receipt number that corresponds to this order. Must be unique', max_length=40, null=True)),
                ('status', models.CharField(choices=[('created', 'Created'), ('attempted', 'Attempted'), ('paid', 'Paid')], default='created', help_text='The status of the order', max_length=10)),
                ('attempts', models.IntegerField(blank=True, help_text='The number of payment attempts, successful and failed, against this order', null=True)),
                ('created_at', models.DateTimeField(blank=True, help_text='Unix timestamp when this order was created', null=True)),
                ('notes', models.JSONField(blank=True, help_text='Key-value pairs to store additional information about the order. Max 15 pairs', null=True)),
                ('offer_id', models.CharField(blank=True, help_text='Offer ID associated with the order', max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RazorpayWebhook',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('event_id', models.CharField(help_text='Unique identifier for the Razorpay event', max_length=255)),
                ('event_type', models.CharField(choices=[('refund.created', 'Refund Created'), ('refund.processed', 'Refund Processed'), ('payment.authorized', 'Payment Authorized'), ('payment.captured', 'Payment Captured'), ('order.paid', 'Order Paid'), ('invoice.paid', 'Invoice Paid'), ('subscription.authenticated', 'Subscription Authenticated'), ('subscription.charged', 'Subscription Charged'), ('subscription.activated', 'Subscription Activated'), ('subscription.cancelled', 'Subscription Cancelled'), ('subscription.paused', 'Subscription Paused')], help_text='Type of event received from Razorpay', max_length=100)),
                ('account_id', models.CharField(help_text='Razorpay Account ID related to the event', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the webhook was created')),
                ('processed', models.BooleanField(default=False, help_text='Whether the webhook event has been processed')),
            ],
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the refund', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='The unique identifier of the refund.', max_length=255)),
                ('amount', models.IntegerField(help_text='The amount to be refunded in the smallest unit of currency.')),
                ('currency', models.CharField(help_text='The currency of the payment amount for which the refund is initiated.', max_length=10)),
                ('payment_id', models.CharField(help_text='The unique identifier of the payment for which the refund is initiated.', max_length=255)),
                ('speed', models.CharField(choices=[('normal', 'Normal'), ('optimum', 'Optimum')], help_text='Speed at which the refund is to be processed.', max_length=10)),
                ('created_at', models.DateTimeField(help_text='Unix timestamp at which the refund was created.')),
                ('batch_id', models.CharField(blank=True, help_text='If refund created as part of a batch upload.', max_length=255, null=True)),
                ('receipt', models.CharField(blank=True, help_text='A unique identifier for internal reference.', max_length=255, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed')], help_text='Indicates the state of the refund.', max_length=10)),
                ('speed_requested', models.CharField(blank=True, choices=[('normal', 'Normal'), ('optimum', 'Optimum')], help_text='Processing mode of the refund as seen in the refund response.', max_length=10, null=True)),
                ('speed_processed', models.CharField(blank=True, choices=[('instant', 'Instant'), ('normal', 'Normal')], help_text='Describes the mode used to process a refund in the response.', max_length=10, null=True)),
                ('notes', models.JSONField(blank=True, help_text='Key-value store for storing reference data.', null=True)),
                ('acquirer_data', models.JSONField(blank=True, help_text='Acquirer data for the payment', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ShippingAddress',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Unique identifier for the shipping address.', max_length=255)),
                ('primary', models.BooleanField(default=False, help_text='Indicates if this is the primary shipping address.')),
                ('line1', models.CharField(help_text='First line of the address.', max_length=255)),
                ('line2', models.CharField(blank=True, help_text='Second line of the address.', max_length=255, null=True)),
                ('city', models.CharField(help_text='City of the address.', max_length=100)),
                ('zipcode', models.CharField(help_text='Zip code of the address.', max_length=20)),
                ('state', models.CharField(help_text='State of the address.', max_length=100)),
                ('country', models.CharField(help_text='Country of the address.', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Subscription', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Subscription ID for associated subscription events', max_length=255)),
                ('plan_id', models.CharField(blank=True, help_text='Plan ID associated with the subscription', max_length=255, null=True)),
                ('customer_id', models.CharField(blank=True, help_text='Customer ID for the subscription', max_length=255, null=True)),
                ('quantity', models.IntegerField(blank=True, help_text='Quantity in the subscription', null=True)),
                ('total_count', models.IntegerField(blank=True, help_text='Total count of subscription cycles', null=True)),
                ('paid_count', models.IntegerField(blank=True, help_text='Paid cycles count of the subscription', null=True)),
                ('remaining_count', models.IntegerField(blank=True, help_text='Remaining count of subscription cycles', null=True)),
                ('current_start', models.DateTimeField(blank=True, help_text='Current cycle start time', null=True)),
                ('current_end', models.DateTimeField(blank=True, help_text='Current cycle end time', null=True)),
                ('start_at', models.DateTimeField(blank=True, help_text='Subscription start time', null=True)),
                ('end_at', models.DateTimeField(blank=True, help_text='Subscription end time', null=True)),
                ('charge_at', models.DateTimeField(blank=True, help_text='Next charge time', null=True)),
                ('auth_attempts', models.IntegerField(blank=True, help_text='Number of authorization attempts', null=True)),
                ('expire_by', models.DateTimeField(blank=True, help_text='Subscription expiration time', null=True)),
                ('customer_notify', models.BooleanField(choices=[(True, 'Razorpay handles communication'), (False, 'Business handles communication')], default=True, help_text='Indicates whether communication to the customer is handled by the business or Razorpay')),
                ('has_scheduled_changes', models.BooleanField(choices=[(True, 'Has scheduled changes'), (False, 'No scheduled changes')], default=False, help_text='Indicates if the subscription has any scheduled changes')),
                ('schedule_change_at', models.CharField(choices=[('now', 'Now'), ('cycle_end', 'Cycle End')], default='now', help_text='When the subscription should be updated', max_length=10)),
                ('status', models.CharField(choices=[('created', 'Created'), ('authenticated', 'Authenticated'), ('active', 'Active'), ('pending', 'Pending'), ('halted', 'Halted'), ('cancelled', 'Cancelled'), ('completed', 'Completed'), ('expired', 'Expired')], default='created', help_text='Status of the subscription', max_length=20)),
                ('source', models.CharField(blank=True, help_text='Source of subscription creation', max_length=50, null=True)),
                ('payment_method', models.CharField(blank=True, help_text='Payment method for the subscription', max_length=50, null=True)),
                ('offer_id', models.CharField(blank=True, help_text='Offer ID if applicable', max_length=255, null=True)),
                ('notes', models.JSONField(blank=True, help_text='JSON data for any custom notes specific to the subscription', null=True)),
                ('ended_at', models.DateTimeField(blank=True, help_text='Subscription end timestamp, if any', null=True)),
                ('created_at', models.DateTimeField(blank=True, help_text='Timestamp when subscription was created', null=True)),
                ('change_scheduled_at', models.DateTimeField(blank=True, help_text='Timestamp when the subscription change is scheduled', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UPIDetails',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('vpa', models.CharField(blank=True, help_text="Customer's VPA for the UPI payment", max_length=255, null=True)),
                ('flow', models.CharField(blank=True, help_text="Type of UPI flow, e.g., 'in_app'", max_length=50, null=True)),
                ('payer_account_type', models.CharField(blank=True, choices=[('bank_account', 'Bank Account'), ('credit_card', 'Credit Card'), ('wallet', 'Wallet')], help_text='Type of payer account for UPI payment', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerDetails',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(blank=True, help_text='Unique identifier of the customer.', max_length=255, null=True)),
                ('name', models.CharField(blank=True, help_text="Customer's name.", max_length=50, null=True)),
                ('email', models.EmailField(blank=True, help_text="Customer's email address.", max_length=64, null=True)),
                ('contact', models.CharField(blank=True, help_text="Customer's contact number.", max_length=15, null=True)),
                ('billing_address', models.OneToOneField(blank=True, help_text='Billing address of the customer.', null=True, on_delete=django.db.models.deletion.CASCADE, to='razorpay_ipn_django_handler.billingaddress')),
                ('shipping_address', models.OneToOneField(blank=True, help_text='Shipping address of the customer.', null=True, on_delete=django.db.models.deletion.CASCADE, to='razorpay_ipn_django_handler.shippingaddress')),
            ],
        ),
        migrations.CreateModel(
            name='LineItem',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Unique identifier for the line item.', max_length=255)),
                ('name', models.CharField(help_text='Name of the line item.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of the line item.', null=True)),
                ('amount', models.IntegerField(help_text='Total price of the line item.')),
                ('quantity', models.IntegerField(default=1, help_text='Quantity of the line item.')),
                ('item', models.ForeignKey(blank=True, help_text='Reference to the billed item.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.item')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Invoice ID.', max_length=255)),
                ('receipt', models.CharField(blank=True, help_text='Invoice receipt number.', max_length=255, null=True)),
                ('number', models.CharField(blank=True, help_text='Invoice number.', max_length=255, null=True)),
                ('customer_id', models.CharField(blank=True, help_text='Customer ID associated with the invoice.', max_length=255, null=True)),
                ('order_id', models.CharField(blank=True, help_text='Order ID associated with the invoice.', max_length=255, null=True)),
                ('subscription_id', models.CharField(blank=True, help_text='Subscription ID associated with the invoice.', max_length=255, null=True)),
                ('payment_id', models.CharField(blank=True, help_text='Payment ID associated with the invoice.', max_length=255, null=True)),
                ('status', models.CharField(blank=True, choices=[('draft', 'Draft'), ('issued', 'Issued'), ('partially_paid', 'Partially Paid'), ('paid', 'Paid'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('deleted', 'Deleted')], help_text='Status of the invoice.', max_length=50, null=True)),
                ('expire_by', models.DateTimeField(blank=True, help_text='Invoice expiration timestamp.', null=True)),
                ('issued_at', models.DateTimeField(blank=True, help_text='Invoice issue timestamp.', null=True)),
                ('paid_at', models.DateTimeField(blank=True, help_text='Invoice payment timestamp.', null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, help_text='Invoice cancellation timestamp.', null=True)),
                ('expired_at', models.DateTimeField(blank=True, help_text='Invoice expiration timestamp.', null=True)),
                ('sms_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('sent', 'Sent')], help_text='SMS status.', max_length=50, null=True)),
                ('email_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('sent', 'Sent')], help_text='Email status.', max_length=50, null=True)),
                ('date', models.DateTimeField(blank=True, help_text='Invoice date.', null=True)),
                ('terms', models.TextField(blank=True, help_text='Invoice terms.', null=True)),
                ('partial_payment', models.BooleanField(default=False, help_text='Indicates if partial payment is allowed.')),
                ('gross_amount', models.IntegerField(blank=True, help_text='Gross amount of the invoice.', null=True)),
                ('tax_amount', models.IntegerField(blank=True, help_text='Tax amount on the invoice.', null=True)),
                ('taxable_amount', models.IntegerField(blank=True, help_text='Taxable amount.', null=True)),
                ('amount', models.IntegerField(blank=True, help_text='Total amount.', null=True)),
                ('amount_paid', models.IntegerField(blank=True, help_text='Amount paid.', null=True)),
                ('amount_due', models.IntegerField(blank=True, help_text='Amount due.', null=True)),
                ('currency', models.CharField(default='INR', help_text='Currency for the invoice.', max_length=10)),
                ('description', models.TextField(blank=True, help_text='Description of the invoice.', null=True)),
                ('notes', models.JSONField(blank=True, help_text='Additional notes.', null=True)),
                ('customer_details', models.OneToOneField(blank=True, help_text='Customer details for the invoice.', null=True, on_delete=django.db.models.deletion.CASCADE, to='razorpay_ipn_django_handler.customerdetails')),
                ('line_items', models.ManyToManyField(blank=True, help_text='Line items in the invoice.', related_name='invoices', to='razorpay_ipn_django_handler.lineitem')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for the Payment', primary_key=True, serialize=False)),
                ('id', models.CharField(help_text='Payment ID associated with the event', max_length=255)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Total amount for the payment', max_digits=10, null=True)),
                ('currency', models.CharField(blank=True, help_text='Currency for the payment amount', max_length=10, null=True)),
                ('base_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Base amount before adjustments', max_digits=10, null=True)),
                ('status', models.CharField(blank=True, choices=[('created', 'Created'), ('authorized', 'Authorized'), ('captured', 'Captured'), ('refunded', 'Refunded'), ('failed', 'Failed')], max_length=10, null=True)),
                ('method', models.CharField(blank=True, choices=[('card', 'Card'), ('netbanking', 'Net Banking'), ('wallet', 'Wallet'), ('emi', 'EMI'), ('upi', 'UPI')], max_length=20, null=True)),
                ('captured', models.BooleanField(default=False, help_text='Whether the payment was captured')),
                ('amount_refunded', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('amount_transferred', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('refund_status', models.CharField(blank=True, choices=[(None, 'None'), ('partial', 'Partial'), ('full', 'Full')], help_text='Refund status: null, partial, or full', max_length=10, null=True)),
                ('order_id', models.CharField(blank=True, help_text='Order ID associated with the payment', max_length=255, null=True)),
                ('invoice_id', models.CharField(blank=True, help_text='Invoice ID associated with the payment', max_length=255, null=True)),
                ('international', models.BooleanField(default=False)),
                ('token_id', models.CharField(blank=True, help_text='Token ID associated with the payment', max_length=255, null=True)),
                ('vpa', models.CharField(blank=True, help_text='UPI VPA for UPI payments', max_length=255, null=True)),
                ('email', models.EmailField(blank=True, help_text='Customer email associated with the payment', max_length=254, null=True)),
                ('contact', models.CharField(blank=True, help_text='Customer contact number', max_length=15, null=True)),
                ('bank', models.CharField(blank=True, help_text='Bank name associated with the payment', max_length=255, null=True)),
                ('wallet', models.CharField(blank=True, help_text='Wallet name used for payment', max_length=255, null=True)),
                ('reward', models.CharField(blank=True, help_text='Reward details, if any', max_length=255, null=True)),
                ('customer_id', models.CharField(blank=True, help_text='Customer ID for the subscription', max_length=255, null=True)),
                ('acquirer_data', models.JSONField(blank=True, help_text='Acquirer data for the payment', null=True)),
                ('fee', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('tax', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('notes', models.JSONField(blank=True, null=True)),
                ('error_code', models.CharField(blank=True, max_length=50, null=True)),
                ('error_description', models.TextField(blank=True, null=True)),
                ('error_source', models.CharField(blank=True, max_length=255, null=True)),
                ('error_step', models.CharField(blank=True, max_length=255, null=True)),
                ('error_reason', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('card_details', models.OneToOneField(blank=True, help_text='Card details for the payment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.carddetails')),
                ('upi_details', models.OneToOneField(blank=True, help_text='UPI details for the payment', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.upidetails')),
            ],
        ),
        migrations.CreateModel(
            name='RazorpayIPN',
            fields=[
                ('razorpaywebhook_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='razorpay_ipn_django_handler.razorpaywebhook')),
                ('payload', models.JSONField(help_text='Raw event data payload from Razorpay')),
                ('signature_verified', models.BooleanField(default=False, help_text='Indicates if the IPN signature was verified')),
            ],
            options={
                'verbose_name': 'Razorpay IPN',
                'verbose_name_plural': 'Razorpay IPNs',
            },
            bases=('razorpay_ipn_django_handler.razorpaywebhook',),
        ),
        migrations.AddField(
            model_name='razorpaywebhook',
            name='invoice',
            field=models.OneToOneField(blank=True, help_text='Related Invoice details', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.invoice'),
        ),
        migrations.AddField(
            model_name='razorpaywebhook',
            name='order',
            field=models.OneToOneField(blank=True, help_text='Related Order details', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.order'),
        ),
        migrations.AddField(
            model_name='razorpaywebhook',
            name='payment',
            field=models.OneToOneField(blank=True, help_text='Related Payment details', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.payment'),
        ),
        migrations.AddField(
            model_name='razorpaywebhook',
            name='refund',
            field=models.OneToOneField(blank=True, help_text='Related Refund details', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.refund'),
        ),
        migrations.AddField(
            model_name='razorpaywebhook',
            name='subscription',
            field=models.OneToOneField(blank=True, help_text='Related Subscription details', null=True, on_delete=django.db.models.deletion.SET_NULL, to='razorpay_ipn_django_handler.subscription'),
        ),
    ]
