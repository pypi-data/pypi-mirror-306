# Generated from Py0.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,155,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,5,0,38,8,0,10,0,12,
        0,41,9,0,1,0,1,0,3,0,45,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,9,1,9,5,9,90,8,9,10,9,12,9,93,9,9,1,10,4,10,96,8,10,11,10,12,10,
        97,1,11,1,11,5,11,102,8,11,10,11,12,11,105,9,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,131,8,12,1,13,1,13,1,
        14,1,14,5,14,137,8,14,10,14,12,14,140,9,14,1,14,1,14,1,15,4,15,145,
        8,15,11,15,12,15,146,1,16,4,16,150,8,16,11,16,12,16,151,1,16,1,16,
        0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,1,0,9,3,0,65,90,95,95,97,122,4,0,48,
        57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,4,0,42,43,
        45,45,47,47,61,61,2,0,60,60,62,62,8,0,40,41,44,44,46,46,58,59,91,
        91,93,93,123,123,125,125,2,0,10,10,13,13,2,0,9,9,32,32,173,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,1,35,1,0,0,0,3,46,1,0,0,0,5,55,1,0,0,0,7,58,1,0,0,
        0,9,63,1,0,0,0,11,67,1,0,0,0,13,73,1,0,0,0,15,80,1,0,0,0,17,84,1,
        0,0,0,19,87,1,0,0,0,21,95,1,0,0,0,23,99,1,0,0,0,25,130,1,0,0,0,27,
        132,1,0,0,0,29,134,1,0,0,0,31,144,1,0,0,0,33,149,1,0,0,0,35,39,3,
        15,7,0,36,38,3,33,16,0,37,36,1,0,0,0,38,41,1,0,0,0,39,37,1,0,0,0,
        39,40,1,0,0,0,40,44,1,0,0,0,41,39,1,0,0,0,42,45,3,31,15,0,43,45,
        5,0,0,1,44,42,1,0,0,0,44,43,1,0,0,0,45,2,1,0,0,0,46,47,5,102,0,0,
        47,48,5,117,0,0,48,49,5,110,0,0,49,50,5,99,0,0,50,51,5,116,0,0,51,
        52,5,105,0,0,52,53,5,111,0,0,53,54,5,110,0,0,54,4,1,0,0,0,55,56,
        5,105,0,0,56,57,5,102,0,0,57,6,1,0,0,0,58,59,5,101,0,0,59,60,5,108,
        0,0,60,61,5,115,0,0,61,62,5,101,0,0,62,8,1,0,0,0,63,64,5,102,0,0,
        64,65,5,111,0,0,65,66,5,114,0,0,66,10,1,0,0,0,67,68,5,119,0,0,68,
        69,5,104,0,0,69,70,5,105,0,0,70,71,5,108,0,0,71,72,5,101,0,0,72,
        12,1,0,0,0,73,74,5,114,0,0,74,75,5,101,0,0,75,76,5,112,0,0,76,77,
        5,101,0,0,77,78,5,97,0,0,78,79,5,116,0,0,79,14,1,0,0,0,80,81,5,101,
        0,0,81,82,5,110,0,0,82,83,5,100,0,0,83,16,1,0,0,0,84,85,5,61,0,0,
        85,86,5,62,0,0,86,18,1,0,0,0,87,91,7,0,0,0,88,90,7,1,0,0,89,88,1,
        0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,92,20,1,0,0,0,93,
        91,1,0,0,0,94,96,7,2,0,0,95,94,1,0,0,0,96,97,1,0,0,0,97,95,1,0,0,
        0,97,98,1,0,0,0,98,22,1,0,0,0,99,103,5,34,0,0,100,102,8,3,0,0,101,
        100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,
        106,1,0,0,0,105,103,1,0,0,0,106,107,5,34,0,0,107,24,1,0,0,0,108,
        131,7,4,0,0,109,110,5,61,0,0,110,131,5,61,0,0,111,112,5,33,0,0,112,
        131,5,61,0,0,113,114,5,60,0,0,114,131,5,61,0,0,115,116,5,62,0,0,
        116,131,5,61,0,0,117,131,7,5,0,0,118,119,5,43,0,0,119,131,5,61,0,
        0,120,121,5,45,0,0,121,131,5,61,0,0,122,123,5,42,0,0,123,131,5,61,
        0,0,124,125,5,47,0,0,125,131,5,61,0,0,126,127,5,38,0,0,127,131,5,
        38,0,0,128,129,5,124,0,0,129,131,5,124,0,0,130,108,1,0,0,0,130,109,
        1,0,0,0,130,111,1,0,0,0,130,113,1,0,0,0,130,115,1,0,0,0,130,117,
        1,0,0,0,130,118,1,0,0,0,130,120,1,0,0,0,130,122,1,0,0,0,130,124,
        1,0,0,0,130,126,1,0,0,0,130,128,1,0,0,0,131,26,1,0,0,0,132,133,7,
        6,0,0,133,28,1,0,0,0,134,138,5,35,0,0,135,137,8,7,0,0,136,135,1,
        0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,141,1,
        0,0,0,140,138,1,0,0,0,141,142,6,14,0,0,142,30,1,0,0,0,143,145,7,
        7,0,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,
        0,0,0,147,32,1,0,0,0,148,150,7,8,0,0,149,148,1,0,0,0,150,151,1,0,
        0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,153,1,0,0,0,153,154,6,16,
        0,0,154,34,1,0,0,0,10,0,39,44,91,97,103,130,138,146,151,1,6,0,0
    ]

class Py0Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    END_LINE = 1
    FUNCTION = 2
    IF = 3
    ELSE = 4
    FOR = 5
    WHILE = 6
    REPEAT = 7
    END = 8
    ARROW = 9
    IDENTIFIER = 10
    NUMBER = 11
    STRING = 12
    OPERATOR = 13
    SYMBOL = 14
    COMMENT = 15
    NL = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'function'", "'if'", "'else'", "'for'", "'while'", "'repeat'", 
            "'end'", "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "END_LINE", "FUNCTION", "IF", "ELSE", "FOR", "WHILE", "REPEAT", 
            "END", "ARROW", "IDENTIFIER", "NUMBER", "STRING", "OPERATOR", 
            "SYMBOL", "COMMENT", "NL", "WS" ]

    ruleNames = [ "END_LINE", "FUNCTION", "IF", "ELSE", "FOR", "WHILE", 
                  "REPEAT", "END", "ARROW", "IDENTIFIER", "NUMBER", "STRING", 
                  "OPERATOR", "SYMBOL", "COMMENT", "NL", "WS" ]

    grammarFileName = "Py0.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


