# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import hal_pb_pb2 as hal__pb__pb2

GRPC_GENERATED_VERSION = '1.67.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in hal_pb_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ServoControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPositions = channel.unary_unary(
                '/hal_pb.ServoControl/GetPositions',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.JointPositions.FromString,
                _registered_method=True)
        self.SetPositions = channel.unary_unary(
                '/hal_pb.ServoControl/SetPositions',
                request_serializer=hal__pb__pb2.JointPositions.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.EnableMovement = channel.unary_unary(
                '/hal_pb.ServoControl/EnableMovement',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.DisableMovement = channel.unary_unary(
                '/hal_pb.ServoControl/DisableMovement',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.SetPosition = channel.unary_unary(
                '/hal_pb.ServoControl/SetPosition',
                request_serializer=hal__pb__pb2.JointPosition.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.SetWifiInfo = channel.unary_unary(
                '/hal_pb.ServoControl/SetWifiInfo',
                request_serializer=hal__pb__pb2.WifiCredentials.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.GetServoInfo = channel.unary_unary(
                '/hal_pb.ServoControl/GetServoInfo',
                request_serializer=hal__pb__pb2.ServoId.SerializeToString,
                response_deserializer=hal__pb__pb2.ServoInfoResponse.FromString,
                _registered_method=True)
        self.Scan = channel.unary_unary(
                '/hal_pb.ServoControl/Scan',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.ServoIds.FromString,
                _registered_method=True)
        self.ChangeId = channel.unary_unary(
                '/hal_pb.ServoControl/ChangeId',
                request_serializer=hal__pb__pb2.IdChange.SerializeToString,
                response_deserializer=hal__pb__pb2.ChangeIdResponse.FromString,
                _registered_method=True)
        self.StartCalibration = channel.unary_unary(
                '/hal_pb.ServoControl/StartCalibration',
                request_serializer=hal__pb__pb2.CalibrationRequest.SerializeToString,
                response_deserializer=hal__pb__pb2.CalibrationResponse.FromString,
                _registered_method=True)
        self.CancelCalibration = channel.unary_unary(
                '/hal_pb.ServoControl/CancelCalibration',
                request_serializer=hal__pb__pb2.ServoId.SerializeToString,
                response_deserializer=hal__pb__pb2.CalibrationResponse.FromString,
                _registered_method=True)
        self.StartVideoStream = channel.unary_unary(
                '/hal_pb.ServoControl/StartVideoStream',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.StopVideoStream = channel.unary_unary(
                '/hal_pb.ServoControl/StopVideoStream',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.GetVideoStreamUrls = channel.unary_unary(
                '/hal_pb.ServoControl/GetVideoStreamUrls',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.VideoStreamUrls.FromString,
                _registered_method=True)
        self.GetCalibrationStatus = channel.unary_unary(
                '/hal_pb.ServoControl/GetCalibrationStatus',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.CalibrationStatus.FromString,
                _registered_method=True)
        self.SetTorque = channel.unary_unary(
                '/hal_pb.ServoControl/SetTorque',
                request_serializer=hal__pb__pb2.TorqueSettings.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.SetTorqueEnable = channel.unary_unary(
                '/hal_pb.ServoControl/SetTorqueEnable',
                request_serializer=hal__pb__pb2.TorqueEnableSettings.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.GetImuData = channel.unary_unary(
                '/hal_pb.ServoControl/GetImuData',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.ImuData.FromString,
                _registered_method=True)
        self.UploadAudio = channel.stream_unary(
                '/hal_pb.ServoControl/UploadAudio',
                request_serializer=hal__pb__pb2.AudioChunk.SerializeToString,
                response_deserializer=hal__pb__pb2.UploadResponse.FromString,
                _registered_method=True)
        self.PlayAudio = channel.unary_unary(
                '/hal_pb.ServoControl/PlayAudio',
                request_serializer=hal__pb__pb2.PlayRequest.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.StartRecording = channel.unary_unary(
                '/hal_pb.ServoControl/StartRecording',
                request_serializer=hal__pb__pb2.RecordingConfig.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.StopRecording = channel.unary_unary(
                '/hal_pb.ServoControl/StopRecording',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.Empty.FromString,
                _registered_method=True)
        self.GetRecordedAudio = channel.unary_stream(
                '/hal_pb.ServoControl/GetRecordedAudio',
                request_serializer=hal__pb__pb2.Empty.SerializeToString,
                response_deserializer=hal__pb__pb2.AudioChunk.FromString,
                _registered_method=True)


class ServoControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPositions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableMovement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableMovement(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetWifiInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServoInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Scan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChangeId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVideoStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopVideoStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVideoStreamUrls(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCalibrationStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTorque(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTorqueEnable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetImuData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadAudio(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayAudio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopRecording(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRecordedAudio(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServoControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPositions,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.JointPositions.SerializeToString,
            ),
            'SetPositions': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPositions,
                    request_deserializer=hal__pb__pb2.JointPositions.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'EnableMovement': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableMovement,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'DisableMovement': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableMovement,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'SetPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPosition,
                    request_deserializer=hal__pb__pb2.JointPosition.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'SetWifiInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SetWifiInfo,
                    request_deserializer=hal__pb__pb2.WifiCredentials.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'GetServoInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServoInfo,
                    request_deserializer=hal__pb__pb2.ServoId.FromString,
                    response_serializer=hal__pb__pb2.ServoInfoResponse.SerializeToString,
            ),
            'Scan': grpc.unary_unary_rpc_method_handler(
                    servicer.Scan,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.ServoIds.SerializeToString,
            ),
            'ChangeId': grpc.unary_unary_rpc_method_handler(
                    servicer.ChangeId,
                    request_deserializer=hal__pb__pb2.IdChange.FromString,
                    response_serializer=hal__pb__pb2.ChangeIdResponse.SerializeToString,
            ),
            'StartCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.StartCalibration,
                    request_deserializer=hal__pb__pb2.CalibrationRequest.FromString,
                    response_serializer=hal__pb__pb2.CalibrationResponse.SerializeToString,
            ),
            'CancelCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelCalibration,
                    request_deserializer=hal__pb__pb2.ServoId.FromString,
                    response_serializer=hal__pb__pb2.CalibrationResponse.SerializeToString,
            ),
            'StartVideoStream': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVideoStream,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'StopVideoStream': grpc.unary_unary_rpc_method_handler(
                    servicer.StopVideoStream,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'GetVideoStreamUrls': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVideoStreamUrls,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.VideoStreamUrls.SerializeToString,
            ),
            'GetCalibrationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCalibrationStatus,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.CalibrationStatus.SerializeToString,
            ),
            'SetTorque': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTorque,
                    request_deserializer=hal__pb__pb2.TorqueSettings.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'SetTorqueEnable': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTorqueEnable,
                    request_deserializer=hal__pb__pb2.TorqueEnableSettings.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'GetImuData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetImuData,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.ImuData.SerializeToString,
            ),
            'UploadAudio': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadAudio,
                    request_deserializer=hal__pb__pb2.AudioChunk.FromString,
                    response_serializer=hal__pb__pb2.UploadResponse.SerializeToString,
            ),
            'PlayAudio': grpc.unary_unary_rpc_method_handler(
                    servicer.PlayAudio,
                    request_deserializer=hal__pb__pb2.PlayRequest.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'StartRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StartRecording,
                    request_deserializer=hal__pb__pb2.RecordingConfig.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'StopRecording': grpc.unary_unary_rpc_method_handler(
                    servicer.StopRecording,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.Empty.SerializeToString,
            ),
            'GetRecordedAudio': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRecordedAudio,
                    request_deserializer=hal__pb__pb2.Empty.FromString,
                    response_serializer=hal__pb__pb2.AudioChunk.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hal_pb.ServoControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hal_pb.ServoControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ServoControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/GetPositions',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.JointPositions.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/SetPositions',
            hal__pb__pb2.JointPositions.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EnableMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/EnableMovement',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisableMovement(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/DisableMovement',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/SetPosition',
            hal__pb__pb2.JointPosition.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetWifiInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/SetWifiInfo',
            hal__pb__pb2.WifiCredentials.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetServoInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/GetServoInfo',
            hal__pb__pb2.ServoId.SerializeToString,
            hal__pb__pb2.ServoInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Scan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/Scan',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.ServoIds.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChangeId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/ChangeId',
            hal__pb__pb2.IdChange.SerializeToString,
            hal__pb__pb2.ChangeIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/StartCalibration',
            hal__pb__pb2.CalibrationRequest.SerializeToString,
            hal__pb__pb2.CalibrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/CancelCalibration',
            hal__pb__pb2.ServoId.SerializeToString,
            hal__pb__pb2.CalibrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartVideoStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/StartVideoStream',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopVideoStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/StopVideoStream',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVideoStreamUrls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/GetVideoStreamUrls',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.VideoStreamUrls.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCalibrationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/GetCalibrationStatus',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.CalibrationStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTorque(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/SetTorque',
            hal__pb__pb2.TorqueSettings.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTorqueEnable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/SetTorqueEnable',
            hal__pb__pb2.TorqueEnableSettings.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetImuData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/GetImuData',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.ImuData.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UploadAudio(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/hal_pb.ServoControl/UploadAudio',
            hal__pb__pb2.AudioChunk.SerializeToString,
            hal__pb__pb2.UploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlayAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/PlayAudio',
            hal__pb__pb2.PlayRequest.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/StartRecording',
            hal__pb__pb2.RecordingConfig.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopRecording(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hal_pb.ServoControl/StopRecording',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRecordedAudio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/hal_pb.ServoControl/GetRecordedAudio',
            hal__pb__pb2.Empty.SerializeToString,
            hal__pb__pb2.AudioChunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
