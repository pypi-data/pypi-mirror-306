from __future__ import annotations

from logging import getLogger
from pathlib import Path

import pandas as pd
from sdv.metadata import SingleTableMetadata
from sdv.single_table import CopulaGANSynthesizer, CTGANSynthesizer, GaussianCopulaSynthesizer, TVAESynthesizer

logger = getLogger()


class Synthesizer:
    """A class to synthesize data using different synthesizers from the SDV library.

    This class supports the generation of synthetic data using various models and allows for optional adjustment
    of the synthetic data to match the target variable ratio found in the original dataset.

    Models supported:
        - GaussianCopulaSynthesizer
        - CTGANSynthesizer
        - TVAESynthesizer
        - CopulaGANSynthesizer

    Attributes:
        original_data_path (Path): Path to the original dataset.
        output_path (Path): Path where the synthesized datasets will be saved.
        data (pd.DataFrame): Original dataset loaded into a pandas DataFrame.
        metadata (SingleTableMetadata): Metadata object for the dataset, used by the synthesizers.
        num_rows (int): Number of rows in the original dataset.
        models (dict): Dictionary mapping model names to their corresponding synthesizer classes.

    Methods:
        synthesize(model_name=None, num_sample=None): Main method to generate synthetic data using the specified
            model or all models if none is specified. Allows specifying the number of samples to be generated
            and optionally adjusts the generated data to match the target variable ratio of the original data.

        _synthesize_model(model_name, num_sample=None, target_column=None, adjust_ratio=False): Helper method
            to generate synthetic data using a single specified model. It can optionally adjust the synthetic
            data to match the original data's target variable ratio if adjust_ratio is set to True and a target_column
            is provided.

        adjust_ratio(synthetic_data, target_column): Adjusts the synthetic data to have the same ratio of the
            target variable as the original data. This method is called internally if adjust_ratio is True
            during the synthesis process.
    """

    def __init__(self: Synthesizer, original_data_path: str, output_path: str) -> None:
        """Initializes the Synthesizer with paths to the original data and output directory.

        Parameters:
            original_data_path (str): The file path to the original dataset.
            output_path (str): The directory path where the synthesized datasets will be saved.
        """
        self.original_data_path = Path(original_data_path)
        self.output_path = Path(output_path)
        self.data = pd.read_csv(self.original_data_path, low_memory=False)
        self.metadata = SingleTableMetadata()
        self.metadata.detect_from_dataframe(self.data)
        self.num_rows = self.data.shape[0]
        self.models = {
            "GaussianCopula": GaussianCopulaSynthesizer,
            "CTGAN": CTGANSynthesizer,
            "TVAE": TVAESynthesizer,
            "CopulaGAN": CopulaGANSynthesizer,
        }

    def synthesize(
        self: Synthesizer,
        model_name: str | None = None,
        num_sample: int | None = None,
        target_column: str | None = None,
        *,
        adjust_ratio: bool = False,
    ) -> None:
        """Generates synthetic data using the specified model or all models if none is specified.

        Optionally adjusts the generated data to match the target variable ratio of the original data.

        Parameters:
            model_name (str | None): The name of the model to use for data synthesis. If None, uses all models.
            num_sample (int | None): The number of samples to be generated. If None, defaults to the number of rows
                                     in the original dataset.
            target_column (str | None): The name of the target column to adjust the ratio for. This parameter is only
                                        considered if adjust_ratio is True.
            adjust_ratio (bool): Whether to adjust the synthetic data to match the original data's target variable ratio
                                 Default is False.

        Returns:
            None
        """
        if model_name:
            # Generate data using the specified model
            self._synthesize_model(model_name, num_sample, target_column, adjust_ratio=adjust_ratio)
        else:
            # Generate data using all models
            for model in self.models:
                self._synthesize_model(model, num_sample, target_column, adjust_ratio=adjust_ratio)

    def adjust_ratio(self: Synthesizer, synthetic_data: pd.DataFrame, target_column: str) -> pd.DataFrame:
        """Adjusts the synthetic data to have the same ratio of target variable as the original data.

        Parameters:
            synthetic_data (pd.DataFrame): The synthetic data generated by the model.
            target_column (str): The name of the target column in the dataset.

        Returns:
            pd.DataFrame
        """
        original_ratio = self.data[target_column].value_counts(normalize=True)

        num_samples_original = len(self.data)
        target_counts = {label: int(ratio * num_samples_original) for label, ratio in original_ratio.items()}

        adjusted_data = pd.DataFrame()
        for label, required_count in target_counts.items():
            subset = synthetic_data[synthetic_data[target_column] == label]
            if len(subset) > required_count:
                subset = subset.sample(n=required_count)
            adjusted_data = pd.concat([adjusted_data, subset])

        # If after adjusting we have less data than original, fill with random samples from synthetic data
        if len(adjusted_data) < num_samples_original:
            additional_samples_needed = num_samples_original - len(adjusted_data)
            additional_samples = synthetic_data.sample(n=additional_samples_needed)
            adjusted_data = pd.concat([adjusted_data, additional_samples], ignore_index=True)

        return adjusted_data

    def _synthesize_model(
        self: Synthesizer,
        model_name: str,
        num_sample: int | None = None,
        target_column: str | None = None,
        *,
        adjust_ratio: bool = False,
    ) -> None:
        """Generates synthetic data using a specified model.

        Optionally adjusts the generated data to match the target variable ratio of the original data.

        Parameters:
            model_name (str): The name of the model to use for data synthesis.
            num_sample (int | None): The number of samples to be generated. If None, defaults to the number of rows
                                    in the original dataset.
            target_column (str | None): The name of the target column to adjust the ratio for. This parameter is
                                        only considered if adjust_ratio is True.
            adjust_ratio (bool): Whether to adjust the synthetic data to match the original data's target variable
                                ratio. Default is False.

        Returns:
            None
        """
        model_kwargs = {
            "metadata": self.metadata,
            "enforce_min_max_values": True,
            "enforce_rounding": True,
        }

        if model_name in ["CopulaGAN", "CTGAN", "TVAE"]:
            model_kwargs.update(
                {
                    "epochs": 400,
                    "cuda": True,
                },
            )

        model = self.models[model_name](**model_kwargs)
        model.fit(self.data)

        num_rows_to_sample = num_sample if num_sample is not None else self.num_rows
        synthetic_data = model.sample(num_rows=num_rows_to_sample)

        if adjust_ratio and target_column:
            synthetic_data = self.adjust_ratio(synthetic_data, target_column)

        synthetic_data.to_csv(self.output_path / f"{model_name}Synthesizer.csv", index=False)
        logger.info(
            "Synthetic data generated using %s saved to %s",
            model_name,
            self.output_path / f"{model_name}Synthesizer.csv",
        )
