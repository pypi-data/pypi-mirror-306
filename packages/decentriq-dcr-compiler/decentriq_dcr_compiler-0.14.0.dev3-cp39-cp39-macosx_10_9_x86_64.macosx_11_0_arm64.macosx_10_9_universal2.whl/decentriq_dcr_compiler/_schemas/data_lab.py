# generated by datamodel-codegen:
#   filename:  data_lab.json

from __future__ import annotations

from enum import Enum
from typing import Optional, Sequence, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel, conint


class EnclaveSpecification(BaseModel):
    attestationProtoBase64: str
    id: str
    workerProtocol: conint(ge=0)


class FormatType(Enum):
    STRING = 'STRING'
    INTEGER = 'INTEGER'
    FLOAT = 'FLOAT'
    EMAIL = 'EMAIL'
    DATE_ISO8601 = 'DATE_ISO8601'
    PHONE_NUMBER_E164 = 'PHONE_NUMBER_E164'
    HASH_SHA256_HEX = 'HASH_SHA256_HEX'


class HashingAlgorithm(Enum):
    SHA256_HEX = 'SHA256_HEX'


class Type(Enum):
    SUPPORTED = 'SUPPORTED'


class RequirementFlagValue1(BaseModel):
    type: Type


class Type1(Enum):
    DATASET = 'DATASET'


class RequirementFlagValue2(BaseModel):
    type: Type1


class Type2(Enum):
    PROPERTY = 'PROPERTY'


class RequirementFlagValue3(BaseModel):
    type: Type2
    value: str


class RequirementFlagValue(
    RootModel[
        Union[RequirementFlagValue1, RequirementFlagValue2, RequirementFlagValue3]
    ]
):
    root: Union[RequirementFlagValue1, RequirementFlagValue2, RequirementFlagValue3]


class DataLabComputeV0(BaseModel):
    authenticationRootCertificatePem: str
    driverEnclaveSpecification: EnclaveSpecification
    id: str
    matchingIdFormat: FormatType
    matchingIdHashingAlgorithm: Optional[HashingAlgorithm] = None
    name: str
    numEmbeddings: conint(ge=0)
    publisherEmail: str
    pythonEnclaveSpecification: EnclaveSpecification


class DataLabComputeV1(DataLabComputeV0):
    pass


class DataLabComputeV2(DataLabComputeV0):
    pass


class DataLabComputeV3(DataLabComputeV0):
    pass


class DataLabComputeV4(DataLabComputeV0):
    pass


class DataLabComputeV5(DataLabComputeV0):
    pass


class DataLabComputeV6(DataLabComputeV0):
    pass


class KnownOrUnknownRequirementFlagValue(RootModel[Optional[RequirementFlagValue]]):
    root: Optional[RequirementFlagValue]


class RequirementFlag(BaseModel):
    details: KnownOrUnknownRequirementFlagValue
    name: str


class Requirements(BaseModel):
    optional: Sequence[RequirementFlag]
    required: Sequence[RequirementFlag]


class DataLabCompute1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: DataLabComputeV0


class DataLabCompute2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1: DataLabComputeV1


class DataLabCompute3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2: DataLabComputeV2


class DataLabCompute4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v3: DataLabComputeV3


class DataLabCompute5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v4: DataLabComputeV4


class DataLabCompute6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v5: DataLabComputeV5


class DataLabCompute7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v6: DataLabComputeV6


class DataLabCompute(
    RootModel[
        Union[
            DataLabCompute1,
            DataLabCompute2,
            DataLabCompute3,
            DataLabCompute4,
            DataLabCompute5,
            DataLabCompute6,
            DataLabCompute7,
        ]
    ]
):
    root: Union[
        DataLabCompute1,
        DataLabCompute2,
        DataLabCompute3,
        DataLabCompute4,
        DataLabCompute5,
        DataLabCompute6,
        DataLabCompute7,
    ]


class DataLabComputeOrUnknown(RootModel[Optional[DataLabCompute]]):
    root: Optional[DataLabCompute]


class DataLabV0(BaseModel):
    compute: DataLabComputeOrUnknown
    features: Sequence[str]
    provides: Requirements


class DataLab1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v0: DataLabV0


class DataLab(RootModel[DataLab1]):
    root: DataLab1 = Field(..., title='DataLab')
