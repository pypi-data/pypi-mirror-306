# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class DeploymenttemplatesIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'about_page_content': 'str',
        'categories': 'list[str]',
        'description': 'str',
        'image_url': 'str',
        'name': 'str',
        'org_id': 'str',
        'parameters': 'list[V1DeploymentTemplateParameter]',
        'spec': 'str',
        'tags': 'list[V1ResourceTag]',
        'visibility': 'V1DeploymentTemplateType'
    }

    attribute_map = {
        'about_page_content': 'aboutPageContent',
        'categories': 'categories',
        'description': 'description',
        'image_url': 'imageUrl',
        'name': 'name',
        'org_id': 'orgId',
        'parameters': 'parameters',
        'spec': 'spec',
        'tags': 'tags',
        'visibility': 'visibility'
    }

    def __init__(self, about_page_content: 'str' =None, categories: 'list[str]' =None, description: 'str' =None, image_url: 'str' =None, name: 'str' =None, org_id: 'str' =None, parameters: 'list[V1DeploymentTemplateParameter]' =None, spec: 'str' =None, tags: 'list[V1ResourceTag]' =None, visibility: 'V1DeploymentTemplateType' =None):  # noqa: E501
        """DeploymenttemplatesIdBody - a model defined in Swagger"""  # noqa: E501
        self._about_page_content = None
        self._categories = None
        self._description = None
        self._image_url = None
        self._name = None
        self._org_id = None
        self._parameters = None
        self._spec = None
        self._tags = None
        self._visibility = None
        self.discriminator = None
        if about_page_content is not None:
            self.about_page_content = about_page_content
        if categories is not None:
            self.categories = categories
        if description is not None:
            self.description = description
        if image_url is not None:
            self.image_url = image_url
        if name is not None:
            self.name = name
        if org_id is not None:
            self.org_id = org_id
        if parameters is not None:
            self.parameters = parameters
        if spec is not None:
            self.spec = spec
        if tags is not None:
            self.tags = tags
        if visibility is not None:
            self.visibility = visibility

    @property
    def about_page_content(self) -> 'str':
        """Gets the about_page_content of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The about_page_content of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._about_page_content

    @about_page_content.setter
    def about_page_content(self, about_page_content: 'str'):
        """Sets the about_page_content of this DeploymenttemplatesIdBody.


        :param about_page_content: The about_page_content of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._about_page_content = about_page_content

    @property
    def categories(self) -> 'list[str]':
        """Gets the categories of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The categories of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: 'list[str]'):
        """Sets the categories of this DeploymenttemplatesIdBody.


        :param categories: The categories of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: list[str]
        """

        self._categories = categories

    @property
    def description(self) -> 'str':
        """Gets the description of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The description of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this DeploymenttemplatesIdBody.


        :param description: The description of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def image_url(self) -> 'str':
        """Gets the image_url of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The image_url of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: 'str'):
        """Sets the image_url of this DeploymenttemplatesIdBody.


        :param image_url: The image_url of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def name(self) -> 'str':
        """Gets the name of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The name of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this DeploymenttemplatesIdBody.


        :param name: The name of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def org_id(self) -> 'str':
        """Gets the org_id of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The org_id of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id: 'str'):
        """Sets the org_id of this DeploymenttemplatesIdBody.


        :param org_id: The org_id of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._org_id = org_id

    @property
    def parameters(self) -> 'list[V1DeploymentTemplateParameter]':
        """Gets the parameters of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The parameters of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: list[V1DeploymentTemplateParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: 'list[V1DeploymentTemplateParameter]'):
        """Sets the parameters of this DeploymenttemplatesIdBody.


        :param parameters: The parameters of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: list[V1DeploymentTemplateParameter]
        """

        self._parameters = parameters

    @property
    def spec(self) -> 'str':
        """Gets the spec of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The spec of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._spec

    @spec.setter
    def spec(self, spec: 'str'):
        """Sets the spec of this DeploymenttemplatesIdBody.


        :param spec: The spec of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: str
        """

        self._spec = spec

    @property
    def tags(self) -> 'list[V1ResourceTag]':
        """Gets the tags of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The tags of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: list[V1ResourceTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: 'list[V1ResourceTag]'):
        """Sets the tags of this DeploymenttemplatesIdBody.


        :param tags: The tags of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: list[V1ResourceTag]
        """

        self._tags = tags

    @property
    def visibility(self) -> 'V1DeploymentTemplateType':
        """Gets the visibility of this DeploymenttemplatesIdBody.  # noqa: E501


        :return: The visibility of this DeploymenttemplatesIdBody.  # noqa: E501
        :rtype: V1DeploymentTemplateType
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: 'V1DeploymentTemplateType'):
        """Sets the visibility of this DeploymenttemplatesIdBody.


        :param visibility: The visibility of this DeploymenttemplatesIdBody.  # noqa: E501
        :type: V1DeploymentTemplateType
        """

        self._visibility = visibility

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeploymenttemplatesIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'DeploymenttemplatesIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, DeploymenttemplatesIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'DeploymenttemplatesIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
