from typing import overload
import ghidra.features.base.memsearch.bytesource
import ghidra.features.base.memsearch.format
import ghidra.features.base.memsearch.gui
import ghidra.program.model.address
import ghidra.program.model.listing
import java.lang
import java.nio.charset
import java.util


class SearchSettings(object):
    """
    Immutable container for all the relevant search settings.
    """





    def __init__(self): ...



    def equals(self, __a0: object) -> bool: ...

    def getAlignment(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDecimalByteSize(self) -> int: ...

    def getSearchAddresses(self, program: ghidra.program.model.listing.Program) -> ghidra.program.model.address.AddressSet: ...

    def getSearchFormat(self) -> ghidra.features.base.memsearch.format.SearchFormat:
        """
        Returns the {@link SearchFormat} to be used to parse the input text.
        @return the search format to be used to parse the input text
        """
        ...

    def getSelectedMemoryRegions(self) -> java.util.Set: ...

    def getStringCharset(self) -> java.nio.charset.Charset: ...

    def hashCode(self) -> int: ...

    def includeDefinedData(self) -> bool: ...

    def includeInstructions(self) -> bool: ...

    def includeUndefinedData(self) -> bool: ...

    def isBigEndian(self) -> bool: ...

    def isCaseSensitive(self) -> bool: ...

    def isDecimalUnsigned(self) -> bool: ...

    def isSelectedRegion(self, region: ghidra.features.base.memsearch.bytesource.SearchRegion) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def useEscapeSequences(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def withAlignment(self, newAlignment: int) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withBigEndian(self, isBigEndian: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withCaseSensitive(self, b: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withDecimalByteSize(self, byteSize: int) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withDecimalUnsigned(self, b: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withIncludeDefinedData(self, b: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withIncludeInstructions(self, b: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withIncludeUndefinedData(self, b: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withSearchFormat(self, format: ghidra.features.base.memsearch.format.SearchFormat) -> ghidra.features.base.memsearch.gui.SearchSettings:
        """
        Creates a copy of this settings object, but using the given search format.
        @param format the new search format
        @return a new search settings that is the same as this settings except for the format
        """
        ...

    def withSelectedRegion(self, region: ghidra.features.base.memsearch.bytesource.SearchRegion, select: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withSelectedRegions(self, regions: java.util.Set) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withStringCharset(self, stringCharset: java.nio.charset.Charset) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def withUseEscapeSequence(self, b: bool) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    @property
    def alignment(self) -> int: ...

    @property
    def bigEndian(self) -> bool: ...

    @property
    def caseSensitive(self) -> bool: ...

    @property
    def decimalByteSize(self) -> int: ...

    @property
    def decimalUnsigned(self) -> bool: ...

    @property
    def searchFormat(self) -> ghidra.features.base.memsearch.format.SearchFormat: ...

    @property
    def selectedMemoryRegions(self) -> java.util.Set: ...

    @property
    def stringCharset(self) -> java.nio.charset.Charset: ...