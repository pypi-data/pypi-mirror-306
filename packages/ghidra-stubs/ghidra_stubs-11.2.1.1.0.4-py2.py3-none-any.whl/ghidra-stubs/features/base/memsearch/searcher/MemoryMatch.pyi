from typing import List
from typing import overload
import ghidra.features.base.memsearch.matcher
import ghidra.features.base.memsearch.searcher
import ghidra.program.model.address
import java.lang


class MemoryMatch(object, java.lang.Comparable):
    """
    A class that represents a memory search hit at an address. Matches can also be updated with
     new byte values (from a scan or refresh action). The original bytes that matched the original
     search are maintained in addition to the "refreshed" bytes.
    """





    @overload
    def __init__(self, address: ghidra.program.model.address.Address): ...

    @overload
    def __init__(self, address: ghidra.program.model.address.Address, bytes: List[int], matcher: ghidra.features.base.memsearch.matcher.ByteMatcher): ...



    @overload
    def compareTo(self, o: ghidra.features.base.memsearch.searcher.MemoryMatch) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def equals(self, obj: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getByteMatcher(self) -> ghidra.features.base.memsearch.matcher.ByteMatcher: ...

    def getBytes(self) -> List[int]: ...

    def getClass(self) -> java.lang.Class: ...

    def getLength(self) -> int: ...

    def getPreviousBytes(self) -> List[int]: ...

    def hashCode(self) -> int: ...

    def isChanged(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    def updateBytes(self, newBytes: List[int]) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def byteMatcher(self) -> ghidra.features.base.memsearch.matcher.ByteMatcher: ...

    @property
    def bytes(self) -> List[int]: ...

    @property
    def changed(self) -> bool: ...

    @property
    def length(self) -> int: ...

    @property
    def previousBytes(self) -> List[int]: ...