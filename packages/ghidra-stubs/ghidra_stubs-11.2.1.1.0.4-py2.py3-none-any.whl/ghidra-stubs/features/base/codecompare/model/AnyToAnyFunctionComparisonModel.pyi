from typing import List
from typing import overload
import ghidra.features.base.codecompare.model
import ghidra.program.model.listing
import ghidra.util.datastruct.Duo
import java.lang
import java.util


class AnyToAnyFunctionComparisonModel(ghidra.features.base.codecompare.model.AbstractFunctionComparisonModel):
    """
    Basic FunctionComparisonModel where a set of functions can be compared with each other
    """





    @overload
    def __init__(self, functions: List[ghidra.program.model.listing.Function]): ...

    @overload
    def __init__(self, functions: java.util.Collection): ...



    def addFunction(self, function: ghidra.program.model.listing.Function) -> None: ...

    def addFunctionComparisonModelListener(self, listener: ghidra.features.base.codecompare.model.FunctionComparisonModelListener) -> None: ...

    def addFunctions(self, additionalFunctions: java.util.Collection) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getActiveFunction(self, side: ghidra.util.datastruct.Duo.Side) -> ghidra.program.model.listing.Function: ...

    def getClass(self) -> java.lang.Class: ...

    def getFunctions(self, side: ghidra.util.datastruct.Duo.Side) -> List[ghidra.program.model.listing.Function]: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeFunction(self, function: ghidra.program.model.listing.Function) -> None: ...

    def removeFunctionComparisonModelListener(self, listener: ghidra.features.base.codecompare.model.FunctionComparisonModelListener) -> None: ...

    @overload
    def removeFunctions(self, program: ghidra.program.model.listing.Program) -> None: ...

    @overload
    def removeFunctions(self, functionsToRemove: java.util.Collection) -> None: ...

    def setActiveFunction(self, side: ghidra.util.datastruct.Duo.Side, function: ghidra.program.model.listing.Function) -> bool: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...