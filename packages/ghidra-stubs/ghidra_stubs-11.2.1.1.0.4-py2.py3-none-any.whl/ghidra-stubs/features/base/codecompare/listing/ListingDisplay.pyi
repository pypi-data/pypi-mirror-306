from typing import overload
import docking.widgets.fieldpanel.support
import ghidra.app.plugin.core.codebrowser.hover
import ghidra.app.util
import ghidra.app.util.viewer.format
import ghidra.app.util.viewer.listingpanel
import ghidra.features.base.codecompare.listing
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.program.util
import java.lang


class ListingDisplay(object, ghidra.features.base.codecompare.listing.ListingDiffChangeListener):
    """
    Represents one side of a dual listing compare window. It holds the listing panel and
     related state information for one side.
    """





    def __init__(self, tool: ghidra.framework.plugintool.PluginTool, owner: unicode, listingDiff: ghidra.program.util.ListingDiff, comparsionOptions: ghidra.features.base.codecompare.listing.ListingCodeComparisonOptions, side: ghidra.util.datastruct.Duo.Side): ...



    def addHighlightProvider(self, highlightProvider: ghidra.app.util.ListingHighlightProvider) -> None: ...

    def addHoverService(self, service: ghidra.app.plugin.core.codebrowser.hover.ListingHoverService) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFormatManager(self) -> ghidra.app.util.viewer.format.FormatManager: ...

    def getListingPanel(self) -> ghidra.app.util.viewer.listingpanel.ListingPanel: ...

    def getProgramLocation(self) -> ghidra.program.util.ProgramLocation: ...

    def getViewerPosition(self) -> docking.widgets.fieldpanel.support.ViewerPosition: ...

    def goTo(self, location: ghidra.program.util.ProgramLocation) -> None: ...

    def hashCode(self) -> int: ...

    def isHeaderShowing(self) -> bool: ...

    def listingDiffChanged(self) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeHighlightProvider(self, highlightProvider: ghidra.app.util.ListingHighlightProvider) -> None: ...

    def repaint(self) -> None: ...

    def setDiffHighlightProvider(self, newDiffHighlights: ghidra.features.base.codecompare.listing.ListingDiffHighlightProvider) -> None: ...

    def setHoverMode(self, enabled: bool) -> None: ...

    def setMouseNavigationEnabled(self, enabled: bool) -> None: ...

    def setProgramView(self, program: ghidra.program.model.listing.Program, view: ghidra.program.model.address.AddressSetView, name: unicode) -> None: ...

    def setView(self, view: ghidra.program.model.address.AddressSetView) -> None: ...

    def setViewerPosition(self, position: docking.widgets.fieldpanel.support.ViewerPosition) -> None: ...

    def showHeader(self, show: bool) -> None: ...

    def toString(self) -> unicode: ...

    def updateCursorMarkers(self, location: ghidra.program.util.ProgramLocation) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def diffHighlightProvider(self) -> None: ...  # No getter available.

    @diffHighlightProvider.setter
    def diffHighlightProvider(self, value: ghidra.features.base.codecompare.listing.ListingDiffHighlightProvider) -> None: ...

    @property
    def formatManager(self) -> ghidra.app.util.viewer.format.FormatManager: ...

    @property
    def headerShowing(self) -> bool: ...

    @property
    def hoverMode(self) -> None: ...  # No getter available.

    @hoverMode.setter
    def hoverMode(self, value: bool) -> None: ...

    @property
    def listingPanel(self) -> ghidra.app.util.viewer.listingpanel.ListingPanel: ...

    @property
    def mouseNavigationEnabled(self) -> None: ...  # No getter available.

    @mouseNavigationEnabled.setter
    def mouseNavigationEnabled(self, value: bool) -> None: ...

    @property
    def programLocation(self) -> ghidra.program.util.ProgramLocation: ...

    @property
    def view(self) -> None: ...  # No getter available.

    @view.setter
    def view(self, value: ghidra.program.model.address.AddressSetView) -> None: ...

    @property
    def viewerPosition(self) -> docking.widgets.fieldpanel.support.ViewerPosition: ...

    @viewerPosition.setter
    def viewerPosition(self, value: docking.widgets.fieldpanel.support.ViewerPosition) -> None: ...