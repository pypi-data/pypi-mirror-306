from typing import overload
import ghidra.pcode.exec
import ghidra.pcode.exec.PcodeExecutorStatePiece
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.mem
import ghidra.program.model.pcode
import java.lang
import java.util


class AbstractLongOffsetPcodeExecutorStatePiece(object, ghidra.pcode.exec.PcodeExecutorStatePiece):
    """
    An abstract executor state piece which internally uses  to address contents
 
 
     This also provides an internal mechanism for breaking the piece down into the spaces defined by a
     language. It also provides for the special treatment of the  space.
    """






    class AbstractSpaceMap(object):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        @overload
        def fork(self) -> ghidra.pcode.exec.AbstractLongOffsetPcodeExecutorStatePiece.AbstractSpaceMap: ...

        @overload
        def fork(self, __a0: java.util.Map) -> java.util.Map: ...

        @overload
        def fork(self, __a0: object) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def values(self) -> java.util.Collection: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SimpleSpaceMap(ghidra.pcode.exec.AbstractLongOffsetPcodeExecutorStatePiece.AbstractSpaceMap):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        @overload
        def fork(self) -> ghidra.pcode.exec.AbstractLongOffsetPcodeExecutorStatePiece.AbstractSpaceMap: ...

        @overload
        def fork(self, __a0: java.util.Map) -> java.util.Map: ...

        @overload
        def fork(self, __a0: object) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def values(self) -> java.util.Collection: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CacheingSpaceMap(ghidra.pcode.exec.AbstractLongOffsetPcodeExecutorStatePiece.AbstractSpaceMap):




        def __init__(self): ...



        def equals(self, __a0: object) -> bool: ...

        @overload
        def fork(self) -> ghidra.pcode.exec.AbstractLongOffsetPcodeExecutorStatePiece.AbstractSpaceMap: ...

        @overload
        def fork(self, __a0: java.util.Map) -> java.util.Map: ...

        @overload
        def fork(self, __a0: object) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def getForSpace(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool) -> object: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def values(self) -> java.util.Collection: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, language: ghidra.program.model.lang.Language, addressArithmetic: ghidra.pcode.exec.PcodeArithmetic, arithmetic: ghidra.pcode.exec.PcodeArithmetic):
        """
        Construct a state piece for the given language and arithmetic
        @param language the language (used for its memory model)
        @param arithmetic an arithmetic used to generate default values of {@code T}
        """
        ...



    def checkRange(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int) -> None: ...

    def clear(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fork(self) -> ghidra.pcode.exec.PcodeExecutorStatePiece: ...

    def getAddressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getClass(self) -> java.lang.Class: ...

    def getConcreteBuffer(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> ghidra.program.model.mem.MemBuffer: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getRegisterValues(self) -> java.util.Map: ...

    @overload
    def getVar(self, __a0: ghidra.program.model.lang.Register, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

    @overload
    def getVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

    @overload
    def getVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

    @overload
    def getVar(self, space: ghidra.program.model.address.AddressSpace, offset: long, size: int, quantize: bool, reason: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

    @overload
    def getVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: ghidra.pcode.exec.PcodeExecutorStatePiece.Reason) -> object: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def quantizeOffset(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long) -> long: ...

    @overload
    def setVar(self, __a0: ghidra.program.model.lang.Register, __a1: object) -> None: ...

    @overload
    def setVar(self, __a0: ghidra.program.model.pcode.Varnode, __a1: object) -> None: ...

    @overload
    def setVar(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: bool, __a3: object) -> None: ...

    @overload
    def setVar(self, space: ghidra.program.model.address.AddressSpace, offset: long, size: int, quantize: bool, val: object) -> None: ...

    @overload
    def setVar(self, __a0: ghidra.program.model.address.AddressSpace, __a1: object, __a2: int, __a3: bool, __a4: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def addressArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    @property
    def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def registerValues(self) -> java.util.Map: ...