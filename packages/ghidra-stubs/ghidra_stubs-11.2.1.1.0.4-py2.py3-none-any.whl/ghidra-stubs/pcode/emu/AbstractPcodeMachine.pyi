from typing import overload
import ghidra.app.plugin.processors.sleigh
import ghidra.pcode.emu
import ghidra.pcode.emu.PcodeMachine
import ghidra.pcode.exec
import ghidra.program.model.address
import java.lang
import java.util


class AbstractPcodeMachine(object, ghidra.pcode.emu.PcodeMachine):
    """
    An abstract implementation of PcodeMachine suitable as a base for most implementations
 
 
     A note regarding terminology: A p-code "machine" refers to any p-code-based machine simulator,
     whether or not it operates on abstract or concrete values. The term "emulator" is reserved for
     machines whose values always include a concrete piece. That piece doesn't necessarily have to be
     a (derivative of) BytesPcodeExecutorStatePiece, but it usually is. To be called an
     "emulator" implies that PcodeArithmetic#toConcrete(Object, Purpose) never throws
     ConcretionError for any value in its state.
 
 
     For a complete example of a p-code emulator, see PcodeEmulator. For an alternative
     implementation incorporating an abstract piece, see the Taint Analyzer.
    """





    def __init__(self, language: ghidra.program.model.lang.Language):
        """
        Construct a p-code machine with the given language and arithmetic
        @param language the processor language to be emulated
        """
        ...



    def addAccessBreakpoint(self, range: ghidra.program.model.address.AddressRange, kind: ghidra.pcode.emu.PcodeMachine.AccessKind) -> None: ...

    def addBreakpoint(self, address: ghidra.program.model.address.Address, sleighCondition: unicode) -> None: ...

    def clearAccessBreakpoints(self) -> None: ...

    def clearAllInjects(self) -> None: ...

    def clearInject(self, address: ghidra.program.model.address.Address) -> None: ...

    def compileSleigh(self, sourceName: unicode, source: unicode) -> ghidra.pcode.exec.PcodeProgram: ...

    def equals(self, __a0: object) -> bool: ...

    def getAllThreads(self) -> java.util.Collection: ...

    def getArithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.app.plugin.processors.sleigh.SleighLanguage: ...

    def getSharedState(self) -> ghidra.pcode.exec.PcodeExecutorState: ...

    def getSoftwareInterruptMode(self) -> ghidra.pcode.emu.PcodeMachine.SwiMode: ...

    def getStubUseropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def getThread(self, name: unicode, createIfAbsent: bool) -> ghidra.pcode.emu.PcodeThread: ...

    def getUseropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    def hashCode(self) -> int: ...

    def inject(self, address: ghidra.program.model.address.Address, source: unicode) -> None: ...

    def isSuspended(self) -> bool: ...

    @overload
    def newThread(self) -> ghidra.pcode.emu.PcodeThread: ...

    @overload
    def newThread(self, name: unicode) -> ghidra.pcode.emu.PcodeThread: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setSoftwareInterruptMode(self, mode: ghidra.pcode.emu.PcodeMachine.SwiMode) -> None: ...

    def setSuspended(self, suspended: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def allThreads(self) -> java.util.Collection: ...

    @property
    def arithmetic(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    @property
    def language(self) -> ghidra.app.plugin.processors.sleigh.SleighLanguage: ...

    @property
    def sharedState(self) -> ghidra.pcode.exec.PcodeExecutorState: ...

    @property
    def softwareInterruptMode(self) -> ghidra.pcode.emu.PcodeMachine.SwiMode: ...

    @softwareInterruptMode.setter
    def softwareInterruptMode(self, value: ghidra.pcode.emu.PcodeMachine.SwiMode) -> None: ...

    @property
    def stubUseropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...

    @property
    def suspended(self) -> bool: ...

    @suspended.setter
    def suspended(self, value: bool) -> None: ...

    @property
    def useropLibrary(self) -> ghidra.pcode.exec.PcodeUseropLibrary: ...