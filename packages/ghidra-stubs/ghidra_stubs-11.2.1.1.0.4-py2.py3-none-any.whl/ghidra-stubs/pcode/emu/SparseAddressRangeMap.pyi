from typing import overload
import ghidra.program.model.address
import java.lang
import java.util
import java.util.function


class SparseAddressRangeMap(object):
    OFF_MASK: long = 0xfffL
    PAGE_BITS: long = 0xcL
    PAGE_MASK: long = -0x1000L



    def __init__(self): ...



    def clear(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hasEntry(self, address: ghidra.program.model.address.Address, predicate: java.util.function.Predicate) -> bool: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def put(self, __a0: ghidra.program.model.address.AddressRange, __a1: object) -> java.util.Map.Entry: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...