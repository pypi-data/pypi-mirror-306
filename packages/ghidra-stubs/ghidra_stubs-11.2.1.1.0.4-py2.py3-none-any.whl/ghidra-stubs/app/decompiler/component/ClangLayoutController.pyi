from typing import Iterator
from typing import List
from typing import overload
import docking.widgets.fieldpanel
import docking.widgets.fieldpanel.field
import docking.widgets.fieldpanel.listener
import docking.widgets.fieldpanel.support
import ghidra.app.decompiler
import ghidra.program.model.listing
import ghidra.program.model.pcode
import java.awt
import java.lang
import java.util
import java.util.function


class ClangLayoutController(object, docking.widgets.fieldpanel.LayoutModel, docking.widgets.fieldpanel.listener.LayoutModelListener):
    """
    Control the GUI layout for displaying tokenized C code
    """





    def __init__(self, opt: ghidra.app.decompiler.DecompileOptions, decompilerPanel: ghidra.app.decompiler.component.DecompilerPanel, met: java.awt.FontMetrics, hlFactory: docking.widgets.fieldpanel.support.FieldHighlightFactory): ...

    def __iter__(self): ...

    def addLayoutModelListener(self, listener: docking.widgets.fieldpanel.listener.LayoutModelListener) -> None: ...

    def buildLayouts(self, function: ghidra.program.model.listing.Function, doc: ghidra.app.decompiler.ClangTokenGroup, errmsg: unicode, display: bool) -> None: ...

    def dataChanged(self, start: long, end: long) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushChanges(self) -> None: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getHighFunction(self, i: int) -> ghidra.program.model.pcode.HighFunction: ...

    def getIndexAfter(self, index: long) -> long: ...

    @overload
    def getIndexBefore(self, index: int) -> int: ...

    @overload
    def getIndexBefore(self, index: long) -> long: ...

    def getLayout(self, index: long) -> docking.widgets.fieldpanel.Layout: ...

    def getLines(self) -> List[ghidra.app.decompiler.ClangLine]: ...

    def getNumIndexes(self) -> long: ...

    def getPreferredViewSize(self) -> java.awt.Dimension: ...

    def getRoot(self) -> ghidra.app.decompiler.ClangTokenGroup: ...

    def hashCode(self) -> int: ...

    def isUniform(self) -> bool: ...

    @overload
    def iterator(self) -> java.util.Iterator: ...

    @overload
    def iterator(self, __a0: long) -> docking.widgets.fieldpanel.LayoutModelIterator: ...

    def layoutChanged(self) -> None: ...

    def locationChanged(self, loc: docking.widgets.fieldpanel.support.FieldLocation, field: docking.widgets.fieldpanel.field.Field, locationColor: java.awt.Color, parenColor: java.awt.Color) -> None: ...

    def modelChanged(self) -> None: ...

    def modelSizeChanged(self, mapper: docking.widgets.fieldpanel.listener.IndexMapper) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeLayoutModelListener(self, listener: docking.widgets.fieldpanel.listener.LayoutModelListener) -> None: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def lines(self) -> List[object]: ...

    @property
    def numIndexes(self) -> long: ...

    @property
    def preferredViewSize(self) -> java.awt.Dimension: ...

    @property
    def root(self) -> ghidra.app.decompiler.ClangTokenGroup: ...

    @property
    def uniform(self) -> bool: ...