from typing import overload
import ghidra.app.util.pcode
import ghidra.program.model.address
import ghidra.program.model.lang
import java.lang


class AbstractAppender(object, ghidra.app.util.pcode.Appender):
    """
    A base implementation of Appender suitable for most cases.
    """





    def __init__(self, language: ghidra.program.model.lang.Language, indent: bool):
        """
        Create a new appender.
        @param language the language of the p-code ops to format
        @param indent whether or not to indent
        """
        ...



    def appendAddressWordOffcut(self, wordOffset: long, offcut: long) -> None: ...

    def appendCharacter(self, c: int) -> None: ...

    def appendIndent(self) -> None: ...

    def appendLabel(self, label: unicode) -> None: ...

    def appendLineLabel(self, __a0: long) -> None: ...

    def appendLineLabelRef(self, label: long) -> None: ...

    def appendMnemonic(self, opcode: int) -> None: ...

    def appendRawVarnode(self, space: ghidra.program.model.address.AddressSpace, offset: long, size: long) -> None: ...

    def appendRegister(self, register: ghidra.program.model.lang.Register) -> None: ...

    def appendScalar(self, value: long) -> None: ...

    def appendSpace(self, space: ghidra.program.model.address.AddressSpace) -> None: ...

    def appendUnique(self, offset: long) -> None: ...

    def appendUserop(self, id: int) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def finish(self) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...