from typing import overload
import ghidra.app.util.viewer.field
import ghidra.framework.options
import java.lang


class EolExtraCommentsOption(object, ghidra.framework.options.CustomOption):
    """
    An option class that is used by the EolExtraCommentsPropertyEditor to load and save 
     option settings.
    """

    CUSTOM_OPTION_CLASS_NAME_KEY: unicode = u'CUSTOM_OPTION_CLASS'



    def __init__(self): ...



    def alwaysShowAutoComments(self) -> bool: ...

    def equals(self, obj: object) -> bool: ...

    def getAutoData(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    def getAutoFunction(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    def getClass(self) -> java.lang.Class: ...

    def getRefRepeatable(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    def getRepeatable(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    def hashCode(self) -> int: ...

    def isShowingAutoComments(self, hasOtherComments: bool) -> bool: ...

    def isShowingRefRepeatables(self, hasOtherComments: bool) -> bool: ...

    def isShowingRepeatables(self, hasOtherComments: bool) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readState(self, properties: ghidra.framework.options.GProperties) -> None: ...

    def setAutoData(self, priority: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    def setAutoFunction(self, priority: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    def setRefRepeatable(self, priority: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    def setRepeatable(self, priority: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    def setUseAbbreviatedComments(self, b: bool) -> None: ...

    def toString(self) -> unicode: ...

    def useAbbreviatedComments(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeState(self, properties: ghidra.framework.options.GProperties) -> None: ...

    @property
    def autoData(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    @autoData.setter
    def autoData(self, value: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    @property
    def autoFunction(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    @autoFunction.setter
    def autoFunction(self, value: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    @property
    def refRepeatable(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    @refRepeatable.setter
    def refRepeatable(self, value: ghidra.app.util.viewer.field.EolEnablement) -> None: ...

    @property
    def repeatable(self) -> ghidra.app.util.viewer.field.EolEnablement: ...

    @repeatable.setter
    def repeatable(self, value: ghidra.app.util.viewer.field.EolEnablement) -> None: ...