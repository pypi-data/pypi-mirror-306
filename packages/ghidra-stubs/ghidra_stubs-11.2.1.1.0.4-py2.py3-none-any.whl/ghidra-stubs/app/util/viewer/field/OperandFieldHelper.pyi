from typing import List
from typing import overload
import docking.widgets.fieldpanel.support
import ghidra.app.util
import ghidra.app.util.viewer.field
import ghidra.app.util.viewer.format
import ghidra.app.util.viewer.proxy
import ghidra.framework.options
import ghidra.program.util
import java.awt
import java.lang
import java.util


class OperandFieldHelper(ghidra.app.util.viewer.field.FieldFactory):
    """
    Helper class to store the options of the
     OperandFieldFactory and SubDataFieldFactory
    """






    class UNDERLINE_CHOICE(java.lang.Enum):
        All: ghidra.app.util.viewer.field.OperandFieldHelper.UNDERLINE_CHOICE
        Hidden: ghidra.app.util.viewer.field.OperandFieldHelper.UNDERLINE_CHOICE
        None: ghidra.app.util.viewer.field.OperandFieldHelper.UNDERLINE_CHOICE







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.util.viewer.field.OperandFieldHelper.UNDERLINE_CHOICE: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.util.viewer.field.OperandFieldHelper.UNDERLINE_CHOICE]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, name: unicode):
        """
        Constructor - for use by the field format
        @param name the name of the field
        """
        ...



    def acceptsType(self, category: int, proxyObjectClass: java.lang.Class) -> bool:
        """
        Used to specify which format models this field can belong to.
        @param category the category for this field
        @param proxyObjectClass the type of proxy object used by this field
        @return true if this class accepts the given category.
        """
        ...

    def displayOptionsChanged(self, options: ghidra.framework.options.Options, optionName: unicode, oldValue: object, newValue: object) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fieldOptionsChanged(self, options: ghidra.framework.options.Options, optionName: unicode, oldValue: object, newValue: object) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getField(self, obj: ghidra.app.util.viewer.proxy.ProxyObj, varWidth: int) -> ghidra.app.util.viewer.field.ListingField:
        """
        Generates a Field based on the given information.
        @param obj The object that the generated field will report some information about.
        @param varWidth the additional distance along the x axis to place the generated field.
        @return the newly generated FactoryField that shows some property or information about
         the given object.
        """
        ...

    def getFieldLocation(self, bf: ghidra.app.util.viewer.field.ListingField, index: long, fieldNum: int, loc: ghidra.program.util.ProgramLocation) -> docking.widgets.fieldpanel.support.FieldLocation:
        """
        Return a FieldLocation that corresponds to the given index, fieldNum, and ProgramLocation
         IF and ONLY IF the given programLocation is the type generated by this class's
         {@link #getFieldLocation(ListingField, BigInteger, int, ProgramLocation)}.  Each
         FieldFactory should generate and process a unique ProgramLocation class.
        @param bf the ListingField at the current cursor.
        @param index the line index (corresponds to an address)
        @param fieldNum the index of field within the layout to try and get a FieldLocation.
        @param loc the ProgramLocation to be converted into a FieldLocation.
        @return the location.
        """
        ...

    def getFieldModel(self) -> ghidra.app.util.viewer.format.FieldFormatModel:
        """
        Returns the FieldModel that this factory belongs to.
        @return the model.
        """
        ...

    def getFieldName(self) -> unicode:
        """
        Returns the Field name.
        @return the name.
        """
        ...

    def getFieldText(self) -> unicode:
        """
        Returns a description of the fields generated by this factory.
        @return the text.
        """
        ...

    def getMetrics(self) -> java.awt.FontMetrics:
        """
        Returns the font metrics used by this field factory
        @return the metrics.
        """
        ...

    def getProgramLocation(self, row: int, col: int, lf: ghidra.app.util.viewer.field.ListingField) -> ghidra.program.util.ProgramLocation: ...

    def getStartX(self) -> int:
        """
        Returns the starting x position for the fields generated by this factory.
        @return the start x.
        """
        ...

    def getWidth(self) -> int:
        """
        Returns the width of the fields generated by this factory.
        @return the width.
        """
        ...

    def hashCode(self) -> int: ...

    def isEnabled(self) -> bool:
        """
        Returns true if this FieldFactory is currently enabled to generate Fields.
        @return true if enabled.
        """
        ...

    def newInstance(self, formatModel: ghidra.app.util.viewer.format.FieldFormatModel, highlightProvider: ghidra.app.util.ListingHighlightProvider, options: ghidra.framework.options.ToolOptions, fieldOptions: ghidra.framework.options.ToolOptions) -> ghidra.app.util.viewer.field.FieldFactory:
        """
        Returns a new instance of this FieldFactory that can be used to generate fields
         instead of being used as a prototype.
        @param formatModel the model that the field belongs to.
        @param highlightProvider the HightLightProvider.
        @param options the Options for display properties.
        @param fieldOptions the Options for field specific properties.
        @return the factory
        """
        ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def servicesChanged(self) -> None:
        """
        Notification the services changed. Subclasses should override this method
         if they care about service changes.
        """
        ...

    def setEnabled(self, state: bool) -> None:
        """
        Turns on or off the generating of Fields by this FieldFactory.
        @param state if true, this factory will generate fields.
        """
        ...

    def setStartX(self, x: int) -> None:
        """
        Sets the starting x position for the fields generated by this factory.
        @param x the x position.
        """
        ...

    def setWidth(self, w: int) -> None:
        """
        Sets the width of the fields generated by this factory.
        @param w the width.
        """
        ...

    def supportsLocation(self, listingField: ghidra.app.util.viewer.field.ListingField, location: ghidra.program.util.ProgramLocation) -> bool:
        """
        Returns true if this given field represents the given location
        @param listingField the field
        @param location the location
        @return true if this given field represents the given location
        """
        ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

