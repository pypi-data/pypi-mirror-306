from typing import List
from typing import overload
import ghidra.app.util.demangler
import ghidra.app.util.demangler.DemangledStructure
import ghidra.program.model.data
import java.lang


class DemangledStructure(ghidra.app.util.demangler.DemangledDataType):
    """
    A class to represent a demangled structure
    """






    class Field(java.lang.Record):




        def __init__(self, __a0: unicode, __a1: unicode, __a2: ghidra.app.util.demangler.DemangledDataType): ...



        def description(self) -> unicode: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def type(self) -> ghidra.app.util.demangler.DemangledDataType: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, mangled: unicode, originalDemangled: unicode, name: unicode, categoryPath: unicode, packed: bool):
        """
        Creates a new {@link DemangledStructure}
        @param mangled The mangled string
        @param originalDemangled The natively demangled string
        @param name The structure name
        @param categoryPath The structure category path
        @param packed True if the structure should be packed; otherwise, false
        """
        ...



    @overload
    def addField(self, name: unicode, type: ghidra.app.util.demangler.DemangledDataType) -> None:
        """
        Adds a new field to the structure. The field will not have a description.
        @param name The field name
        @param type The field {@link DemangledDataType type}
        """
        ...

    @overload
    def addField(self, name: unicode, description: unicode, type: ghidra.app.util.demangler.DemangledDataType) -> None:
        """
        Adds a new field to the structure
        @param name The field name
        @param description The field description
        @param type The field {@link DemangledDataType type}
        """
        ...

    def equals(self, __a0: object) -> bool: ...

    def getArrayDimensions(self) -> int: ...

    def getBasedName(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataType(self, dataTypeManager: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.DataType: ...

    def getDemangledName(self) -> unicode: ...

    def getFields(self) -> List[ghidra.app.util.demangler.DemangledStructure.Field]:
        """
        Gets the {@link List} of {@link Field}s
        @return The {@link List} of {@link Field}s
        """
        ...

    def getMangledString(self) -> unicode: ...

    def getMemberScope(self) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNamespace(self) -> ghidra.app.util.demangler.Demangled: ...

    def getNamespaceName(self) -> unicode: ...

    def getNamespaceString(self) -> unicode: ...

    def getOriginalDemangled(self) -> unicode: ...

    def getPointerLevels(self) -> int: ...

    def getSignature(self) -> unicode: ...

    def getTemplate(self) -> ghidra.app.util.demangler.DemangledTemplate: ...

    def hashCode(self) -> int: ...

    def incrementPointerLevels(self) -> None: ...

    def isArray(self) -> bool: ...

    def isClass(self) -> bool: ...

    def isCoclass(self) -> bool: ...

    def isCointerface(self) -> bool: ...

    def isComplex(self) -> bool: ...

    def isConst(self) -> bool: ...

    def isEnum(self) -> bool: ...

    def isLValueReference(self) -> bool: ...

    def isPointer(self) -> bool: ...

    def isPointer64(self) -> bool: ...

    def isPrimitive(self) -> bool: ...

    def isRValueReference(self) -> bool: ...

    def isReference(self) -> bool: ...

    def isRestrict(self) -> bool: ...

    def isSigned(self) -> bool: ...

    def isStruct(self) -> bool: ...

    def isTemplate(self) -> bool: ...

    def isUnaligned(self) -> bool: ...

    def isUnion(self) -> bool: ...

    def isUnsigned(self) -> bool: ...

    def isVarArgs(self) -> bool: ...

    def isVoid(self) -> bool: ...

    def isVolatile(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setArray(self, dimensions: int) -> None: ...

    def setBasedName(self, basedName: unicode) -> None: ...

    def setClass(self) -> None: ...

    def setCoclass(self) -> None: ...

    def setCointerface(self) -> None: ...

    def setComplex(self) -> None: ...

    def setConst(self) -> None: ...

    def setEnum(self) -> None: ...

    @overload
    def setEnumType(self) -> unicode: ...

    @overload
    def setEnumType(self, enumType: unicode) -> None: ...

    def setLValueReference(self) -> None: ...

    def setMemberScope(self, memberScope: unicode) -> None: ...

    def setName(self, name: unicode) -> None: ...

    def setNamespace(self, namespace: ghidra.app.util.demangler.Demangled) -> None: ...

    def setPointer64(self) -> None: ...

    def setRValueReference(self) -> None:
        """
        rvalue reference; C++11
        """
        ...

    def setReference(self) -> None: ...

    def setRestrict(self) -> None: ...

    def setSigned(self) -> None: ...

    def setStruct(self) -> None: ...

    @overload
    def setTemplate(self) -> None: ...

    @overload
    def setTemplate(self, template: ghidra.app.util.demangler.DemangledTemplate) -> None: ...

    def setUnaligned(self) -> None: ...

    def setUnion(self) -> None: ...

    def setUnsigned(self) -> None: ...

    def setVarArgs(self) -> None: ...

    def setVolatile(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def fields(self) -> List[object]: ...