from typing import overload
import java.lang
import org.apache.commons.lang3.mutable


class Counter(org.apache.commons.lang3.mutable.MutableInt):
    """
    Simple class used to avoid immutable objects and autoboxing when storing changing integer 
     primitives in a collection.
    """





    @overload
    def __init__(self):
        """
        Construct a new counter with an initial value of 0.
        """
        ...

    @overload
    def __init__(self, value: int):
        """
        Construct a new Counter with the given initial value.
        @param value the initial value
        """
        ...



    @overload
    def add(self, __a0: int) -> None: ...

    @overload
    def add(self, __a0: java.lang.Number) -> None: ...

    @overload
    def addAndGet(self, __a0: int) -> int: ...

    @overload
    def addAndGet(self, __a0: java.lang.Number) -> int: ...

    def byteValue(self) -> int: ...

    @overload
    def compareTo(self, __a0: org.apache.commons.lang3.mutable.MutableInt) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def count(self) -> int:
        """
        Returns the value of this counter.
        @return the value of this counter
        """
        ...

    def decrement(self) -> None: ...

    def decrementAndGet(self) -> int: ...

    def doubleValue(self) -> float: ...

    def equals(self, __a0: object) -> bool: ...

    def floatValue(self) -> float: ...

    @overload
    def getAndAdd(self, __a0: int) -> int: ...

    @overload
    def getAndAdd(self, __a0: java.lang.Number) -> int: ...

    def getAndDecrement(self) -> int: ...

    def getAndIncrement(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getValue(self) -> object: ...

    def hashCode(self) -> int: ...

    def increment(self) -> None: ...

    def incrementAndGet(self) -> int: ...

    def intValue(self) -> int: ...

    def longValue(self) -> long: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def setValue(self, __a0: int) -> None: ...

    @overload
    def setValue(self, __a0: java.lang.Number) -> None: ...

    @overload
    def setValue(self, __a0: object) -> None: ...

    def shortValue(self) -> int: ...

    @overload
    def subtract(self, __a0: int) -> None: ...

    @overload
    def subtract(self, __a0: java.lang.Number) -> None: ...

    def toInteger(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

