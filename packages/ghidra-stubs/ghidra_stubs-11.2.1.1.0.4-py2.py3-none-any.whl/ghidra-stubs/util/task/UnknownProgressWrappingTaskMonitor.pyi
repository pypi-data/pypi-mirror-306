from typing import overload
import ghidra.util.task
import java.lang


class UnknownProgressWrappingTaskMonitor(ghidra.util.task.WrappingTaskMonitor):
    """
    A class that is meant to wrap a TaskMonitor when you do not know the maximum value
     of the progress.
    """





    @overload
    def __init__(self, delegate: ghidra.util.task.TaskMonitor): ...

    @overload
    def __init__(self, delegate: ghidra.util.task.TaskMonitor, startMaximum: long): ...



    def addCancelledListener(self, listener: ghidra.util.task.CancelledListener) -> None: ...

    def cancel(self) -> None: ...

    def checkCanceled(self) -> None: ...

    def checkCancelled(self) -> None: ...

    def clearCanceled(self) -> None: ...

    def clearCancelled(self) -> None: ...

    @staticmethod
    def dummyIfNull(__a0: ghidra.util.task.TaskMonitor) -> ghidra.util.task.TaskMonitor: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getMaximum(self) -> long: ...

    def getMessage(self) -> unicode: ...

    def getProgress(self) -> long: ...

    def hashCode(self) -> int: ...

    @overload
    def increment(self) -> None: ...

    @overload
    def increment(self, __a0: long) -> None: ...

    @overload
    def incrementProgress(self) -> None: ...

    @overload
    def incrementProgress(self, incrementAmount: long) -> None: ...

    @overload
    def initialize(self, max: long) -> None: ...

    @overload
    def initialize(self, __a0: long, __a1: unicode) -> None: ...

    def isCancelEnabled(self) -> bool: ...

    def isCancelled(self) -> bool: ...

    def isIndeterminate(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeCancelledListener(self, listener: ghidra.util.task.CancelledListener) -> None: ...

    def setCancelEnabled(self, enable: bool) -> None: ...

    def setDelegate(self, newDelegate: ghidra.util.task.TaskMonitor) -> None:
        """
        Sets the delegate of this wrapper to be the new value.  The new delegate will be 
         initialized with the current values of the existing delegate.
        @param newDelegate the new delegate
        """
        ...

    def setIndeterminate(self, indeterminate: bool) -> None: ...

    def setMaximum(self, max: long) -> None: ...

    def setMessage(self, message: unicode) -> None: ...

    def setProgress(self, value: long) -> None: ...

    def setShowProgressValue(self, showProgressValue: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def progress(self) -> long: ...

    @progress.setter
    def progress(self, value: long) -> None: ...