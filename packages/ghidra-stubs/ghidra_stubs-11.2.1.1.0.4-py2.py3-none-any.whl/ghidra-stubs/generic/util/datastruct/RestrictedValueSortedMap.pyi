from typing import Iterator
from typing import List
from typing import overload
import ghidra.generic.util.datastruct
import ghidra.generic.util.datastruct.ValueSortedMap
import java.lang
import java.util
import java.util.function


class RestrictedValueSortedMap(object, ghidra.generic.util.datastruct.ValueSortedMap):
    """
    A view of the value-sorted map for implementing
     #subMapByValue(Object, boolean, Object, boolean), etc.
    """






    class RestrictedValueSortedMapEntryList(object, ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapEntryList):




        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        def __iter__(self): ...

        def contains(self, __a0: object) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def poll(self) -> object: ...

        def remove(self, __a0: object) -> bool: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def toList(self) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...




    class RestrictedValueSortedMapKeyList(object, ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapKeyList):




        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        def __iter__(self): ...

        def contains(self, __a0: object) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def poll(self) -> object: ...

        def remove(self, __a0: object) -> bool: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def toList(self) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...




    class RestrictedValueListIterator(object, java.util.ListIterator):




        @overload
        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        @overload
        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap, __a1: int): ...

        def __iter__(self) -> Iterator[object]: ...

        def add(self, __a0: object) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hasNext(self) -> bool: ...

        def hasPrevious(self) -> bool: ...

        def hashCode(self) -> int: ...

        def next(self) -> object: ...

        def nextIndex(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def previous(self) -> object: ...

        def previousIndex(self) -> int: ...

        def remove(self) -> None: ...

        def set(self, __a0: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RestrictedEntryListIterator(object, java.util.ListIterator):




        @overload
        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        @overload
        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap, __a1: int): ...

        def __iter__(self) -> Iterator[object]: ...

        @overload
        def add(self, __a0: java.util.Map.Entry) -> None: ...

        @overload
        def add(self, __a0: object) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hasNext(self) -> bool: ...

        def hasPrevious(self) -> bool: ...

        def hashCode(self) -> int: ...

        def next(self) -> object: ...

        def nextIndex(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def previous(self) -> object: ...

        def previousIndex(self) -> int: ...

        def remove(self) -> None: ...

        @overload
        def set(self, __a0: java.util.Map.Entry) -> None: ...

        @overload
        def set(self, __a0: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RestrictedKeyListIterator(object, java.util.ListIterator):




        @overload
        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        @overload
        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap, __a1: int): ...

        def __iter__(self) -> Iterator[object]: ...

        def add(self, __a0: object) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def forEachRemaining(self, __a0: java.util.function.Consumer) -> None: ...

        def getClass(self) -> java.lang.Class: ...

        def hasNext(self) -> bool: ...

        def hasPrevious(self) -> bool: ...

        def hashCode(self) -> int: ...

        def next(self) -> object: ...

        def nextIndex(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def previous(self) -> object: ...

        def previousIndex(self) -> int: ...

        def remove(self) -> None: ...

        def set(self, __a0: object) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RestrictedSortedList(object, ghidra.generic.util.datastruct.SortedList):




        def __init__(self, __a0: ghidra.generic.util.datastruct.RestrictedValueSortedMap): ...

        def __iter__(self): ...

        def ceilingIndex(self, __a0: object) -> int: ...

        def contains(self, __a0: object) -> bool: ...

        def equals(self, __a0: object) -> bool: ...

        def floorIndex(self, __a0: object) -> int: ...

        def forEach(self, __a0: java.util.function.Consumer) -> None: ...

        def get(self, __a0: int) -> object: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def higherIndex(self, __a0: object) -> int: ...

        def indexOf(self, __a0: object) -> int: ...

        def isEmpty(self) -> bool: ...

        def iterator(self) -> java.util.Iterator: ...

        def listIterator(self, __a0: int) -> java.util.ListIterator: ...

        def lowerIndex(self, __a0: object) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def poll(self) -> object: ...

        def remove(self, __a0: object) -> bool: ...

        def removeAll(self, __a0: java.util.Collection) -> bool: ...

        def size(self) -> int: ...

        def spliterator(self) -> java.util.Spliterator: ...

        def toList(self) -> List[object]: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def empty(self) -> bool: ...





    def ceilingEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def clear(self) -> None: ...

    def containsKey(self, key: object) -> bool: ...

    def containsValue(self, value: object) -> bool: ...

    def entrySet(self) -> ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapEntryList: ...

    def equals(self, __a0: object) -> bool: ...

    def floorEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def get(self, key: object) -> V: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def headMapByValue(self, __a0: object, __a1: bool) -> ghidra.generic.util.datastruct.ValueSortedMap: ...

    def higherEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def isEmpty(self) -> bool: ...

    def keySet(self) -> ghidra.generic.util.datastruct.ValueSortedMap.ValueSortedMapKeyList: ...

    def lowerEntryByValue(self, __a0: object) -> java.util.Map.Entry: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def put(self, __a0: object, __a1: object) -> object: ...

    def remove(self, key: object) -> V: ...

    def size(self) -> int: ...

    def subMapByValue(self, __a0: object, __a1: bool, __a2: object, __a3: bool) -> ghidra.generic.util.datastruct.ValueSortedMap: ...

    def tailMapByValue(self, __a0: object, __a1: bool) -> ghidra.generic.util.datastruct.ValueSortedMap: ...

    def toString(self) -> unicode: ...

    def update(self, __a0: object) -> bool: ...

    def values(self) -> ghidra.generic.util.datastruct.SortedList: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...