from typing import overload
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.util
import ghidra.util.task
import java.lang


class ProgramArchitectureTranslator(ghidra.program.util.LanguageTranslatorAdapter):




    @overload
    def __init__(self, oldLanguage: ghidra.program.model.lang.Language, oldCompilerSpecId: ghidra.program.model.lang.CompilerSpecID, newLanguage: ghidra.program.model.lang.Language, newCompilerSpecId: ghidra.program.model.lang.CompilerSpecID): ...

    @overload
    def __init__(self, oldLanguageId: ghidra.program.model.lang.LanguageID, oldLanguageVersion: int, oldCompilerSpecId: ghidra.program.model.lang.CompilerSpecID, newLanguage: ghidra.program.model.lang.Language, newCompilerSpecId: ghidra.program.model.lang.CompilerSpecID): ...



    def equals(self, __a0: object) -> bool: ...

    def fixupInstructions(self, program: ghidra.program.model.listing.Program, oldLanguage: ghidra.program.model.lang.Language, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getDefaultLanguageTranslator(oldLanguage: ghidra.program.model.lang.Language, newLanguage: ghidra.program.model.lang.Language) -> ghidra.program.util.LanguageTranslator:
        """
        Return a validated default translator if one can be determined.
        @param oldLanguage
        @param newLanguage
        @return default translator or null if reasonable mappings can not be determined.
        """
        ...

    def getNewAddressSpace(self, oldSpaceName: unicode) -> ghidra.program.model.address.AddressSpace: ...

    def getNewCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getNewCompilerSpecID(self, oldCompilerSpecID: ghidra.program.model.lang.CompilerSpecID) -> ghidra.program.model.lang.CompilerSpecID: ...

    def getNewContextRegister(self) -> ghidra.program.model.lang.Register: ...

    def getNewLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getNewLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def getNewRegister(self, oldReg: ghidra.program.model.lang.Register) -> ghidra.program.model.lang.Register: ...

    def getNewRegisterValue(self, oldValue: ghidra.program.model.lang.RegisterValue) -> ghidra.program.model.lang.RegisterValue: ...

    def getNewVersion(self) -> int: ...

    @overload
    def getOldCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @overload
    def getOldCompilerSpec(self, oldCompilerSpecID: ghidra.program.model.lang.CompilerSpecID) -> ghidra.program.model.lang.CompilerSpec: ...

    def getOldContextRegister(self) -> ghidra.program.model.lang.Register: ...

    def getOldLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getOldLanguageID(self) -> ghidra.program.model.lang.LanguageID: ...

    def getOldRegister(self, oldAddr: ghidra.program.model.address.Address, size: int) -> ghidra.program.model.lang.Register: ...

    def getOldRegisterContaining(self, oldAddr: ghidra.program.model.address.Address) -> ghidra.program.model.lang.Register: ...

    def getOldVersion(self) -> int: ...

    def hashCode(self) -> int: ...

    def isValid(self) -> bool: ...

    def isValueTranslationRequired(self, oldReg: ghidra.program.model.lang.Register) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def newCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def oldCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...