from typing import List
from typing import overload
import ghidra.docking.settings
import ghidra.program.model.data
import ghidra.program.model.mem
import ghidra.util
import java.lang
import java.net
import java.util


class CompositeDataTypeImpl(ghidra.program.model.data.GenericDataType, ghidra.program.model.data.CompositeInternal):
    """
    Common implementation methods for structure and union
    """









    @overload
    def add(self, dataType: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def add(self, dataType: ghidra.program.model.data.DataType, length: int) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def add(self, dataType: ghidra.program.model.data.DataType, fieldName: unicode, comment: unicode) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def add(self, __a0: ghidra.program.model.data.DataType, __a1: int, __a2: unicode, __a3: unicode) -> ghidra.program.model.data.DataTypeComponent: ...

    def addBitField(self, __a0: ghidra.program.model.data.DataType, __a1: int, __a2: unicode, __a3: unicode) -> ghidra.program.model.data.DataTypeComponent: ...

    def addParent(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def align(self, __a0: int) -> None: ...

    def clone(self, __a0: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.DataType: ...

    def copy(self, __a0: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.DataType: ...

    def dataTypeAlignmentChanged(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeDeleted(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeNameChanged(self, dt: ghidra.program.model.data.DataType, oldName: unicode) -> None: ...

    def dataTypeReplaced(self, oldDt: ghidra.program.model.data.DataType, newDt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeSizeChanged(self, dt: ghidra.program.model.data.DataType) -> None: ...

    @overload
    def delete(self, __a0: int) -> None: ...

    @overload
    def delete(self, __a0: java.util.Set) -> None: ...

    def dependsOn(self, dt: ghidra.program.model.data.DataType) -> bool: ...

    def encodeRepresentation(self, repr: unicode, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> List[int]: ...

    def encodeValue(self, value: object, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> List[int]: ...

    def equals(self, obj: object) -> bool: ...

    def getAlignedLength(self) -> int: ...

    def getAlignment(self) -> int: ...

    @staticmethod
    def getAlignmentAndPackingString(__a0: ghidra.program.model.data.Composite) -> unicode: ...

    def getAlignmentType(self) -> ghidra.program.model.data.AlignmentType: ...

    def getCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    def getClass(self) -> java.lang.Class: ...

    def getComponent(self, __a0: int) -> ghidra.program.model.data.DataTypeComponent: ...

    def getComponents(self) -> List[ghidra.program.model.data.DataTypeComponent]: ...

    def getDataOrganization(self) -> ghidra.program.model.data.DataOrganization: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager:
        """
        @see ghidra.program.model.data.DataType#getDataTypeManager()
        """
        ...

    def getDataTypePath(self) -> ghidra.program.model.data.DataTypePath: ...

    def getDefaultAbbreviatedLabelPrefix(self) -> unicode: ...

    @overload
    def getDefaultLabelPrefix(self) -> unicode: ...

    @overload
    def getDefaultLabelPrefix(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, len: int, options: ghidra.program.model.data.DataTypeDisplayOptions) -> unicode: ...

    def getDefaultOffcutLabelPrefix(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, len: int, options: ghidra.program.model.data.DataTypeDisplayOptions, offcutLength: int) -> unicode: ...

    def getDefaultSettings(self) -> ghidra.docking.settings.Settings: ...

    def getDefinedComponents(self) -> List[ghidra.program.model.data.DataTypeComponent]: ...

    def getDescription(self) -> unicode: ...

    def getDisplayName(self) -> unicode: ...

    def getDocs(self) -> java.net.URL: ...

    def getExplicitMinimumAlignment(self) -> int: ...

    def getExplicitPackingValue(self) -> int: ...

    def getLastChangeTime(self) -> long: ...

    def getLastChangeTimeInSourceArchive(self) -> long: ...

    def getLength(self) -> int: ...

    @staticmethod
    def getMinAlignmentString(__a0: ghidra.program.model.data.Composite) -> unicode: ...

    def getMnemonic(self, settings: ghidra.docking.settings.Settings) -> unicode: ...

    def getName(self) -> unicode: ...

    def getNumComponents(self) -> int: ...

    def getNumDefinedComponents(self) -> int: ...

    @staticmethod
    def getPackingString(__a0: ghidra.program.model.data.Composite) -> unicode: ...

    def getPackingType(self) -> ghidra.program.model.data.PackingType: ...

    def getParents(self) -> java.util.Collection: ...

    def getPathName(self) -> unicode: ...

    def getRepresentation(self, __a0: ghidra.program.model.mem.MemBuffer, __a1: ghidra.docking.settings.Settings, __a2: int) -> unicode: ...

    def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def getSourceArchive(self) -> ghidra.program.model.data.SourceArchive: ...

    def getStoredMinimumAlignment(self) -> int: ...

    def getStoredPackingValue(self) -> int: ...

    def getTypeDefSettingsDefinitions(self) -> List[ghidra.program.model.data.TypeDefSettingsDefinition]: ...

    def getUniversalID(self) -> ghidra.util.UniversalID: ...

    def getValue(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> object: ...

    def getValueClass(self, settings: ghidra.docking.settings.Settings) -> java.lang.Class: ...

    def hasDefaultPacking(self) -> bool: ...

    def hasExplicitMinimumAlignment(self) -> bool: ...

    def hasExplicitPackingValue(self) -> bool: ...

    def hasLanguageDependantLength(self) -> bool: ...

    def hashCode(self) -> int: ...

    @overload
    def insert(self, ordinal: int, dataType: ghidra.program.model.data.DataType) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def insert(self, ordinal: int, dataType: ghidra.program.model.data.DataType, length: int) -> ghidra.program.model.data.DataTypeComponent: ...

    @overload
    def insert(self, __a0: int, __a1: ghidra.program.model.data.DataType, __a2: int, __a3: unicode, __a4: unicode) -> ghidra.program.model.data.DataTypeComponent: ...

    def isDefaultAligned(self) -> bool: ...

    def isDeleted(self) -> bool: ...

    def isEncodable(self) -> bool: ...

    def isEquivalent(self, __a0: ghidra.program.model.data.DataType) -> bool: ...

    def isMachineAligned(self) -> bool: ...

    def isNotYetDefined(self) -> bool:
        """
        Determine if this composite should be treated as undefined.
         <p>
         A composite is considered undefined with a zero-length when it has 
         no components and packing is disabled.  A {@link DataTypeComponent} defined by an
         an datatype which is not-yet-defined (i.e., {@link DataType#isNotYetDefined()} is true) 
         will always have a size of 1.  If an empty composite should be treated as 
         fully specified, packing on the composite should be enabled to ensure that 
         a zero-length component is used should the occassion arise (e.g., empty structure 
         placed within union as a component).
        """
        ...

    def isPackingEnabled(self) -> bool: ...

    def isPartOf(self, dataTypeOfInterest: ghidra.program.model.data.DataType) -> bool: ...

    def isZeroLength(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def pack(self, __a0: int) -> None: ...

    def removeParent(self, dt: ghidra.program.model.data.DataType) -> None: ...

    @overload
    def repack(self) -> None: ...

    @overload
    def repack(self, notify: bool) -> bool:
        """
        Repack components within this composite based on the current packing, alignment 
         and {@link DataOrganization} settings.  Non-packed Structures: change detection
         is limited to component count and length is assumed to already be correct.
         <p>
         NOTE: If modifications to stored length are made prior to invoking this method, 
         detection of a size change may not be possible.  
         <p>
         NOTE: Currently a change in calculated alignment can not be provided since
         this value is not stored.
        @param notify if true notification will be sent to parents if a size change
         or component placement change is detected.
        @return true if a layout change was detected.
        """
        ...

    def replaceWith(self, dataType: ghidra.program.model.data.DataType) -> None: ...

    def setCategoryPath(self, path: ghidra.program.model.data.CategoryPath) -> None: ...

    def setDescription(self, desc: unicode) -> None: ...

    def setExplicitMinimumAlignment(self, minimumAlignment: int) -> None: ...

    def setExplicitPackingValue(self, packingValue: int) -> None: ...

    def setLastChangeTime(self, lastChangeTime: long) -> None: ...

    def setLastChangeTimeInSourceArchive(self, lastChangeTimeInSourceArchive: long) -> None: ...

    def setName(self, name: unicode) -> None: ...

    def setNameAndCategory(self, path: ghidra.program.model.data.CategoryPath, name: unicode) -> None: ...

    def setPackingEnabled(self, enabled: bool) -> None: ...

    def setSourceArchive(self, archive: ghidra.program.model.data.SourceArchive) -> None: ...

    def setToDefaultAligned(self) -> None: ...

    def setToDefaultPacking(self) -> None: ...

    def setToMachineAligned(self) -> None: ...

    def setValue(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int, value: object) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alignedLength(self) -> int: ...

    @property
    def alignment(self) -> int: ...

    @property
    def alignmentType(self) -> ghidra.program.model.data.AlignmentType: ...

    @property
    def description(self) -> unicode: ...

    @description.setter
    def description(self, value: unicode) -> None: ...

    @property
    def explicitMinimumAlignment(self) -> int: ...

    @explicitMinimumAlignment.setter
    def explicitMinimumAlignment(self, value: int) -> None: ...

    @property
    def explicitPackingValue(self) -> int: ...

    @explicitPackingValue.setter
    def explicitPackingValue(self, value: int) -> None: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def notYetDefined(self) -> bool: ...

    @property
    def packingEnabled(self) -> bool: ...

    @packingEnabled.setter
    def packingEnabled(self, value: bool) -> None: ...

    @property
    def packingType(self) -> ghidra.program.model.data.PackingType: ...

    @property
    def storedMinimumAlignment(self) -> int: ...

    @property
    def storedPackingValue(self) -> int: ...