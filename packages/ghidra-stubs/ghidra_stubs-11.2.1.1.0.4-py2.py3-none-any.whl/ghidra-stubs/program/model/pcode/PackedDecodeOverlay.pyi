from typing import List
from typing import overload
import ghidra.program.model.address
import ghidra.program.model.pcode
import java.io
import java.lang


class PackedDecodeOverlay(ghidra.program.model.pcode.PackedDecode):
    """
    Alter address space decoding for a specific overlay space.
     Any decoded space that matches the overlayed space is replaced with the overlay itself.
     This causes addresses in the overlayed space to be converted into overlay addresses.
    """





    def __init__(self, addrFactory: ghidra.program.model.address.AddressFactory, spc: ghidra.program.model.address.OverlayAddressSpace): ...



    def clear(self) -> None: ...

    def close(self) -> None:
        """
        Close stream cached by the ingestStreamAsNeeded method.
        @throws IOException for low-level problems with the stream
        """
        ...

    def closeElement(self, id: int) -> None: ...

    def closeElementSkipping(self, id: int) -> None: ...

    def endIngest(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getClass(self) -> java.lang.Class: ...

    def getIndexedAttributeId(self, attribId: ghidra.program.model.pcode.AttributeId) -> int: ...

    def getNextAttributeId(self) -> int: ...

    def hashCode(self) -> int: ...

    def ingestBytes(self, byteArray: List[int], off: int, sz: int) -> None: ...

    def ingestStream(self, stream: java.io.InputStream) -> None: ...

    def ingestStreamToNextTerminator(self, stream: java.io.InputStream) -> None: ...

    def isEmpty(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def open(self, max: int, desc: unicode) -> None: ...

    @overload
    def openElement(self) -> int: ...

    @overload
    def openElement(self, elemId: ghidra.program.model.pcode.ElementId) -> int: ...

    def peekElement(self) -> int: ...

    @overload
    def readBool(self) -> bool: ...

    @overload
    def readBool(self, attribId: ghidra.program.model.pcode.AttributeId) -> bool: ...

    @overload
    def readOpcode(self) -> int: ...

    @overload
    def readOpcode(self, attribId: ghidra.program.model.pcode.AttributeId) -> int: ...

    @overload
    def readSignedInteger(self) -> long: ...

    @overload
    def readSignedInteger(self, attribId: ghidra.program.model.pcode.AttributeId) -> long: ...

    @overload
    def readSignedIntegerExpectString(self, expect: unicode, expectval: long) -> long: ...

    @overload
    def readSignedIntegerExpectString(self, attribId: ghidra.program.model.pcode.AttributeId, expect: unicode, expectval: long) -> long: ...

    @overload
    def readSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    @overload
    def readSpace(self, attribId: ghidra.program.model.pcode.AttributeId) -> ghidra.program.model.address.AddressSpace: ...

    @overload
    def readString(self) -> unicode: ...

    @overload
    def readString(self, attribId: ghidra.program.model.pcode.AttributeId) -> unicode: ...

    @overload
    def readUnsignedInteger(self) -> long: ...

    @overload
    def readUnsignedInteger(self, attribId: ghidra.program.model.pcode.AttributeId) -> long: ...

    def rewindAttributes(self) -> None: ...

    def setAddressFactory(self, addrFactory: ghidra.program.model.address.AddressFactory) -> None: ...

    def setOverlay(self, spc: ghidra.program.model.address.OverlayAddressSpace) -> None: ...

    def skipElement(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def overlay(self) -> None: ...  # No getter available.

    @overlay.setter
    def overlay(self, value: ghidra.program.model.address.OverlayAddressSpace) -> None: ...