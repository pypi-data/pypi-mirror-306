from typing import List
from typing import overload
import ghidra.features.base.memsearch.bytesource
import ghidra.features.base.memsearch.combiner
import ghidra.features.base.memsearch.format
import ghidra.features.base.memsearch.gui
import ghidra.features.base.memsearch.matcher
import java.lang
import java.nio.charset
import java.util
import java.util.function


class SearchGuiModel(object):
    """
    Maintains the state of all the settings and controls for the memory search window.
    """





    def __init__(self, __a0: ghidra.features.base.memsearch.gui.SearchSettings, __a1: List[object]): ...



    def addChangeCallback(self, changeCallback: java.util.function.Consumer) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAlignment(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getDecimalByteSize(self) -> int: ...

    def getMatchCombiner(self) -> ghidra.features.base.memsearch.combiner.Combiner: ...

    def getMemoryRegionChoices(self) -> List[ghidra.features.base.memsearch.bytesource.SearchRegion]: ...

    def getSearchFormat(self) -> ghidra.features.base.memsearch.format.SearchFormat: ...

    def getSelectedMemoryRegions(self) -> java.util.Set: ...

    def getSettings(self) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    def getStringCharset(self) -> java.nio.charset.Charset: ...

    def hasSelection(self) -> bool: ...

    def hashCode(self) -> int: ...

    def includeDefinedData(self) -> bool: ...

    def includeInstructions(self) -> bool: ...

    def includeUndefinedData(self) -> bool: ...

    def isBigEndian(self) -> bool: ...

    def isCaseSensitive(self) -> bool: ...

    def isDecimalUnsigned(self) -> bool: ...

    def isSearchSelectionOnly(self) -> bool: ...

    def isSelectedRegion(self, region: ghidra.features.base.memsearch.bytesource.SearchRegion) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parse(self, proposedText: unicode) -> ghidra.features.base.memsearch.matcher.ByteMatcher: ...

    def selectRegion(self, region: ghidra.features.base.memsearch.bytesource.SearchRegion, selected: bool) -> None: ...

    def setAlignment(self, alignment: int) -> None: ...

    @overload
    def setAutoRestrictSelection(self) -> None: ...

    @overload
    def setAutoRestrictSelection(self, autoRestrictSelection: bool) -> None: ...

    def setBigEndian(self, b: bool) -> None: ...

    def setCaseSensitive(self, selected: bool) -> None: ...

    def setDecimalByteSize(self, byteSize: int) -> None: ...

    def setDecimalUnsigned(self, selected: bool) -> None: ...

    def setHasSelection(self, b: bool) -> None: ...

    def setIncludeDefinedData(self, selected: bool) -> None: ...

    def setIncludeInstructions(self, selected: bool) -> None: ...

    def setIncludeUndefinedData(self, selected: bool) -> None: ...

    def setMatchCombiner(self, combiner: ghidra.features.base.memsearch.combiner.Combiner) -> None: ...

    def setSearchFormat(self, searchFormat: ghidra.features.base.memsearch.format.SearchFormat) -> None: ...

    def setSearchSelectionOnly(self, b: bool) -> None: ...

    def setSettings(self, newSettings: ghidra.features.base.memsearch.gui.SearchSettings) -> None: ...

    def setStringCharset(self, charset: java.nio.charset.Charset) -> None: ...

    def setUseEscapeSequences(self, selected: bool) -> None: ...

    def toString(self) -> unicode: ...

    def useEscapeSequences(self) -> bool: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alignment(self) -> int: ...

    @alignment.setter
    def alignment(self, value: int) -> None: ...

    @property
    def autoRestrictSelection(self) -> None: ...  # No getter available.

    @autoRestrictSelection.setter
    def autoRestrictSelection(self, value: bool) -> None: ...

    @property
    def bigEndian(self) -> bool: ...

    @bigEndian.setter
    def bigEndian(self, value: bool) -> None: ...

    @property
    def caseSensitive(self) -> bool: ...

    @caseSensitive.setter
    def caseSensitive(self, value: bool) -> None: ...

    @property
    def decimalByteSize(self) -> int: ...

    @decimalByteSize.setter
    def decimalByteSize(self, value: int) -> None: ...

    @property
    def decimalUnsigned(self) -> bool: ...

    @decimalUnsigned.setter
    def decimalUnsigned(self, value: bool) -> None: ...

    @property
    def matchCombiner(self) -> ghidra.features.base.memsearch.combiner.Combiner: ...

    @matchCombiner.setter
    def matchCombiner(self, value: ghidra.features.base.memsearch.combiner.Combiner) -> None: ...

    @property
    def memoryRegionChoices(self) -> List[object]: ...

    @property
    def searchFormat(self) -> ghidra.features.base.memsearch.format.SearchFormat: ...

    @searchFormat.setter
    def searchFormat(self, value: ghidra.features.base.memsearch.format.SearchFormat) -> None: ...

    @property
    def searchSelectionOnly(self) -> bool: ...

    @searchSelectionOnly.setter
    def searchSelectionOnly(self, value: bool) -> None: ...

    @property
    def selectedMemoryRegions(self) -> java.util.Set: ...

    @property
    def settings(self) -> ghidra.features.base.memsearch.gui.SearchSettings: ...

    @settings.setter
    def settings(self, value: ghidra.features.base.memsearch.gui.SearchSettings) -> None: ...

    @property
    def stringCharset(self) -> java.nio.charset.Charset: ...

    @stringCharset.setter
    def stringCharset(self, value: java.nio.charset.Charset) -> None: ...