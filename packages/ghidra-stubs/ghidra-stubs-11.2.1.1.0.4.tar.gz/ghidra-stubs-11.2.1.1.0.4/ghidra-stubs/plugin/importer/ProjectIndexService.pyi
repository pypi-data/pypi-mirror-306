from typing import List
from typing import overload
import ghidra.formats.gfilesystem
import ghidra.framework.model
import ghidra.plugin.importer
import ghidra.plugin.importer.ProjectIndexService
import ghidra.util.task
import java.lang
import java.util


class ProjectIndexService(object, ghidra.framework.model.DomainFolderChangeListener):
    """
    An in-memory index of FSRL-to-domainfile in the current project.
    """






    class IndexType(java.lang.Enum):
        FSRL: ghidra.plugin.importer.ProjectIndexService.IndexType
        MD5: ghidra.plugin.importer.ProjectIndexService.IndexType







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def getMetadataKey(self) -> unicode: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.plugin.importer.ProjectIndexService.IndexType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.plugin.importer.ProjectIndexService.IndexType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def metadataKey(self) -> unicode: ...





    def clearProject(self) -> None: ...

    def domainFileAdded(self, file: ghidra.framework.model.DomainFile) -> None: ...

    def domainFileMoved(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainFolder, __a2: unicode) -> None: ...

    def domainFileObjectClosed(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileObjectOpenedForUpdate(self, __a0: ghidra.framework.model.DomainFile, __a1: ghidra.framework.model.DomainObject) -> None: ...

    def domainFileRemoved(self, parent: ghidra.framework.model.DomainFolder, name: unicode, fileID: unicode) -> None: ...

    def domainFileRenamed(self, __a0: ghidra.framework.model.DomainFile, __a1: unicode) -> None: ...

    def domainFileStatusChanged(self, __a0: ghidra.framework.model.DomainFile, __a1: bool) -> None: ...

    def domainFolderAdded(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderMoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: ghidra.framework.model.DomainFolder) -> None: ...

    def domainFolderRemoved(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderRenamed(self, __a0: ghidra.framework.model.DomainFolder, __a1: unicode) -> None: ...

    def domainFolderSetActive(self, __a0: ghidra.framework.model.DomainFolder) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def findFirstByFSRL(self, fsrl: ghidra.formats.gfilesystem.FSRL) -> ghidra.framework.model.DomainFile: ...

    def getClass(self) -> java.lang.Class: ...

    @staticmethod
    def getInstance() -> ghidra.plugin.importer.ProjectIndexService: ...

    def hashCode(self) -> int: ...

    def lookupFiles(self, keyType: ghidra.plugin.importer.ProjectIndexService.IndexType, keyValue: object) -> List[ghidra.framework.model.DomainFile]: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setProject(self, newProject: ghidra.framework.model.Project, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

