from typing import List
from typing import overload
import ghidra.app.util.bin
import ghidra.app.util.bin.format.macho.commands.chained
import java.lang


class DyldChainedImports(object):
    """
    Represents a dyld_chained_import array.
    """





    def __init__(self, __a0: List[object]): ...



    def equals(self, __a0: object) -> bool: ...

    def getChainedImport(self, ordinal: int) -> ghidra.app.util.bin.format.macho.commands.chained.DyldChainedImport: ...

    def getChainedImports(self) -> List[ghidra.app.util.bin.format.macho.commands.chained.DyldChainedImport]: ...

    def getClass(self) -> java.lang.Class: ...

    def getImportsCount(self) -> int: ...

    def getImportsOffset(self) -> long: ...

    def hashCode(self) -> int: ...

    def initSymbols(self, reader: ghidra.app.util.bin.BinaryReader, dyldChainedFixupHeader: ghidra.app.util.bin.format.macho.commands.chained.DyldChainedFixupHeader) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def chainedImports(self) -> List[ghidra.app.util.bin.format.macho.commands.chained.DyldChainedImport]: ...

    @property
    def importsCount(self) -> int: ...

    @property
    def importsOffset(self) -> long: ...