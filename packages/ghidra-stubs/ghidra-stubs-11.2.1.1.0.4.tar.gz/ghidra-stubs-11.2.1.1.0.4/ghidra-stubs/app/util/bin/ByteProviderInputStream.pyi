from typing import List
from typing import overload
import ghidra.app.util.bin
import java.io
import java.lang


class ByteProviderInputStream(java.io.InputStream):
    """
    An InputStream that reads from a ByteProvider.
 
     Does not close the underlying ByteProvider when closed itself.
    """






    class ClosingInputStream(ghidra.app.util.bin.ByteProviderInputStream):




        def __init__(self, __a0: ghidra.app.util.bin.ByteProvider): ...



        def available(self) -> int: ...

        def close(self) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def mark(self, __a0: int) -> None: ...

        def markSupported(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @staticmethod
        def nullInputStream() -> java.io.InputStream: ...

        @overload
        def read(self) -> int: ...

        @overload
        def read(self, __a0: List[int]) -> int: ...

        @overload
        def read(self, __a0: List[int], __a1: int, __a2: int) -> int: ...

        def readAllBytes(self) -> List[int]: ...

        @overload
        def readNBytes(self, __a0: int) -> List[int]: ...

        @overload
        def readNBytes(self, __a0: List[int], __a1: int, __a2: int) -> int: ...

        def reset(self) -> None: ...

        def skip(self, __a0: long) -> long: ...

        def skipNBytes(self, __a0: long) -> None: ...

        def toString(self) -> unicode: ...

        def transferTo(self, __a0: java.io.OutputStream) -> long: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    @overload
    def __init__(self, provider: ghidra.app.util.bin.ByteProvider):
        """
        Creates an InputStream that uses a ByteProvider as its source of bytes.
        @param provider the {@link ByteProvider} to wrap
        """
        ...

    @overload
    def __init__(self, provider: ghidra.app.util.bin.ByteProvider, startPosition: long):
        """
        Creates an InputStream that uses a ByteProvider as its source of bytes.
        @param provider the {@link ByteProvider} to wrap
        @param startPosition starting position in the provider
        """
        ...



    def available(self) -> int: ...

    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def mark(self, readlimit: int) -> None: ...

    def markSupported(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def nullInputStream() -> java.io.InputStream: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, __a0: List[int]) -> int: ...

    @overload
    def read(self, b: List[int], bufferOffset: int, len: int) -> int: ...

    def readAllBytes(self) -> List[int]: ...

    @overload
    def readNBytes(self, __a0: int) -> List[int]: ...

    @overload
    def readNBytes(self, __a0: List[int], __a1: int, __a2: int) -> int: ...

    def reset(self) -> None: ...

    def skip(self, n: long) -> long: ...

    def skipNBytes(self, __a0: long) -> None: ...

    def toString(self) -> unicode: ...

    def transferTo(self, __a0: java.io.OutputStream) -> long: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

