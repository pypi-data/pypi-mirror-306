from typing import overload
import ghidra.app.util.bin
import ghidra.app.util.bin.format.macos.cfm
import ghidra.program.model.data
import java.lang


class CFragResourceMember(object, ghidra.app.util.bin.StructConverter):
    ASCII: ghidra.program.model.data.DataType
    BYTE: ghidra.program.model.data.DataType
    DWORD: ghidra.program.model.data.DataType
    IBO32: ghidra.program.model.data.DataType
    IBO64: ghidra.program.model.data.DataType
    POINTER: ghidra.program.model.data.DataType
    QWORD: ghidra.program.model.data.DataType
    SLEB128: ghidra.program.model.data.SignedLeb128DataType
    STRING: ghidra.program.model.data.DataType
    ULEB128: ghidra.program.model.data.UnsignedLeb128DataType
    UTF16: ghidra.program.model.data.DataType
    UTF8: ghidra.program.model.data.DataType
    VOID: ghidra.program.model.data.DataType
    WORD: ghidra.program.model.data.DataType
    kNullCFragVersion: int = 0
    kWildcardCFragVersion: int = -1



    def __init__(self, reader: ghidra.app.util.bin.BinaryReader): ...



    def equals(self, __a0: object) -> bool: ...

    def getArchitecture(self) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentVersion(self) -> int: ...

    def getExtensionCount(self) -> int: ...

    def getLength(self) -> int: ...

    def getMemberSize(self) -> int: ...

    def getName(self) -> unicode: ...

    def getOffset(self) -> int: ...

    def getOldDefVersion(self) -> int: ...

    def getUUsage1(self) -> ghidra.app.util.bin.format.macos.cfm.CFragUsage1Union: ...

    def getUUsage2(self) -> ghidra.app.util.bin.format.macos.cfm.CFragUsage2Union: ...

    def getUWhere1(self) -> ghidra.app.util.bin.format.macos.cfm.CFragWhere1Union: ...

    def getUWhere2(self) -> ghidra.app.util.bin.format.macos.cfm.CFragWhere2Union: ...

    def getUpdateLevel(self) -> int: ...

    def getUsage(self) -> ghidra.app.util.bin.format.macos.cfm.CFragUsage: ...

    def getWhere(self) -> ghidra.app.util.bin.format.macos.cfm.CFragLocatorKind: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toDataType(self) -> ghidra.program.model.data.DataType: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def UUsage1(self) -> ghidra.app.util.bin.format.macos.cfm.CFragUsage1Union: ...

    @property
    def UUsage2(self) -> ghidra.app.util.bin.format.macos.cfm.CFragUsage2Union: ...

    @property
    def UWhere1(self) -> ghidra.app.util.bin.format.macos.cfm.CFragWhere1Union: ...

    @property
    def UWhere2(self) -> ghidra.app.util.bin.format.macos.cfm.CFragWhere2Union: ...

    @property
    def architecture(self) -> unicode: ...

    @property
    def currentVersion(self) -> int: ...

    @property
    def extensionCount(self) -> int: ...

    @property
    def length(self) -> int: ...

    @property
    def memberSize(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def offset(self) -> int: ...

    @property
    def oldDefVersion(self) -> int: ...

    @property
    def updateLevel(self) -> int: ...

    @property
    def usage(self) -> ghidra.app.util.bin.format.macos.cfm.CFragUsage: ...

    @property
    def where(self) -> ghidra.app.util.bin.format.macos.cfm.CFragLocatorKind: ...