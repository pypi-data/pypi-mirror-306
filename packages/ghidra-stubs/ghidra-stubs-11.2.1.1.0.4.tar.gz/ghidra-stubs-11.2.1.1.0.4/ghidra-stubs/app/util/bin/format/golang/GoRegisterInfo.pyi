from typing import List
from typing import overload
import ghidra.app.util.bin.format.golang
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.program.model.listing
import java.lang
import java.util


class GoRegisterInfo(object):
    """
    Immutable information about registers, alignment sizes, etc needed to allocate storage
     for parameters during a function call.
 
    """






    class RegType(java.lang.Enum):
        FLOAT: ghidra.app.util.bin.format.golang.GoRegisterInfo.RegType
        INT: ghidra.app.util.bin.format.golang.GoRegisterInfo.RegType







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.app.util.bin.format.golang.GoRegisterInfo.RegType: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.app.util.bin.format.golang.GoRegisterInfo.RegType]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def equals(self, __a0: object) -> bool: ...

    def getAlignmentForType(self, dt: ghidra.program.model.data.DataType) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getCurrentGoroutineRegister(self) -> ghidra.program.model.lang.Register: ...

    def getDuffzeroParams(self, program: ghidra.program.model.listing.Program) -> List[ghidra.program.model.listing.Variable]: ...

    def getFloatRegisters(self) -> List[ghidra.program.model.lang.Register]: ...

    def getIntRegisterSize(self) -> int: ...

    def getIntRegisters(self) -> List[ghidra.program.model.lang.Register]: ...

    def getMaxAlign(self) -> int: ...

    def getStackInitialOffset(self) -> int: ...

    def getZeroRegister(self) -> ghidra.program.model.lang.Register: ...

    def hashCode(self) -> int: ...

    def isZeroRegisterIsBuiltin(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def currentGoroutineRegister(self) -> ghidra.program.model.lang.Register: ...

    @property
    def floatRegisters(self) -> List[object]: ...

    @property
    def intRegisterSize(self) -> int: ...

    @property
    def intRegisters(self) -> List[object]: ...

    @property
    def maxAlign(self) -> int: ...

    @property
    def stackInitialOffset(self) -> int: ...

    @property
    def zeroRegister(self) -> ghidra.program.model.lang.Register: ...

    @property
    def zeroRegisterIsBuiltin(self) -> bool: ...