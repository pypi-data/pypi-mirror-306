from typing import List
from typing import overload
import ghidra.app.plugin.assembler.sleigh.sem
import java.lang
import java.util


class AssemblyResolvedError(ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution, object):








    def collectAllRight(self, __a0: java.util.Collection) -> None: ...

    def compareTo(self, __a0: object) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def getChildren(self) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getError(self) -> unicode: ...

    def getRight(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def hasChildren(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isBackfill(self) -> bool: ...

    def isError(self) -> bool: ...

    def lineToString(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def parent(self, __a0: unicode, __a1: int) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    def shift(self, __a0: int) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    def toString(self, __a0: unicode) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def backfill(self) -> bool: ...

    @property
    def children(self) -> List[object]: ...

    @property
    def description(self) -> unicode: ...

    @property
    def error(self) -> bool: ...

    @property
    def right(self) -> ghidra.app.plugin.assembler.sleigh.sem.AssemblyResolution: ...