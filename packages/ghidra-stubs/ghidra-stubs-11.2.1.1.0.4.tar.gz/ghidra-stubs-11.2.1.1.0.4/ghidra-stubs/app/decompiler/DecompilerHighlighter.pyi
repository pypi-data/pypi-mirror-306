from typing import overload
import java.lang


class DecompilerHighlighter(object):
    """
    The highlighter interface passed to clients of the DecompilerHighlightService.

     The expected workflow for this class is:  create the highlighter, clients
     will request highlights via #applyHighlights(), clients will clear highlights via
     #clearHighlights() and the highlighter may be removed via #dispose().
    """









    def applyHighlights(self) -> None:
        """
        Call this method when you wish to apply your highlights.
        """
        ...

    def clearHighlights(self) -> None:
        """
        Call this method when you wish to remove your highlights.
        """
        ...

    def dispose(self) -> None:
        """
        Call this method to remove your highlighter from the Decompiler.
        """
        ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getId(self) -> unicode:
        """
        Returns the ID used by this highlighter.  This will either be generated by this API or
         supplied by the client.
        @return the ID
        @see DecompilerHighlightService#createHighlighter(String, CTokenHighlightMatcher)
        """
        ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def id(self) -> unicode: ...