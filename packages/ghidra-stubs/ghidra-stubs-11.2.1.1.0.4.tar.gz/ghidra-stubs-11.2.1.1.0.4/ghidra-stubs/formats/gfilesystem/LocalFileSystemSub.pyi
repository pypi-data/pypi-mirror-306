from typing import List
from typing import overload
import ghidra.app.util.bin
import ghidra.formats.gfilesystem
import ghidra.formats.gfilesystem.fileinfo
import ghidra.util.task
import java.io
import java.lang


class LocalFileSystemSub(object, ghidra.formats.gfilesystem.GFileSystem, ghidra.formats.gfilesystem.GFileHashProvider):
    """
    A GFileSystem interface to a part of the user's local / native file system.
 
     This class is a sub-view of the LocalFileSystem, and returns hybrid GFile objects
     that have fully specified FSRL paths that are valid in the Root filesystem, but relative
     GFile paths.
 
     This class's name doesn't end with "FileSystem" to ensure it will not be auto-discovered
     by the FileSystemFactoryMgr.
    """





    def __init__(self, rootDir: java.io.File, rootFS: ghidra.formats.gfilesystem.LocalFileSystem): ...



    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getByteProvider(self, file: ghidra.formats.gfilesystem.GFile, monitor: ghidra.util.task.TaskMonitor) -> ghidra.app.util.bin.ByteProvider: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getFSRL(self) -> ghidra.formats.gfilesystem.FSRLRoot: ...

    def getFileAttributes(self, file: ghidra.formats.gfilesystem.GFile, monitor: ghidra.util.task.TaskMonitor) -> ghidra.formats.gfilesystem.fileinfo.FileAttributes: ...

    def getFileCount(self) -> int: ...

    def getInputStream(self, file: ghidra.formats.gfilesystem.GFile, monitor: ghidra.util.task.TaskMonitor) -> java.io.InputStream: ...

    @staticmethod
    def getInputStreamHelper(__a0: ghidra.formats.gfilesystem.GFile, __a1: ghidra.formats.gfilesystem.GFileSystem, __a2: ghidra.util.task.TaskMonitor) -> java.io.InputStream: ...

    def getListing(self, directory: ghidra.formats.gfilesystem.GFile) -> List[ghidra.formats.gfilesystem.GFile]: ...

    def getMD5Hash(self, file: ghidra.formats.gfilesystem.GFile, required: bool, monitor: ghidra.util.task.TaskMonitor) -> unicode: ...

    def getName(self) -> unicode: ...

    def getRefManager(self) -> ghidra.formats.gfilesystem.FileSystemRefManager: ...

    def getRootDir(self) -> ghidra.formats.gfilesystem.GFile: ...

    def getType(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isClosed(self) -> bool: ...

    def isStatic(self) -> bool: ...

    def lookup(self, path: unicode) -> ghidra.formats.gfilesystem.GFile: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def resolveSymlinks(self, file: ghidra.formats.gfilesystem.GFile) -> ghidra.formats.gfilesystem.GFile: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def FSRL(self) -> ghidra.formats.gfilesystem.FSRLRoot: ...

    @property
    def closed(self) -> bool: ...

    @property
    def description(self) -> unicode: ...

    @property
    def fileCount(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @property
    def refManager(self) -> ghidra.formats.gfilesystem.FileSystemRefManager: ...

    @property
    def rootDir(self) -> ghidra.formats.gfilesystem.GFile: ...

    @property
    def static(self) -> bool: ...

    @property
    def type(self) -> unicode: ...