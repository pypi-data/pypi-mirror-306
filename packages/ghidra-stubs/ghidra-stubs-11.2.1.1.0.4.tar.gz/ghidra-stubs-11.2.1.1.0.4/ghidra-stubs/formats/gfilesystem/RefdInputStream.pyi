from typing import List
from typing import overload
import java.io
import java.lang


class RefdInputStream(java.io.InputStream):
    """
    An InputStream wrapper that keeps a FileSystemRef pinned.
    """





    def __init__(self, fsRef: ghidra.formats.gfilesystem.FileSystemRef, delegate: java.io.InputStream):
        """
        Creates a new {@link RefdInputStream}.
        @param fsRef {@link FileSystemRef}
        @param delegate the wrapped {@link InputStream}
        """
        ...



    def available(self) -> int: ...

    def close(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def mark(self, readlimit: int) -> None: ...

    def markSupported(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @staticmethod
    def nullInputStream() -> java.io.InputStream: ...

    @overload
    def read(self) -> int: ...

    @overload
    def read(self, b: List[int]) -> int: ...

    @overload
    def read(self, b: List[int], off: int, len: int) -> int: ...

    def readAllBytes(self) -> List[int]: ...

    @overload
    def readNBytes(self, len: int) -> List[int]: ...

    @overload
    def readNBytes(self, b: List[int], off: int, len: int) -> int: ...

    def reset(self) -> None: ...

    def skip(self, n: long) -> long: ...

    def skipNBytes(self, n: long) -> None: ...

    def toString(self) -> unicode: ...

    def transferTo(self, out: java.io.OutputStream) -> long: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

