from typing import List
from typing import overload
import ghidra.framework.data
import ghidra.framework.model
import ghidra.framework.store
import ghidra.util.task
import java.io
import java.lang
import java.net
import java.util
import javax.swing


class LinkedGhidraFile(object, ghidra.framework.model.LinkedDomainFile):
    """
     corresponds to a DomainFile contained within a
     LinkedGhidraFolder.
    """









    def addToVersionControl(self, comment: unicode, keepCheckedOut: bool, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def canAddToRepository(self) -> bool: ...

    def canCheckin(self) -> bool: ...

    def canCheckout(self) -> bool: ...

    def canMerge(self) -> bool: ...

    def canRecover(self) -> bool: ...

    def canSave(self) -> bool: ...

    @overload
    def checkin(self, checkinHandler: ghidra.framework.data.CheckinHandler, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    @overload
    def checkin(self, __a0: ghidra.framework.data.CheckinHandler, __a1: bool, __a2: ghidra.util.task.TaskMonitor) -> None: ...

    def checkout(self, exclusive: bool, monitor: ghidra.util.task.TaskMonitor) -> bool: ...

    def compareTo(self, __a0: object) -> int: ...

    def copyTo(self, newParent: ghidra.framework.model.DomainFolder, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFile: ...

    def copyToAsLink(self, newParent: ghidra.framework.model.DomainFolder) -> ghidra.framework.model.DomainFile: ...

    def copyVersionTo(self, version: int, destFolder: ghidra.framework.model.DomainFolder, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFile: ...

    @overload
    def delete(self) -> None: ...

    @overload
    def delete(self, version: int) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def exists(self) -> bool: ...

    def followLink(self) -> ghidra.framework.model.DomainFolder: ...

    def getChangesByOthersSinceCheckout(self) -> ghidra.framework.model.ChangeSet: ...

    def getCheckoutStatus(self) -> ghidra.framework.store.ItemCheckoutStatus: ...

    def getCheckouts(self) -> List[ghidra.framework.store.ItemCheckoutStatus]: ...

    def getClass(self) -> java.lang.Class: ...

    def getConsumers(self) -> java.util.List: ...

    def getContentType(self) -> unicode: ...

    def getDomainObject(self, consumer: object, okToUpgrade: bool, okToRecover: bool, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainObject: ...

    def getDomainObjectClass(self) -> java.lang.Class: ...

    def getFileID(self) -> unicode: ...

    def getIcon(self, disabled: bool) -> javax.swing.Icon: ...

    def getImmutableDomainObject(self, consumer: object, version: int, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainObject: ...

    def getLastModifiedTime(self) -> long: ...

    def getLatestVersion(self) -> int: ...

    def getLinkedFile(self) -> ghidra.framework.model.DomainFile: ...

    def getLocalProjectURL(self, ref: unicode) -> java.net.URL: ...

    def getMetadata(self) -> java.util.Map: ...

    def getName(self) -> unicode: ...

    def getOpenedDomainObject(self, consumer: object) -> ghidra.framework.model.DomainObject: ...

    def getParent(self) -> ghidra.framework.model.DomainFolder: ...

    def getPathname(self) -> unicode: ...

    def getProjectLocator(self) -> ghidra.framework.model.ProjectLocator: ...

    def getReadOnlyDomainObject(self, consumer: object, version: int, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainObject: ...

    def getSharedProjectURL(self, ref: unicode) -> java.net.URL: ...

    def getVersion(self) -> int: ...

    def getVersionHistory(self) -> List[ghidra.framework.store.Version]: ...

    def hashCode(self) -> int: ...

    def isBusy(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isCheckedOut(self) -> bool: ...

    def isCheckedOutExclusive(self) -> bool: ...

    def isHijacked(self) -> bool: ...

    def isInWritableProject(self) -> bool: ...

    def isLatestVersion(self) -> bool: ...

    def isLinkFile(self) -> bool: ...

    def isLinkingSupported(self) -> bool: ...

    def isOpen(self) -> bool: ...

    def isReadOnly(self) -> bool: ...

    def isVersioned(self) -> bool: ...

    def length(self) -> long: ...

    def merge(self, okToUpgrade: bool, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def modifiedSinceCheckout(self) -> bool: ...

    def moveTo(self, newParent: ghidra.framework.model.DomainFolder) -> ghidra.framework.model.DomainFile: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def packFile(self, file: java.io.File, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def save(self, monitor: ghidra.util.task.TaskMonitor) -> None: ...

    def setName(self, newName: unicode) -> ghidra.framework.model.DomainFile: ...

    def setReadOnly(self, state: bool) -> None: ...

    def takeRecoverySnapshot(self) -> bool: ...

    def terminateCheckout(self, checkoutId: long) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def undoCheckout(self, keep: bool) -> None: ...

    @overload
    def undoCheckout(self, keep: bool, force: bool) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

