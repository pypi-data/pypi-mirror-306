from typing import List
from typing import overload
import ghidra.framework.data
import ghidra.framework.model
import ghidra.util.task
import java.io
import java.lang
import java.net
import javax.swing


class LinkedGhidraFolder(ghidra.framework.data.LinkedGhidraSubFolder):
    """
     provides the base LinkedDomainFolder implementation which
     corresponds to a project folder-link (see FolderLinkContentHandler).
    """

    FOLDER_LINK_CLOSED_ICON: javax.swing.Icon
    FOLDER_LINK_OPEN_ICON: javax.swing.Icon







    @overload
    def compareTo(self, df: ghidra.framework.model.DomainFolder) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def copyTo(self, newParent: ghidra.framework.model.DomainFolder, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFolder: ...

    def copyToAsLink(self, newParent: ghidra.framework.model.DomainFolder) -> ghidra.framework.model.DomainFile: ...

    @overload
    def createFile(self, name: unicode, obj: ghidra.framework.model.DomainObject, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFile: ...

    @overload
    def createFile(self, name: unicode, packFile: java.io.File, monitor: ghidra.util.task.TaskMonitor) -> ghidra.framework.model.DomainFile: ...

    def createFolder(self, name: unicode) -> ghidra.framework.model.DomainFolder: ...

    def delete(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getFile(self, name: unicode) -> ghidra.framework.model.DomainFile: ...

    def getFiles(self) -> List[ghidra.framework.model.DomainFile]: ...

    def getFolder(self, name: unicode) -> ghidra.framework.data.LinkedGhidraSubFolder: ...

    def getFolders(self) -> List[ghidra.framework.data.LinkedGhidraSubFolder]: ...

    def getIcon(self, isOpen: bool) -> javax.swing.Icon: ...

    def getLinkedFileNoError(self, name: unicode) -> ghidra.framework.model.DomainFile:
        """
        Get the true file within this linked folder.
        @param name file name
        @return file or null if not found or error occurs
        """
        ...

    def getLinkedFolder(self) -> ghidra.framework.model.DomainFolder: ...

    def getLinkedPathname(self) -> unicode: ...

    def getLocalProjectURL(self) -> java.net.URL: ...

    def getName(self) -> unicode: ...

    def getParent(self) -> ghidra.framework.model.DomainFolder: ...

    def getPathname(self) -> unicode: ...

    def getProjectData(self) -> ghidra.framework.model.ProjectData: ...

    def getProjectLocator(self) -> ghidra.framework.model.ProjectLocator: ...

    def getProjectURL(self) -> java.net.URL:
        """
        Get the Ghidra URL of the project/repository folder referenced by this object
        @return Ghidra URL of the project/repository folder referenced by this object
        """
        ...

    def getSharedProjectURL(self) -> java.net.URL: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def isInWritableProject(self) -> bool: ...

    def isLinked(self) -> bool: ...

    def moveTo(self, newParent: ghidra.framework.model.DomainFolder) -> ghidra.framework.model.DomainFolder: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setActive(self) -> None: ...

    def setName(self, newName: unicode) -> ghidra.framework.model.DomainFolder: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def empty(self) -> bool: ...

    @property
    def files(self) -> List[ghidra.framework.model.DomainFile]: ...

    @property
    def folders(self) -> List[ghidra.framework.data.LinkedGhidraSubFolder]: ...

    @property
    def inWritableProject(self) -> bool: ...

    @property
    def linked(self) -> bool: ...

    @property
    def linkedFolder(self) -> ghidra.framework.model.DomainFolder: ...

    @property
    def linkedPathname(self) -> unicode: ...

    @property
    def localProjectURL(self) -> java.net.URL: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def parent(self) -> ghidra.framework.model.DomainFolder: ...

    @property
    def pathname(self) -> unicode: ...

    @property
    def projectData(self) -> ghidra.framework.model.ProjectData: ...

    @property
    def projectLocator(self) -> ghidra.framework.model.ProjectLocator: ...

    @property
    def projectURL(self) -> java.net.URL: ...

    @property
    def sharedProjectURL(self) -> java.net.URL: ...