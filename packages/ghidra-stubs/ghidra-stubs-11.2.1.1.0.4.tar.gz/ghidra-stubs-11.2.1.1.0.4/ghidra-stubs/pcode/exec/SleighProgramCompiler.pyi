from typing import List
from typing import overload
import generic.stl
import ghidra.app.plugin.processors.sleigh
import ghidra.app.plugin.processors.sleigh.template
import ghidra.pcode.exec
import ghidra.pcodeCPort.opcodes
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slgh_compile
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import ghidra.program.model.lang
import ghidra.program.model.pcode
import ghidra.sleigh.grammar
import java.io
import java.lang
import java.util


class SleighProgramCompiler(java.lang.Enum):
    NIL_SYMBOL_NAME: unicode = u'__nil'




    class PcodeLogEntry(object):








        def equals(self, __a0: object) -> bool: ...

        def format(self) -> unicode: ...

        @staticmethod
        def formatList(__a0: List[object]) -> unicode: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def loc(self) -> ghidra.sleigh.grammar.Location: ...

        def msg(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def type(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ErrorCollectingPcodeParser(ghidra.program.model.lang.PcodeParser):
        noplist: generic.stl.VectorSTL



        def __init__(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage): ...



        def addOperand(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: int) -> None: ...

        def addSymbol(self, __a0: ghidra.pcodeCPort.slghsymbol.SleighSymbol) -> None: ...

        def addressOf(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl, __a1: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

        def allocateTemp(self) -> long: ...

        def appendOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: long, __a4: int) -> None: ...

        def assignBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        def buildTemporary(self, __a0: ghidra.sleigh.grammar.Location) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

        def buildTruncatedVarnode(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

        def clearSymbols(self) -> None: ...

        def compilePcode(self, __a0: unicode, __a1: unicode, __a2: int) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl: ...

        def createBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.SpecificSymbol, __a2: int, __a3: int) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createCrossBuild(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> generic.stl.VectorSTL: ...

        def createLoad(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createMacroUse(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.MacroSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

        @overload
        def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        @overload
        def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createOpConst(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: long) -> generic.stl.VectorSTL: ...

        @overload
        def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        @overload
        def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        def createOpOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.opcodes.OpCode, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createOpOutUnary(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.opcodes.OpCode, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createStore(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

        def createUserOp(self, __a0: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a1: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def createUserOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

        def createVariadic(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

        def defineLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.LabelSymbol: ...

        @staticmethod
        def entry(__a0: unicode, __a1: List[object]) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillinZero(self, __a0: ghidra.pcodeCPort.semantics.OpTpl, __a1: generic.stl.VectorSTL) -> None: ...

        def finalNamedSection(self, __a0: ghidra.pcodeCPort.slgh_compile.SectionVector, __a1: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def findInternalFunction(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: generic.stl.VectorSTL) -> object: ...

        def findSymbol(self, __a0: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

        def firstNamedSection(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def getClass(self) -> java.lang.Class: ...

        def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getErrors(self) -> int: ...

        def getNextTempOffset(self) -> long: ...

        def getSleigh(self) -> ghidra.pcodeCPort.sleighbase.SleighBase: ...

        def getUniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getWarnings(self) -> int: ...

        def hashCode(self) -> int: ...

        def isInternalFunction(self, __a0: unicode) -> bool: ...

        def matchSize(self, __a0: int, __a1: ghidra.pcodeCPort.semantics.OpTpl, __a2: bool, __a3: generic.stl.VectorSTL) -> None: ...

        @overload
        def newLocalDefinition(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

        @overload
        def newLocalDefinition(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: int) -> None: ...

        @overload
        def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: unicode) -> generic.stl.VectorSTL: ...

        @overload
        def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: unicode, __a4: int) -> generic.stl.VectorSTL: ...

        def newSectionSymbol(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.SectionSymbol: ...

        def nextNamedSection(self, __a0: ghidra.pcodeCPort.slgh_compile.SectionVector, __a1: ghidra.pcodeCPort.semantics.ConstructTpl, __a2: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def placeLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.LabelSymbol) -> generic.stl.VectorSTL: ...

        def propagateSize(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> bool: ...

        def recordNop(self, __a0: ghidra.sleigh.grammar.Location) -> None: ...

        def reportError(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

        def reportWarning(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

        def resetLabelCount(self) -> None: ...

        def setEnforceLocalKey(self, __a0: bool) -> None: ...

        def setResultStarVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

        def setResultVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

        def standaloneSection(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

        def toString(self) -> unicode: ...

        def translateConstTpl(self, __a0: ghidra.pcodeCPort.semantics.ConstTpl) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

        def translateConstructTpl(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl: ...

        def translateHandleTpl(self, __a0: ghidra.pcodeCPort.semantics.HandleTpl) -> ghidra.app.plugin.processors.sleigh.template.HandleTpl: ...

        def translateOpTpl(self, __a0: ghidra.pcodeCPort.semantics.OpTpl) -> ghidra.app.plugin.processors.sleigh.template.OpTpl: ...

        def translateVarnodeTpl(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.app.plugin.processors.sleigh.template.VarnodeTpl: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class PcodeProgramConstructor(object):








        def construct(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: List[object], __a2: java.util.Map) -> ghidra.pcode.exec.PcodeProgram: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class DetailedSleighException(ghidra.app.plugin.processors.sleigh.SleighException):




        def __init__(self, __a0: List[object]): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getDetails(self) -> List[object]: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def details(self) -> List[object]: ...





    @staticmethod
    def buildOps(__a0: ghidra.program.model.lang.Language, __a1: ghidra.app.plugin.processors.sleigh.template.ConstructTpl) -> List[object]: ...

    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    @overload
    @staticmethod
    def compileExpression(__a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: unicode) -> ghidra.pcode.exec.PcodeExpression: ...

    @overload
    @staticmethod
    def compileExpression(__a0: ghidra.program.model.lang.PcodeParser, __a1: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a2: unicode) -> ghidra.pcode.exec.PcodeExpression: ...

    @overload
    @staticmethod
    def compileProgram(__a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: unicode, __a2: unicode, __a3: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeProgram: ...

    @overload
    @staticmethod
    def compileProgram(__a0: ghidra.program.model.lang.PcodeParser, __a1: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a2: unicode, __a3: unicode, __a4: ghidra.pcode.exec.PcodeUseropLibrary) -> ghidra.pcode.exec.PcodeProgram: ...

    @staticmethod
    def compileTemplate(__a0: ghidra.program.model.lang.Language, __a1: ghidra.program.model.lang.PcodeParser, __a2: unicode, __a3: unicode) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl: ...

    @staticmethod
    def compileUserop(__a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: unicode, __a2: List[object], __a3: unicode, __a4: ghidra.pcode.exec.PcodeUseropLibrary, __a5: List[object]) -> ghidra.pcode.exec.PcodeProgram: ...

    @staticmethod
    def constructProgram(__a0: ghidra.pcode.exec.SleighProgramCompiler.PcodeProgramConstructor, __a1: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a2: ghidra.app.plugin.processors.sleigh.template.ConstructTpl, __a3: java.util.Map) -> ghidra.pcode.exec.PcodeProgram: ...

    @staticmethod
    def createParser(__a0: ghidra.app.plugin.processors.sleigh.SleighLanguage) -> ghidra.program.model.lang.PcodeParser: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def name(self) -> unicode: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    @staticmethod
    def paramSym(__a0: ghidra.program.model.lang.Language, __a1: ghidra.pcodeCPort.sleighbase.SleighBase, __a2: unicode, __a3: unicode, __a4: ghidra.program.model.pcode.Varnode) -> ghidra.pcodeCPort.slghsymbol.VarnodeSymbol: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.pcode.exec.SleighProgramCompiler: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.pcode.exec.SleighProgramCompiler]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

