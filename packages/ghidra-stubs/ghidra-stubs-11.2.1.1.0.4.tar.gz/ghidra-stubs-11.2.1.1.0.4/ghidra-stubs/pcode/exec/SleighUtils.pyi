from typing import List
from typing import overload
import ghidra.pcode.exec
import ghidra.sleigh.grammar
import java.io
import java.lang
import java.util
import java.util.function
import org.antlr.runtime
import org.antlr.runtime.tree


class SleighUtils(java.lang.Enum):
    CONDITION_ALWAYS: unicode = u'1:1'
    UNCONDITIONAL_BREAK: unicode = u'emu_swi();\nemu_exec_decoded();\n'




    class SleighParseErrorEntry(java.lang.Record):




        def __init__(self, __a0: unicode, __a1: unicode, __a2: int, __a3: int): ...



        def equals(self, __a0: object) -> bool: ...

        def fullMessage(self) -> unicode: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def header(self) -> unicode: ...

        def message(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def start(self) -> int: ...

        def stop(self) -> int: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class MismatchException(java.lang.RuntimeException):




        def __init__(self): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class ParseFunction(object):








        def apply(self, __a0: ghidra.sleigh.grammar.SleighParser) -> object: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class SleighParseError(java.lang.RuntimeException):




        def __init__(self, __a0: java.util.Collection): ...



        def addSuppressed(self, __a0: java.lang.Throwable) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        def fillInStackTrace(self) -> java.lang.Throwable: ...

        def getCause(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def getErrors(self) -> List[object]: ...

        def getLocalizedMessage(self) -> unicode: ...

        def getMessage(self) -> unicode: ...

        def getStackTrace(self) -> List[java.lang.StackTraceElement]: ...

        def getSuppressed(self) -> List[java.lang.Throwable]: ...

        def hashCode(self) -> int: ...

        def initCause(self, __a0: java.lang.Throwable) -> java.lang.Throwable: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        @overload
        def printStackTrace(self) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintStream) -> None: ...

        @overload
        def printStackTrace(self, __a0: java.io.PrintWriter) -> None: ...

        def setStackTrace(self, __a0: List[java.lang.StackTraceElement]) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def errors(self) -> List[object]: ...




    class AddressOf(java.lang.Record):




        def __init__(self, __a0: unicode, __a1: org.antlr.runtime.tree.Tree): ...



        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def offset(self) -> org.antlr.runtime.tree.Tree: ...

        def space(self) -> unicode: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    def compareTo(self, __a0: java.lang.Enum) -> int: ...

    @overload
    def compareTo(self, __a0: object) -> int: ...

    def describeConstable(self) -> java.util.Optional: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def generateSleighExpression(__a0: org.antlr.runtime.tree.Tree) -> unicode: ...

    @staticmethod
    def getChildren(__a0: org.antlr.runtime.tree.Tree) -> List[object]: ...

    def getClass(self) -> java.lang.Class: ...

    def getDeclaringClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def isUnconditionalBreakpoint(__a0: org.antlr.runtime.tree.Tree) -> bool: ...

    @staticmethod
    def makeTree(__a0: int, __a1: unicode, __a2: List[object]) -> org.antlr.runtime.tree.Tree: ...

    @staticmethod
    def match(__a0: org.antlr.runtime.tree.Tree, __a1: int, __a2: List[java.util.function.Consumer]) -> None: ...

    @staticmethod
    def matchDereference(__a0: org.antlr.runtime.tree.Tree, __a1: java.util.function.Consumer, __a2: java.util.function.Consumer, __a3: java.util.function.Consumer) -> None: ...

    @staticmethod
    def matchTree(__a0: org.antlr.runtime.tree.Tree, __a1: int, __a2: java.util.function.Consumer) -> None: ...

    def name(self) -> unicode: ...

    @staticmethod
    def notTree(__a0: org.antlr.runtime.tree.Tree) -> org.antlr.runtime.tree.Tree: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ordinal(self) -> int: ...

    @staticmethod
    def parseSleigh(__a0: ghidra.pcode.exec.SleighUtils.ParseFunction, __a1: unicode, __a2: unicode) -> org.antlr.runtime.RuleReturnScope: ...

    @staticmethod
    def parseSleighExpression(__a0: unicode) -> org.antlr.runtime.tree.Tree: ...

    @staticmethod
    def parseSleighSemantic(__a0: unicode) -> org.antlr.runtime.tree.Tree: ...

    @overload
    @staticmethod
    def recoverAddressOf(__a0: unicode, __a1: unicode) -> ghidra.pcode.exec.SleighUtils.AddressOf: ...

    @overload
    @staticmethod
    def recoverAddressOf(__a0: unicode, __a1: org.antlr.runtime.tree.Tree) -> ghidra.pcode.exec.SleighUtils.AddressOf: ...

    @overload
    @staticmethod
    def recoverConditionFromBreakpoint(__a0: unicode) -> unicode: ...

    @overload
    @staticmethod
    def recoverConditionFromBreakpoint(__a0: org.antlr.runtime.tree.Tree) -> unicode: ...

    @staticmethod
    def removeParenthesisTree(__a0: org.antlr.runtime.tree.Tree) -> org.antlr.runtime.tree.Tree: ...

    @staticmethod
    def requireCount(__a0: int, __a1: List[object]) -> None: ...

    @staticmethod
    def sleighForConditionalBreak(__a0: unicode) -> unicode: ...

    def toString(self) -> unicode: ...

    @overload
    @staticmethod
    def valueOf(__a0: unicode) -> ghidra.pcode.exec.SleighUtils: ...

    @overload
    @staticmethod
    def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

    @staticmethod
    def values() -> List[ghidra.pcode.exec.SleighUtils]: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

