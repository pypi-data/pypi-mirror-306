from typing import List
from typing import overload
import ghidra.program.database
import ghidra.program.model.address
import ghidra.program.model.listing
import ghidra.util
import java.lang


class ModuleDB(ghidra.program.database.DatabaseObject, ghidra.program.model.listing.ProgramModule):
    """
    Database implementation for Module.
    """









    @overload
    def add(self, fragment: ghidra.program.model.listing.ProgramFragment) -> None: ...

    @overload
    def add(self, module: ghidra.program.model.listing.ProgramModule) -> None: ...

    @overload
    def contains(self, codeUnit: ghidra.program.model.listing.CodeUnit) -> bool: ...

    @overload
    def contains(self, fragment: ghidra.program.model.listing.ProgramFragment) -> bool: ...

    @overload
    def contains(self, module: ghidra.program.model.listing.ProgramModule) -> bool: ...

    def createFragment(self, fragmentName: unicode) -> ghidra.program.model.listing.ProgramFragment: ...

    def createModule(self, moduleName: unicode) -> ghidra.program.model.listing.ProgramModule: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddressSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def getChildren(self) -> List[ghidra.program.model.listing.Group]: ...

    def getClass(self) -> java.lang.Class: ...

    def getComment(self) -> unicode: ...

    def getFirstAddress(self) -> ghidra.program.model.address.Address: ...

    def getIndex(self, name: unicode) -> int: ...

    def getKey(self) -> long:
        """
        Get the database key for this object.
        """
        ...

    def getLastAddress(self) -> ghidra.program.model.address.Address: ...

    def getMaxAddress(self) -> ghidra.program.model.address.Address: ...

    def getMinAddress(self) -> ghidra.program.model.address.Address: ...

    def getModificationNumber(self) -> long: ...

    def getName(self) -> unicode: ...

    def getNumChildren(self) -> int: ...

    def getNumParents(self) -> int: ...

    def getParentNames(self) -> List[unicode]: ...

    def getParents(self) -> List[ghidra.program.model.listing.ProgramModule]: ...

    def getTreeID(self) -> long: ...

    def getTreeName(self) -> unicode: ...

    def getVersionTag(self) -> object: ...

    def hashCode(self) -> int: ...

    def isDeleted(self, lock: ghidra.util.Lock) -> bool:
        """
        Returns true if this object has been deleted. Note: once an object has been deleted, it will
         never be "refreshed". For example, if an object is ever deleted and is resurrected via an
         "undo", you will have get a fresh instance of the object.
        @param lock object cache lock object
        @return true if this object has been deleted.
        """
        ...

    @overload
    def isDescendant(self, fragment: ghidra.program.model.listing.ProgramFragment) -> bool: ...

    @overload
    def isDescendant(self, module: ghidra.program.model.listing.ProgramModule) -> bool: ...

    def moveChild(self, name: unicode, index: int) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeChild(self, name: unicode) -> bool: ...

    def reparent(self, name: unicode, oldParent: ghidra.program.model.listing.ProgramModule) -> None: ...

    def setComment(self, comment: unicode) -> None: ...

    def setInvalid(self) -> None:
        """
        Invalidate this object. This does not necessarily mean that this object can never be used
         again. If the object can refresh itself, it may still be useable.
        """
        ...

    def setName(self, name: unicode) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

