from typing import List
from typing import overload
import ghidra.docking.settings
import ghidra.program.model.data
import ghidra.program.model.mem
import ghidra.util
import java.lang
import java.net
import java.util


class PointerTypedef(ghidra.program.model.data.GenericDataType, ghidra.program.model.data.TypeDef):
    """
    PointerTypedef provides a Pointer-Typedef template datatype
     which may be used as an alternative to PointerTypedefBuilder for
     select use cases.  Once resolved this datatype is transformed into a 
     standard TypeDef with appropropriate settings (see 
     TypeDefSettingsDefinition).
 
     NOTE: The name of this class intentionally does not end with DataType
     since it does not implement a default constructor so it may not be treated
     like other BuiltIn datatypes which are managed by the 
     BuiltInDataTypeManager.
 
     NOTE: As a BuiltIn datatype the use of #setName(String) and
     #setNameAndCategory(CategoryPath, String) is disabled.  The datatype
     instance must be instantiated with the correct typedef name.
    """





    @overload
    def __init__(self, typeDefName: unicode, pointerDataType: ghidra.program.model.data.Pointer, dtm: ghidra.program.model.data.DataTypeManager):
        """
        Constructs a pointer-typedef without any settings
        @param typeDefName name of this pointer-typedef or null to use auto-named typedef.
        @param pointerDataType associated pointer datatype
        @param dtm data-type manager whose data organization should be used (highly recommended, may be null)
        """
        ...

    @overload
    def __init__(self, typeDefName: unicode, referencedDataType: ghidra.program.model.data.DataType, pointerSize: int, dtm: ghidra.program.model.data.DataTypeManager):
        """
        Constructs a pointer-typedef without any settings
        @param typeDefName name of this pointer-typedef or null to use auto-named typedef.
        @param referencedDataType data type this pointer-typedef points to or null
        @param pointerSize pointer size in bytes or -1 for default pointer size based upon datatype manager
        @param dtm data-type manager whose data organization should be used (highly recommended, may be null)
        """
        ...

    @overload
    def __init__(self, typeDefName: unicode, referencedDataType: ghidra.program.model.data.DataType, pointerSize: int, dtm: ghidra.program.model.data.DataTypeManager, componentOffset: long):
        """
        Constructs a offset-pointer-typedef
        @param typeDefName name of this pointer-typedef or null to use auto-named typedef.
        @param referencedDataType data type this pointer-typedef points to or null
        @param pointerSize pointer size in bytes or -1 for default pointer size based upon datatype manager
        @param dtm data-type manager whose data organization should be used (highly recommended, may be null)
        @param componentOffset signed component offset setting value (see {@link ComponentOffsetSettingsDefinition}
        """
        ...

    @overload
    def __init__(self, typeDefName: unicode, referencedDataType: ghidra.program.model.data.DataType, pointerSize: int, dtm: ghidra.program.model.data.DataTypeManager, space: ghidra.program.model.address.AddressSpace):
        """
        Constructs a pointer-typedef which dereferences into a specific address space.
        @param typeDefName name of this pointer-typedef or null to use auto-named typedef.
        @param referencedDataType data type this pointer-typedef points to or null
        @param pointerSize pointer size in bytes or -1 for default pointer size based upon specified 
         address space and datatype manager
        @param dtm data-type manager whose data organization should be used (highly recommended, may be null)
        @param space address space to be used when dereferencing pointer offset
        """
        ...

    @overload
    def __init__(self, typeDefName: unicode, referencedDataType: ghidra.program.model.data.DataType, pointerSize: int, dtm: ghidra.program.model.data.DataTypeManager, type: ghidra.program.model.data.PointerType):
        """
        Constructs a pointer-typedef of a specific type
        @param typeDefName name of this pointer-typedef or null to use auto-named typedef.
        @param referencedDataType data type this pointer-typedef points to or null
        @param pointerSize pointer size in bytes or -1 for default pointer size based upon datatype manager
        @param dtm data-type manager whose data organization should be used (highly recommended, may be null)
        @param type pointer type (IBO, RELATIVE, FILE_OFFSET)
        """
        ...



    def addParent(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def clone(self, dtm: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.PointerTypedef: ...

    def copy(self, dtm: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.PointerTypedef: ...

    def dataTypeAlignmentChanged(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeDeleted(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeNameChanged(self, dt: ghidra.program.model.data.DataType, oldName: unicode) -> None: ...

    def dataTypeReplaced(self, oldDt: ghidra.program.model.data.DataType, newDt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeSizeChanged(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dependsOn(self, dt: ghidra.program.model.data.DataType) -> bool: ...

    def enableAutoNaming(self) -> None: ...

    def encodeRepresentation(self, repr: unicode, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> List[int]: ...

    def encodeValue(self, value: object, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> List[int]: ...

    def equals(self, obj: object) -> bool: ...

    def getAlignedLength(self) -> int: ...

    def getAlignment(self) -> int: ...

    def getBaseDataType(self) -> ghidra.program.model.data.DataType: ...

    def getCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataOrganization(self) -> ghidra.program.model.data.DataOrganization: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager:
        """
        @see ghidra.program.model.data.DataType#getDataTypeManager()
        """
        ...

    def getDataTypePath(self) -> ghidra.program.model.data.DataTypePath: ...

    def getDefaultAbbreviatedLabelPrefix(self) -> unicode: ...

    @overload
    def getDefaultLabelPrefix(self) -> unicode: ...

    @overload
    def getDefaultLabelPrefix(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, len: int, options: ghidra.program.model.data.DataTypeDisplayOptions) -> unicode: ...

    def getDefaultOffcutLabelPrefix(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, len: int, options: ghidra.program.model.data.DataTypeDisplayOptions, offcutLength: int) -> unicode: ...

    def getDefaultSettings(self) -> ghidra.docking.settings.Settings: ...

    def getDescription(self) -> unicode: ...

    def getDisplayName(self) -> unicode: ...

    def getDocs(self) -> java.net.URL: ...

    def getLastChangeTime(self) -> long: ...

    def getLastChangeTimeInSourceArchive(self) -> long: ...

    def getLength(self) -> int: ...

    def getMnemonic(self, settings: ghidra.docking.settings.Settings) -> unicode: ...

    def getName(self) -> unicode: ...

    def getParents(self) -> java.util.Collection: ...

    def getPathName(self) -> unicode: ...

    def getRepresentation(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> unicode: ...

    def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def getSourceArchive(self) -> ghidra.program.model.data.SourceArchive: ...

    def getTypeDefSettingsDefinitions(self) -> List[ghidra.program.model.data.TypeDefSettingsDefinition]: ...

    def getUniversalID(self) -> ghidra.util.UniversalID: ...

    def getValue(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> object: ...

    def getValueClass(self, settings: ghidra.docking.settings.Settings) -> java.lang.Class: ...

    def hasLanguageDependantLength(self) -> bool: ...

    def hasSameTypeDefSettings(self, __a0: ghidra.program.model.data.TypeDef) -> bool: ...

    def hashCode(self) -> int: ...

    def isAutoNamed(self) -> bool: ...

    def isDeleted(self) -> bool: ...

    def isEncodable(self) -> bool: ...

    def isEquivalent(self, obj: ghidra.program.model.data.DataType) -> bool: ...

    def isNotYetDefined(self) -> bool: ...

    def isPointer(self) -> bool: ...

    def isZeroLength(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeParent(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def replaceWith(self, dataType: ghidra.program.model.data.DataType) -> None: ...

    def setCategoryPath(self, path: ghidra.program.model.data.CategoryPath) -> None: ...

    def setDescription(self, description: unicode) -> None:
        """
        Sets a String briefly describing this DataType.
         <br>If a data type that extends this class wants to allow the description to be changed,
         then it must override this method.
        @param description a one-liner describing this DataType.
        @throws UnsupportedOperationException if the description is not allowed to be set for this data type.
        """
        ...

    def setLastChangeTime(self, lastChangeTime: long) -> None: ...

    def setLastChangeTimeInSourceArchive(self, lastChangeTimeInSourceArchive: long) -> None: ...

    def setName(self, name: unicode) -> None: ...

    def setNameAndCategory(self, path: ghidra.program.model.data.CategoryPath, name: unicode) -> None: ...

    def setSourceArchive(self, archive: ghidra.program.model.data.SourceArchive) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alignedLength(self) -> int: ...

    @property
    def autoNamed(self) -> bool: ...

    @property
    def baseDataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def defaultSettings(self) -> ghidra.docking.settings.Settings: ...

    @property
    def description(self) -> unicode: ...

    @description.setter
    def description(self, value: unicode) -> None: ...

    @property
    def length(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def settingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    @property
    def typeDefSettingsDefinitions(self) -> List[ghidra.program.model.data.TypeDefSettingsDefinition]: ...

    @property
    def universalID(self) -> ghidra.util.UniversalID: ...