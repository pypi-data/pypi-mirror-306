from typing import List
from typing import overload
import ghidra.docking.settings
import ghidra.program.model.data
import ghidra.program.model.mem
import ghidra.util
import java.lang
import java.net
import java.util


class TypedefDataType(ghidra.program.model.data.GenericDataType, ghidra.program.model.data.TypeDef):
    """
    Basic implementation for the typedef dataType.
 
     NOTE: Settings are immutable when a DataTypeManager has not been specified (i.e., null).
    """





    @overload
    def __init__(self, name: unicode, dt: ghidra.program.model.data.DataType):
        """
        Construct a new typedef within the root category
        @param name name of this typedef
        @param dt data type that is being typedef'ed (may not be null)
        """
        ...

    @overload
    def __init__(self, path: ghidra.program.model.data.CategoryPath, name: unicode, dt: ghidra.program.model.data.DataType):
        """
        Construct a new typedef.
        @param path category path for this datatype
        @param name name of this typedef
        @param dt data type that is being typedef'ed (may not be null)
        """
        ...

    @overload
    def __init__(self, path: ghidra.program.model.data.CategoryPath, name: unicode, dt: ghidra.program.model.data.DataType, dtm: ghidra.program.model.data.DataTypeManager):
        """
        Construct a new typedef.
        @param path category path for this datatype
        @param name name of this typedef
        @param dt data type that is being typedef'ed (may not be null)
        @param dtm the data type manager associated with this data type. This can be null.
        """
        ...

    @overload
    def __init__(self, path: ghidra.program.model.data.CategoryPath, name: unicode, dt: ghidra.program.model.data.DataType, universalID: ghidra.util.UniversalID, sourceArchive: ghidra.program.model.data.SourceArchive, lastChangeTime: long, lastChangeTimeInSourceArchive: long, dtm: ghidra.program.model.data.DataTypeManager):
        """
        Construct a new typedef.
        @param path category path for this datatype
        @param name name of this typedef
        @param dt data type that is being typedef'ed (may not be null)
        @param universalID the id for the data type
        @param sourceArchive the source archive for this data type
        @param lastChangeTime the last time this data type was changed
        @param lastChangeTimeInSourceArchive the last time this data type was changed in
         its source archive.
        @param dtm the data type manager associated with this data type. This can be null.
        """
        ...



    def addParent(self, dt: ghidra.program.model.data.DataType) -> None: ...

    @overload
    def clone(self, dtm: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.TypedefDataType: ...

    @overload
    @staticmethod
    def clone(typedef: ghidra.program.model.data.TypeDef, dtm: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.TypeDef: ...

    @overload
    def copy(self, dtm: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.TypedefDataType: ...

    @overload
    @staticmethod
    def copy(typedef: ghidra.program.model.data.TypeDef, dtm: ghidra.program.model.data.DataTypeManager) -> ghidra.program.model.data.TypedefDataType: ...

    @staticmethod
    def copyTypeDefSettings(src: ghidra.program.model.data.TypeDef, dest: ghidra.program.model.data.TypeDef, clearBeforeCopy: bool) -> None:
        """
        Copy all default settings , which correspond to a TypeDefSettingsDefinition,
         from the specified src TypeDef to the specified dest TypeDef.
        @param src settings source TypeDef
        @param dest settings destination TypeDef
        @param clearBeforeCopy if true dest default settings will be cleared before copy performed
        """
        ...

    def dataTypeAlignmentChanged(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeDeleted(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeNameChanged(self, dt: ghidra.program.model.data.DataType, oldName: unicode) -> None: ...

    def dataTypeReplaced(self, oldDt: ghidra.program.model.data.DataType, newDt: ghidra.program.model.data.DataType) -> None: ...

    def dataTypeSizeChanged(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def dependsOn(self, dt: ghidra.program.model.data.DataType) -> bool: ...

    def enableAutoNaming(self) -> None: ...

    def encodeRepresentation(self, repr: unicode, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> List[int]: ...

    def encodeValue(self, value: object, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> List[int]: ...

    def equals(self, obj: object) -> bool: ...

    @staticmethod
    def generateTypedefName(modelType: ghidra.program.model.data.TypeDef) -> unicode:
        """
        Generate a name for the typedef based upon its current {@link TypeDefSettingsDefinition} settings.
        @param modelType model typedef from which name should be derived
        @return generated typedef auto-name with attribute specification
        """
        ...

    def getAlignedLength(self) -> int: ...

    def getAlignment(self) -> int: ...

    def getBaseDataType(self) -> ghidra.program.model.data.DataType: ...

    def getCategoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    def getClass(self) -> java.lang.Class: ...

    def getDataOrganization(self) -> ghidra.program.model.data.DataOrganization: ...

    def getDataType(self) -> ghidra.program.model.data.DataType: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager:
        """
        @see ghidra.program.model.data.DataType#getDataTypeManager()
        """
        ...

    def getDataTypePath(self) -> ghidra.program.model.data.DataTypePath: ...

    def getDefaultAbbreviatedLabelPrefix(self) -> unicode: ...

    @overload
    def getDefaultLabelPrefix(self) -> unicode: ...

    @overload
    def getDefaultLabelPrefix(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, len: int, options: ghidra.program.model.data.DataTypeDisplayOptions) -> unicode: ...

    def getDefaultOffcutLabelPrefix(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, len: int, options: ghidra.program.model.data.DataTypeDisplayOptions, offcutLength: int) -> unicode: ...

    def getDefaultSettings(self) -> ghidra.docking.settings.Settings: ...

    def getDescription(self) -> unicode: ...

    def getDisplayName(self) -> unicode: ...

    def getDocs(self) -> java.net.URL: ...

    def getLastChangeTime(self) -> long: ...

    def getLastChangeTimeInSourceArchive(self) -> long: ...

    def getLength(self) -> int: ...

    def getMnemonic(self, settings: ghidra.docking.settings.Settings) -> unicode: ...

    def getName(self) -> unicode: ...

    def getParents(self) -> java.util.Collection: ...

    def getPathName(self) -> unicode: ...

    def getRepresentation(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> unicode: ...

    def getSettingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def getSourceArchive(self) -> ghidra.program.model.data.SourceArchive: ...

    def getTypeDefSettingsDefinitions(self) -> List[ghidra.program.model.data.TypeDefSettingsDefinition]: ...

    def getUniversalID(self) -> ghidra.util.UniversalID: ...

    def getValue(self, buf: ghidra.program.model.mem.MemBuffer, settings: ghidra.docking.settings.Settings, length: int) -> object: ...

    def getValueClass(self, settings: ghidra.docking.settings.Settings) -> java.lang.Class: ...

    def hasLanguageDependantLength(self) -> bool: ...

    def hasSameTypeDefSettings(self, __a0: ghidra.program.model.data.TypeDef) -> bool: ...

    def hashCode(self) -> int: ...

    def isAutoNamed(self) -> bool: ...

    def isDeleted(self) -> bool: ...

    def isEncodable(self) -> bool: ...

    def isEquivalent(self, obj: ghidra.program.model.data.DataType) -> bool: ...

    def isNotYetDefined(self) -> bool: ...

    def isPointer(self) -> bool: ...

    def isZeroLength(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeParent(self, dt: ghidra.program.model.data.DataType) -> None: ...

    def replaceWith(self, dataType: ghidra.program.model.data.DataType) -> None: ...

    def setCategoryPath(self, path: ghidra.program.model.data.CategoryPath) -> None: ...

    def setDescription(self, description: unicode) -> None:
        """
        Sets a String briefly describing this DataType.
         <br>If a data type that extends this class wants to allow the description to be changed,
         then it must override this method.
        @param description a one-liner describing this DataType.
        @throws UnsupportedOperationException if the description is not allowed to be set for this data type.
        """
        ...

    def setLastChangeTime(self, lastChangeTime: long) -> None: ...

    def setLastChangeTimeInSourceArchive(self, lastChangeTimeInSourceArchive: long) -> None: ...

    def setName(self, name: unicode) -> None: ...

    def setNameAndCategory(self, path: ghidra.program.model.data.CategoryPath, name: unicode) -> None: ...

    def setSourceArchive(self, archive: ghidra.program.model.data.SourceArchive) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def alignedLength(self) -> int: ...

    @property
    def autoNamed(self) -> bool: ...

    @property
    def baseDataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def categoryPath(self) -> ghidra.program.model.data.CategoryPath: ...

    @categoryPath.setter
    def categoryPath(self, value: ghidra.program.model.data.CategoryPath) -> None: ...

    @property
    def dataType(self) -> ghidra.program.model.data.DataType: ...

    @property
    def defaultAbbreviatedLabelPrefix(self) -> unicode: ...

    @property
    def defaultLabelPrefix(self) -> unicode: ...

    @property
    def defaultSettings(self) -> ghidra.docking.settings.Settings: ...

    @property
    def deleted(self) -> bool: ...

    @property
    def description(self) -> unicode: ...

    @description.setter
    def description(self, value: unicode) -> None: ...

    @property
    def length(self) -> int: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def settingsDefinitions(self) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    @property
    def typeDefSettingsDefinitions(self) -> List[ghidra.program.model.data.TypeDefSettingsDefinition]: ...

    @property
    def zeroLength(self) -> bool: ...