from typing import List
from typing import overload
import ghidra.docking.settings
import ghidra.program.model.data
import java.lang
import java.util.function


class ComponentOffsetSettingsDefinition(object, ghidra.docking.settings.NumberSettingsDefinition, ghidra.program.model.data.TypeDefSettingsDefinition):
    DEF: ghidra.program.model.data.ComponentOffsetSettingsDefinition







    def allowNegativeValue(self) -> bool: ...

    def clear(self, settings: ghidra.docking.settings.Settings) -> None: ...

    @staticmethod
    def concat(__a0: List[ghidra.docking.settings.SettingsDefinition], __a1: List[ghidra.docking.settings.SettingsDefinition]) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def copySetting(self, srcSettings: ghidra.docking.settings.Settings, destSettings: ghidra.docking.settings.Settings) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def filterSettingsDefinitions(__a0: List[ghidra.docking.settings.SettingsDefinition], __a1: java.util.function.Predicate) -> List[ghidra.docking.settings.SettingsDefinition]: ...

    def getAttributeSpecification(self, settings: ghidra.docking.settings.Settings) -> unicode: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getMaxValue(self) -> long: ...

    def getName(self) -> unicode: ...

    def getStorageKey(self) -> unicode: ...

    def getValue(self, settings: ghidra.docking.settings.Settings) -> long: ...

    def getValueString(self, __a0: ghidra.docking.settings.Settings) -> unicode: ...

    def hasSameValue(self, __a0: ghidra.docking.settings.Settings, __a1: ghidra.docking.settings.Settings) -> bool: ...

    def hasValue(self, settings: ghidra.docking.settings.Settings) -> bool: ...

    def hashCode(self) -> int: ...

    def isHexModePreferred(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setValue(self, settings: ghidra.docking.settings.Settings, value: long) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def description(self) -> unicode: ...

    @property
    def hexModePreferred(self) -> bool: ...

    @property
    def maxValue(self) -> long: ...

    @property
    def name(self) -> unicode: ...

    @property
    def storageKey(self) -> unicode: ...