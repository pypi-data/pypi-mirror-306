from typing import List
from typing import overload
import generic.stl
import ghidra.app.plugin.processors.sleigh.template
import ghidra.pcodeCPort.address
import ghidra.pcodeCPort.opcodes
import ghidra.pcodeCPort.pcoderaw
import ghidra.pcodeCPort.semantics
import ghidra.pcodeCPort.sleighbase
import ghidra.pcodeCPort.slgh_compile
import ghidra.pcodeCPort.slghsymbol
import ghidra.pcodeCPort.space
import ghidra.program.model.pcode
import ghidra.sleigh.grammar
import java.io
import java.lang


class PcodeParser(ghidra.pcodeCPort.slgh_compile.PcodeCompile):
    """
    This class is intended to parse p-code snippets, typically from compiler specification files or
     extensions. This is outside the normal SLEIGH compilation process, and the parser is built on top
     of an existing SleighLanguage.
    """

    noplist: generic.stl.VectorSTL




    class PcodeTranslate(ghidra.pcodeCPort.sleighbase.SleighBase):




        def __init__(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: long): ...



        def addSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: ghidra.pcodeCPort.space.AddrSpace, __a2: long, __a3: int) -> None: ...

        def assignShortcut(self, __a0: ghidra.pcodeCPort.space.spacetype) -> int: ...

        def createConstFromSpace(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> ghidra.pcodeCPort.address.Address: ...

        def dispose(self) -> None: ...

        def encode(self, __a0: ghidra.program.model.pcode.Encoder) -> None: ...

        def equals(self, __a0: object) -> bool: ...

        @overload
        def findSymbol(self, __a0: int) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

        @overload
        def findSymbol(self, __a0: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

        def getAddrSize(self) -> int: ...

        def getClass(self) -> java.lang.Class: ...

        def getConstant(self, __a0: long) -> ghidra.pcodeCPort.address.Address: ...

        def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getDefaultSize(self) -> int: ...

        def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getFspecSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getIopSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getNextSpaceInOrder(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getRegister(self, __a0: unicode) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

        def getRegisterName(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: long, __a2: int) -> unicode: ...

        def getSpace(self, __a0: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getSpaceByName(self, __a0: unicode) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getSpaceByShortcut(self, __a0: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getSpaceBySpacebase(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace, __a1: int) -> ghidra.pcodeCPort.pcoderaw.VarnodeData: ...

        def getStackSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getUniqueBase(self) -> long: ...

        def getUniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

        def getUserOpNames(self, __a0: generic.stl.VectorSTL) -> None: ...

        def hashCode(self) -> int: ...

        def highPtrPossible(self, __a0: ghidra.pcodeCPort.address.Address, __a1: int) -> bool: ...

        def insertSpace(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> None: ...

        def instructionLength(self, __a0: ghidra.pcodeCPort.address.Address) -> int: ...

        def isBigEndian(self) -> bool: ...

        def isInitialized(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def numSpacebase(self, __a0: ghidra.pcodeCPort.space.AddrSpace) -> int: ...

        def numSpaces(self) -> int: ...

        def printAssembly(self, __a0: java.io.PrintStream, __a1: int, __a2: ghidra.pcodeCPort.address.Address) -> int: ...

        def setDefaultSpace(self, __a0: int) -> None: ...

        def setLanguage(self, __a0: unicode) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...



    def __init__(self, language: ghidra.app.plugin.processors.sleigh.SleighLanguage, ubase: long):
        """
        Build parser from an existing SleighLanguage.
        @param language is the existing language
        @param ubase is the starting offset for allocating temporary registers
        """
        ...



    def addOperand(self, loc: ghidra.sleigh.grammar.Location, name: unicode, index: int) -> None:
        """
        Inject a symbol representing an "operand" to the pcode snippet.
 
         <p>
         This puts a placeholder in the resulting template, which gets filled in with the context
         specific storage locations when final p-code is generated
        @param loc is location information for the operand
        @param name of operand symbol
        @param index to use for the placeholder
        """
        ...

    def addSymbol(self, sym: ghidra.pcodeCPort.slghsymbol.SleighSymbol) -> None: ...

    def addressOf(self, __a0: ghidra.pcodeCPort.semantics.VarnodeTpl, __a1: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

    def allocateTemp(self) -> long: ...

    def appendOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: long, __a4: int) -> None: ...

    def assignBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    def buildTemporary(self, __a0: ghidra.sleigh.grammar.Location) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

    def buildTruncatedVarnode(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: int, __a3: int) -> ghidra.pcodeCPort.semantics.VarnodeTpl: ...

    def clearSymbols(self) -> None: ...

    def compilePcode(self, pcodeStatements: unicode, srcFile: unicode, srcLine: int) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl:
        """
        Compile pcode semantic statements.
        @param pcodeStatements is the raw source to parse
        @param srcFile source filename from which pcodeStatements came (
        @param srcLine line number in srcFile corresponding to pcodeStatements
        @return ConstructTpl. A null may be returned or an exception thrown if parsing/compiling
                 fails (see application log for errors).
        @throws SleighException pcode compile error
        """
        ...

    def createBitRange(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.SpecificSymbol, __a2: int, __a3: int) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createCrossBuild(self, where: ghidra.sleigh.grammar.Location, v: ghidra.pcodeCPort.semantics.VarnodeTpl, second: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> generic.stl.VectorSTL: ...

    def createLoad(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createMacroUse(self, location: ghidra.sleigh.grammar.Location, sym: ghidra.pcodeCPort.slghsymbol.MacroSymbol, param: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

    @overload
    def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    @overload
    def createOp(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createOpConst(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: long) -> generic.stl.VectorSTL: ...

    @overload
    def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    @overload
    def createOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    def createOpOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.opcodes.OpCode, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree, __a4: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createOpOutUnary(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl, __a2: ghidra.pcodeCPort.opcodes.OpCode, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createStore(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: ghidra.pcodeCPort.slgh_compile.ExprTree) -> generic.stl.VectorSTL: ...

    def createUserOp(self, __a0: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a1: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def createUserOpNoOut(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.UserOpSymbol, __a2: generic.stl.VectorSTL) -> generic.stl.VectorSTL: ...

    def createVariadic(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.opcodes.OpCode, __a2: generic.stl.VectorSTL) -> ghidra.pcodeCPort.slgh_compile.ExprTree: ...

    def defineLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> ghidra.pcodeCPort.slghsymbol.LabelSymbol: ...

    @staticmethod
    def entry(__a0: unicode, __a1: List[object]) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def fillinZero(self, __a0: ghidra.pcodeCPort.semantics.OpTpl, __a1: generic.stl.VectorSTL) -> None: ...

    def finalNamedSection(self, vec: ghidra.pcodeCPort.slgh_compile.SectionVector, section: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

    def findInternalFunction(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: generic.stl.VectorSTL) -> object: ...

    def findSymbol(self, nm: unicode) -> ghidra.pcodeCPort.slghsymbol.SleighSymbol: ...

    def firstNamedSection(self, main: ghidra.pcodeCPort.semantics.ConstructTpl, sym: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

    def getClass(self) -> java.lang.Class: ...

    def getConstantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getDefaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getErrors(self) -> int: ...

    def getNextTempOffset(self) -> long: ...

    def getSleigh(self) -> ghidra.pcodeCPort.sleighbase.SleighBase: ...

    def getUniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    def getWarnings(self) -> int: ...

    def hashCode(self) -> int: ...

    def isInternalFunction(self, __a0: unicode) -> bool: ...

    def matchSize(self, __a0: int, __a1: ghidra.pcodeCPort.semantics.OpTpl, __a2: bool, __a3: generic.stl.VectorSTL) -> None: ...

    @overload
    def newLocalDefinition(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

    @overload
    def newLocalDefinition(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode, __a2: int) -> None: ...

    @overload
    def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: unicode) -> generic.stl.VectorSTL: ...

    @overload
    def newOutput(self, __a0: ghidra.sleigh.grammar.Location, __a1: bool, __a2: ghidra.pcodeCPort.slgh_compile.ExprTree, __a3: unicode, __a4: int) -> generic.stl.VectorSTL: ...

    def newSectionSymbol(self, where: ghidra.sleigh.grammar.Location, text: unicode) -> ghidra.pcodeCPort.slghsymbol.SectionSymbol: ...

    def nextNamedSection(self, vec: ghidra.pcodeCPort.slgh_compile.SectionVector, section: ghidra.pcodeCPort.semantics.ConstructTpl, sym: ghidra.pcodeCPort.slghsymbol.SectionSymbol) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def placeLabel(self, __a0: ghidra.sleigh.grammar.Location, __a1: ghidra.pcodeCPort.slghsymbol.LabelSymbol) -> generic.stl.VectorSTL: ...

    def propagateSize(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl) -> bool: ...

    def recordNop(self, location: ghidra.sleigh.grammar.Location) -> None: ...

    def reportError(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

    def reportWarning(self, __a0: ghidra.sleigh.grammar.Location, __a1: unicode) -> None: ...

    def resetLabelCount(self) -> None: ...

    def setEnforceLocalKey(self, __a0: bool) -> None: ...

    def setResultStarVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.slgh_compile.StarQuality, __a2: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

    def setResultVarnode(self, __a0: ghidra.pcodeCPort.semantics.ConstructTpl, __a1: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.pcodeCPort.semantics.ConstructTpl: ...

    def standaloneSection(self, main: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.pcodeCPort.slgh_compile.SectionVector: ...

    def toString(self) -> unicode: ...

    def translateConstTpl(self, constTpl: ghidra.pcodeCPort.semantics.ConstTpl) -> ghidra.app.plugin.processors.sleigh.template.ConstTpl: ...

    def translateConstructTpl(self, constructTpl: ghidra.pcodeCPort.semantics.ConstructTpl) -> ghidra.app.plugin.processors.sleigh.template.ConstructTpl: ...

    def translateHandleTpl(self, handleTpl: ghidra.pcodeCPort.semantics.HandleTpl) -> ghidra.app.plugin.processors.sleigh.template.HandleTpl: ...

    def translateOpTpl(self, opTpl: ghidra.pcodeCPort.semantics.OpTpl) -> ghidra.app.plugin.processors.sleigh.template.OpTpl: ...

    def translateVarnodeTpl(self, varnodeTpl: ghidra.pcodeCPort.semantics.VarnodeTpl) -> ghidra.app.plugin.processors.sleigh.template.VarnodeTpl: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def constantSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    @property
    def defaultSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...

    @property
    def nextTempOffset(self) -> long: ...

    @property
    def sleigh(self) -> ghidra.pcodeCPort.sleighbase.SleighBase: ...

    @property
    def uniqueSpace(self) -> ghidra.pcodeCPort.space.AddrSpace: ...