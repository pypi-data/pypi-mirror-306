diff --git a/src/river_rrcf/_vendor/rrcf/__init__.py b/src/river_rrcf/_vendor/rrcf/__init__.py
index b8af904..1f69b34 100644
--- a/src/river_rrcf/_vendor/rrcf/__init__.py
+++ b/src/river_rrcf/_vendor/rrcf/__init__.py
@@ -1,5 +1,5 @@
-from rrcf.rrcf import *
-from rrcf.shingle import shingle
-import pkg_resources
+from .rrcf import Branch, Leaf, RCTree
+from .shingle import shingle

-__version__ = pkg_resources.get_distribution('rrcf').version
+__version__ = "0.4.4"
+__all__ = ["Branch", "Leaf", "RCTree", "shingle"]
diff --git a/src/river_rrcf/_vendor/rrcf/rrcf.py b/src/river_rrcf/_vendor/rrcf/rrcf.py
index 3476739..ebda83e 100644
--- a/src/river_rrcf/_vendor/rrcf/rrcf.py
+++ b/src/river_rrcf/_vendor/rrcf/rrcf.py
@@ -65,15 +65,14 @@ class RCTree:
     >>> tree.forget_point(100)
     """

-    def __init__(self, X=None, index_labels=None, precision=9,
-                 random_state=None):
+    def __init__(self, X=None, index_labels=None, precision=9, random_state=None):
         # Random number generation with provided seed
         if isinstance(random_state, int):
-            self.rng = np.random.RandomState(random_state)
-        elif isinstance(random_state, np.random.RandomState):
+            self.rng = np.random.default_rng(random_state)
+        elif isinstance(random_state, np.random.Generator):
             self.rng = random_state
         else:
-            self.rng = np.random
+            self.rng = np.random.default_rng()
         # Initialize dict for leaves
         self.leaves = {}
         # Initialize tree root
@@ -87,8 +86,7 @@ class RCTree:
                 index_labels = np.arange(X.shape[0], dtype=int)
             self.index_labels = index_labels
             # Check for duplicates
-            U, I, N = np.unique(X, return_inverse=True, return_counts=True,
-                                axis=0)
+            U, I, N = np.unique(X, return_inverse=True, return_counts=True, axis=0)
             # If duplicates exist, take unique elements
             if N.max() > 1:
                 n, d = U.shape
@@ -117,7 +115,7 @@ class RCTree:

         def print_push(char):
             nonlocal depth
-            branch_str = ' {}  '.format(char)
+            branch_str = " {}  ".format(char)
             depth += branch_str

         def print_pop():
@@ -128,22 +126,22 @@ class RCTree:
             nonlocal depth
             nonlocal treestr
             if isinstance(node, Leaf):
-                treestr += '({})\n'.format(node.i)
+                treestr += "({})\n".format(node.i)
             elif isinstance(node, Branch):
-                treestr += '{0}{1}\n'.format(chr(9472), '+')
-                treestr += '{0} {1}{2}{2}'.format(depth, chr(9500), chr(9472))
+                treestr += "{0}{1}\n".format(chr(9472), "+")
+                treestr += "{0} {1}{2}{2}".format(depth, chr(9500), chr(9472))
                 print_push(chr(9474))
                 print_tree(node.l)
                 print_pop()
-                treestr += '{0} {1}{2}{2}'.format(depth, chr(9492), chr(9472))
-                print_push(' ')
+                treestr += "{0} {1}{2}{2}".format(depth, chr(9492), chr(9472))
+                print_push(" ")
                 print_tree(node.r)
                 print_pop()

         print_tree(self.root)
         return treestr

-    def _cut(self, X, S, parent=None, side='l'):
+    def _cut(self, X, S, parent=None, side="l"):
         # Find max and min over all d dimensions
         xmax = X[S].max(axis=0)
         xmin = X[S].min(axis=0)
@@ -165,7 +163,7 @@ class RCTree:
             setattr(parent, side, child)
         return S1, S2, child

-    def _mktree(self, X, S, N, I, parent=None, side='root', depth=0):
+    def _mktree(self, X, S, N, I, parent=None, side="root", depth=0):
         # Increment depth as we traverse down
         depth += 1
         # Create a cut according to definition 1
@@ -173,7 +171,7 @@ class RCTree:
         # If S1 does not contain an isolated point...
         if S1.sum() > 1:
             # Recursively construct tree on S1
-            self._mktree(X, S1, N, I, parent=branch, side='l', depth=depth)
+            self._mktree(X, S1, N, I, parent=branch, side="l", depth=depth)
         # Otherwise...
         else:
             # Create a leaf node from isolated point
@@ -195,7 +193,7 @@ class RCTree:
         # If S2 does not contain an isolated point...
         if S2.sum() > 1:
             # Recursively construct tree on S2
-            self._mktree(X, S2, N, I, parent=branch, side='r', depth=depth)
+            self._mktree(X, S2, N, I, parent=branch, side="r", depth=depth)
         # Otherwise...
         else:
             # Create a leaf node from isolated point
@@ -330,7 +328,7 @@ class RCTree:
             # Get leaf from leaves dict
             leaf = self.leaves[index]
         except KeyError:
-            raise KeyError('Leaf must be a key to self.leaves')
+            raise KeyError("Leaf must be a key to self.leaves")
         # If duplicate points exist...
         if leaf.n > 1:
             # Simply decrement the number of points in the leaf and for all branches above
@@ -427,13 +425,12 @@ class RCTree:
             return leaf
         # If leaves already exist in tree, check dimensions of point
         try:
-            assert (point.size == self.ndim)
+            assert point.size == self.ndim
         except ValueError:
-            raise ValueError(
-                "Point must be same dimension as existing points in tree.")
+            raise ValueError("Point must be same dimension as existing points in tree.")
         # Check for existing index in leaves dict
         try:
-            assert (index not in self.leaves)
+            assert index not in self.leaves
         except KeyError:
             raise KeyError("Index already exists in leaves dict.")
         # Check for duplicate points
@@ -453,28 +450,30 @@ class RCTree:
             cut_dimension, cut = self._insert_point_cut(point, bbox)
             if cut <= bbox[0, cut_dimension]:
                 leaf = Leaf(x=point, i=index, d=depth)
-                branch = Branch(q=cut_dimension, p=cut, l=leaf, r=node,
-                                n=(leaf.n + node.n))
+                branch = Branch(
+                    q=cut_dimension, p=cut, l=leaf, r=node, n=(leaf.n + node.n)
+                )
                 break
             elif cut >= bbox[-1, cut_dimension]:
                 leaf = Leaf(x=point, i=index, d=depth)
-                branch = Branch(q=cut_dimension, p=cut, l=node, r=leaf,
-                                n=(leaf.n + node.n))
+                branch = Branch(
+                    q=cut_dimension, p=cut, l=node, r=leaf, n=(leaf.n + node.n)
+                )
                 break
             else:
                 depth += 1
                 if point[node.q] <= node.p:
                     parent = node
                     node = node.l
-                    side = 'l'
+                    side = "l"
                 else:
                     parent = node
                     node = node.r
-                    side = 'r'
+                    side = "r"
         try:
             assert branch is not None
         except:
-            raise AssertionError('Error with program logic: a cut was not found.')
+            raise AssertionError("Error with program logic: a cut was not found.")
         # Set parent of new leaf and old branch
         node.u = branch
         leaf.u = branch
@@ -565,8 +564,7 @@ class RCTree:
             try:
                 leaf = self.leaves[leaf]
             except KeyError:
-                raise KeyError(
-                    'leaf must be a Leaf instance or key to self.leaves')
+                raise KeyError("leaf must be a Leaf instance or key to self.leaves")
         # Handle case where leaf is root
         if leaf is self.root:
             return 0
@@ -610,8 +608,7 @@ class RCTree:
             try:
                 leaf = self.leaves[leaf]
             except KeyError:
-                raise KeyError(
-                    'leaf must be a Leaf instance or key to self.leaves')
+                raise KeyError("leaf must be a Leaf instance or key to self.leaves")
         # Handle case where leaf is root
         if leaf is self.root:
             return 0
@@ -627,13 +624,12 @@ class RCTree:
                 sibling = parent.l
             num_deleted = node.n
             displacement = sibling.n
-            result = (displacement / num_deleted)
+            result = displacement / num_deleted
             results.append(result)
             node = parent
         co_displacement = max(results)
         return co_displacement

-
     def codisp_with_cut_dimension(self, leaf):
         """
         Compute collusive displacement at leaf and the dimension of the cut.
@@ -658,17 +654,16 @@ class RCTree:
         >>> new_point = np.array([4, 4])
         >>> tree.insert_point(new_point, index=100)

-        # Compute collusive displacement with dimension
+        # Compute collusive displacement with dimension
         >>> tree.codisp_with_cut_dimension(100)
-
+
         (31.667, 1)
         """
         if not isinstance(leaf, Leaf):
             try:
                 leaf = self.leaves[leaf]
             except KeyError:
-                raise KeyError(
-                    'leaf must be a Leaf instance or key to self.leaves')
+                raise KeyError("leaf must be a Leaf instance or key to self.leaves")
         # Handle case where leaf is root
         if leaf is self.root:
             return 0
@@ -686,12 +681,12 @@ class RCTree:
                 sibling = parent.l
             num_deleted = node.n
             displacement = sibling.n
-            result = (displacement / num_deleted)
+            result = displacement / num_deleted
             results.append(result)
             cut_dimensions.append(parent.q)
             node = parent
         argmax = np.argmax(results)
-
+
         return results[argmax], cut_dimensions[argmax]

     def get_bbox(self, branch=None):
@@ -815,30 +810,30 @@ class RCTree:
         Recursively serializes tree into a nested dict.
         """
         if isinstance(node, Branch):
-            obj['type'] = 'Branch'
-            obj['q'] = int(node.q)
-            obj['p'] = float(node.p)
-            obj['n'] = int(node.n)
-            obj['b'] = node.b.tolist()
-            obj['l'] = {}
-            obj['r'] = {}
+            obj["type"] = "Branch"
+            obj["q"] = int(node.q)
+            obj["p"] = float(node.p)
+            obj["n"] = int(node.n)
+            obj["b"] = node.b.tolist()
+            obj["l"] = {}
+            obj["r"] = {}
             if node.l:
-                self._serialize(node.l, obj['l'], duplicates)
+                self._serialize(node.l, obj["l"], duplicates)
             if node.r:
-                self._serialize(node.r, obj['r'], duplicates)
+                self._serialize(node.r, obj["r"], duplicates)
         elif isinstance(node, Leaf):
             if isinstance(node.i, np.int64):
                 i = int(node.i)
             else:
                 i = node.i
-            obj['type'] = 'Leaf'
-            obj['i'] = i
-            obj['x'] = node.x.tolist()
-            obj['d'] = int(node.d)
-            obj['n'] = int(node.n)
-            obj['ixs'] = duplicates[node]
+            obj["type"] = "Leaf"
+            obj["i"] = i
+            obj["x"] = node.x.tolist()
+            obj["d"] = int(node.d)
+            obj["n"] = int(node.n)
+            obj["ixs"] = duplicates[node]
         else:
-            raise TypeError('`node` must be Branch or Leaf instance')
+            raise TypeError("`node` must be Branch or Leaf instance")

     def load_dict(self, obj):
         """
@@ -893,31 +888,31 @@ class RCTree:
         # Set number of dimensions based on first leaf
         self.ndim = len(next(iter(leaves.values())).x)

-    def _deserialize(self, obj, node, duplicates, side='l'):
+    def _deserialize(self, obj, node, duplicates, side="l"):
         """
         Recursively deserializes tree from a nested dict.
         """
-        if obj['type'] == 'Branch':
-            q = obj['q']
-            p = obj['p']
-            n = np.int64(obj['n'])
-            b = np.asarray(obj['b'])
+        if obj["type"] == "Branch":
+            q = obj["q"]
+            p = obj["p"]
+            n = np.int64(obj["n"])
+            b = np.asarray(obj["b"])
             branch = Branch(q=q, p=p, n=n, b=b, u=node)
             setattr(node, side, branch)
-            if 'l' in obj:
-                self._deserialize(obj['l'], branch, duplicates, side='l')
-            if 'r' in obj:
-                self._deserialize(obj['r'], branch, duplicates, side='r')
-        elif obj['type'] == 'Leaf':
-            i = obj['i']
-            x = np.asarray(obj['x'])
-            d = obj['d']
-            n = np.int64(obj['n'])
+            if "l" in obj:
+                self._deserialize(obj["l"], branch, duplicates, side="l")
+            if "r" in obj:
+                self._deserialize(obj["r"], branch, duplicates, side="r")
+        elif obj["type"] == "Leaf":
+            i = obj["i"]
+            x = np.asarray(obj["x"])
+            d = obj["d"]
+            n = np.int64(obj["n"])
             leaf = Leaf(i=i, x=x, d=d, n=n, u=node)
             setattr(node, side, leaf)
-            duplicates[leaf] = obj['ixs']
+            duplicates[leaf] = obj["ixs"]
         else:
-            raise TypeError('`type` must be Branch or Leaf')
+            raise TypeError("`type` must be Branch or Leaf")

     @classmethod
     def from_dict(cls, obj):
@@ -964,8 +959,12 @@ class RCTree:
         """
         Compute bbox of node based on bboxes of node's children.
         """
-        bbox = np.vstack([np.minimum(node.l.b[0, :], node.r.b[0, :]),
-                          np.maximum(node.l.b[-1, :], node.r.b[-1, :])])
+        bbox = np.vstack(
+            [
+                np.minimum(node.l.b[0, :], node.r.b[0, :]),
+                np.maximum(node.l.b[-1, :], node.r.b[-1, :]),
+            ]
+        )
         return bbox

     def _get_bbox_top_down(self, node):
@@ -1017,13 +1016,13 @@ class RCTree:
         """
         Primitive function for incrementing the depth attribute of a leaf.
         """
-        x.d += (inc)
+        x.d += inc

     def _accumulate(self, x, accumulator):
         """
         Primitive function for helping to count the number of points in a subtree.
         """
-        accumulator += (x.n)
+        accumulator += x.n

     def _get_nodes(self, x, stack):
         """
@@ -1035,8 +1034,8 @@ class RCTree:
         """
         Primitive function for computing the bbox of a point.
         """
-        lt = (x.x < mins)
-        gt = (x.x > maxes)
+        lt = x.x < mins
+        gt = x.x > maxes
         mins[lt] = x.x[lt]
         maxes[gt] = x.x[gt]

@@ -1049,8 +1048,8 @@ class RCTree:
         node.b = bbox
         node = node.u
         while node:
-            lt = (bbox[0, :] < node.b[0, :])
-            gt = (bbox[-1, :] > node.b[-1, :])
+            lt = bbox[0, :] < node.b[0, :]
+            gt = bbox[-1, :] > node.b[-1, :]
             lt_any = lt.any()
             gt_any = gt.any()
             if lt_any or gt_any:
@@ -1134,7 +1133,8 @@ class Branch:
     n: Number of leaves under branch
     b: Bounding box of points under branch (2 x d)
     """
-    __slots__ = ['q', 'p', 'l', 'r', 'u', 'n', 'b']
+
+    __slots__ = ["q", "p", "l", "r", "u", "n", "b"]

     def __init__(self, q, p, l=None, r=None, u=None, n=0, b=None):
         self.l = l
@@ -1162,7 +1162,8 @@ class Leaf:
     n: Number of points in leaf (1 if no duplicates)
     b: Bounding box of point (1 x d)
     """
-    __slots__ = ['i', 'd', 'u', 'x', 'n', 'b']
+
+    __slots__ = ["i", "d", "u", "x", "n", "b"]

     def __init__(self, i, d=None, u=None, x=None, n=1):
         self.u = u
diff --git a/src/river_rrcf/_vendor/rrcf/shingle.py b/src/river_rrcf/_vendor/rrcf/shingle.py
index cd31c53..89bc5de 100644
--- a/src/river_rrcf/_vendor/rrcf/shingle.py
+++ b/src/river_rrcf/_vendor/rrcf/shingle.py
@@ -1,4 +1,5 @@
 from collections import deque
+
 import numpy as np


@@ -17,7 +18,7 @@ def shingle(sequence, size):
     init = (next(iterator) for _ in range(size))
     window = deque(init, maxlen=size)
     if len(window) < size:
-        raise IndexError('Sequence smaller than window size')
+        raise IndexError("Sequence smaller than window size")
     yield np.asarray(window)
     for elem in iterator:
         window.append(elem)
