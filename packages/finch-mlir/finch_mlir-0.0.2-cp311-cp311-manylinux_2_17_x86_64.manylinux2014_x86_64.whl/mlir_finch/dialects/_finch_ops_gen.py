
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "finch"

@_ods_cext.register_operation(_Dialect)
class AccessOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.access"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, input, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(idx))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def access(res, input, idx, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(AccessOp(res=res, input=input, idx=idx, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class AssignOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.assign"

  _ODS_REGIONS = (0, True)

  def __init__(self, out, in_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(out))
    operands.append(_get_op_result_or_value(in_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def out(self):
    return self.operation.operands[0]

  @builtins.property
  def in_(self):
    return self.operation.operands[1]

def assign(out, in_, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(AssignOp(out=out, in_=in_, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class DefineLevelOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.definelevel"

  _ODS_REGIONS = (1, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

  @builtins.property
  def def_(self):
    return self.regions[0]

def definelevel(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(DefineLevelOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class FooOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.foo"

  _ODS_REGIONS = (0, True)

  def __init__(self, input, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend([operands[0].type] * 1)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def foo(input, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(FooOp(input=input, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class GetLevelOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.getlevel"

  _ODS_REGIONS = (0, True)

  def __init__(self, level, pos, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(level))
    operands.append(_get_op_result_or_value(pos))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def level(self):
    return self.operation.operands[0]

  @builtins.property
  def pos(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def getlevel(level, pos, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(GetLevelOp(level=level, pos=pos, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class LookupOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.lookup"

  _ODS_REGIONS = (1, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def lookup(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(LookupOp(res=res, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class NextLevelOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.nextlevel"

  _ODS_REGIONS = (0, True)

  def __init__(self, pos, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(pos))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def pos(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def nextlevel(pos, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(NextLevelOp(pos=pos, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ReturnOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.return"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(result))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def result(self):
    return self.operation.operands[0]

def return_(result, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(ReturnOp(result=result, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RunOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.run"

  _ODS_REGIONS = (0, True)

  def __init__(self, val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(val))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def run(val, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(RunOp(val=val, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SequenceOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.sequence"

  _ODS_REGIONS = (0, True)

  def __init__(self, split, val1, val2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(split))
    operands.append(_get_op_result_or_value(val1))
    operands.append(_get_op_result_or_value(val2))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def split(self):
    return self.operation.operands[0]

  @builtins.property
  def val1(self):
    return self.operation.operands[1]

  @builtins.property
  def val2(self):
    return self.operation.operands[2]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def sequence(split, val1, val2, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(SequenceOp(split=split, val1=val1, val2=val2, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class StepperOp(_ods_ir.OpView):
  OPERATION_NAME = "finch.stepper"

  _ODS_REGIONS = (4, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def res(self):
    return self.operation.results[0]

  @builtins.property
  def seek(self):
    return self.regions[0]

  @builtins.property
  def stop(self):
    return self.regions[1]

  @builtins.property
  def body(self):
    return self.regions[2]

  @builtins.property
  def next(self):
    return self.regions[3]

def stepper(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(StepperOp(res=res, loc=loc, ip=ip))
