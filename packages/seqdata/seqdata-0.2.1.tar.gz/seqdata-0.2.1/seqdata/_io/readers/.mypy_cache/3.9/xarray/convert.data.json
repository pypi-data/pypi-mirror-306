{".class": "MypyFile", "_fullname": "xarray.convert", "future_import_flags": [], "is_partial_stub_package": false, "is_stub": false, "names": {".class": "SymbolTable", "CFDatetimeCoder": {".class": "SymbolTableNode", "cross_ref": "xarray.coding.times.CFDatetimeCoder", "kind": "Gdef"}, "CFTimedeltaCoder": {".class": "SymbolTableNode", "cross_ref": "xarray.coding.times.CFTimedeltaCoder", "kind": "Gdef"}, "Counter": {".class": "SymbolTableNode", "cross_ref": "collections.Counter", "kind": "Gdef"}, "DataArray": {".class": "SymbolTableNode", "cross_ref": "xarray.core.dataarray.DataArray", "kind": "Gdef"}, "__annotations__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "xarray.convert.__annotations__", "name": "__annotations__", "type": {".class": "Instance", "args": ["builtins.str", {".class": "AnyType", "missing_import_name": null, "source_any": null, "type_of_any": 6}], "type_ref": "builtins.dict"}}}, "__doc__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "xarray.convert.__doc__", "name": "__doc__", "type": "builtins.str"}}, "__file__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "xarray.convert.__file__", "name": "__file__", "type": "builtins.str"}}, "__name__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "xarray.convert.__name__", "name": "__name__", "type": "builtins.str"}}, "__package__": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_ready"], "fullname": "xarray.convert.__package__", "name": "__package__", "type": "builtins.str"}}, "_filter_attrs": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0, 0], "arg_names": ["attrs", "ignored_attrs"], "flags": [], "fullname": "xarray.convert._filter_attrs", "name": "_filter_attrs", "type": null}}, "_get_iris_args": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["attrs"], "flags": [], "fullname": "xarray.convert._get_iris_args", "name": "_get_iris_args", "type": null}}, "_iris_cell_methods_to_str": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["cell_methods_obj"], "flags": [], "fullname": "xarray.convert._iris_cell_methods_to_str", "name": "_iris_cell_methods_to_str", "type": null}}, "_iris_obj_to_attrs": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["obj"], "flags": [], "fullname": "xarray.convert._iris_obj_to_attrs", "name": "_iris_obj_to_attrs", "type": null}}, "_name": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0, 1], "arg_names": ["iris_obj", "default"], "flags": [], "fullname": "xarray.convert._name", "name": "_name", "type": null}}, "_pick_attrs": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0, 0], "arg_names": ["attrs", "keys"], "flags": [], "fullname": "xarray.convert._pick_attrs", "name": "_pick_attrs", "type": null}}, "cdms2_ignored_attrs": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["has_explicit_value"], "fullname": "xarray.convert.cdms2_ignored_attrs", "name": "cdms2_ignored_attrs", "type": {".class": "Instance", "args": ["builtins.str"], "type_ref": "builtins.set"}}}, "cell_methods_strings": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["has_explicit_value"], "fullname": "xarray.convert.cell_methods_strings", "name": "cell_methods_strings", "type": {".class": "Instance", "args": ["builtins.str"], "type_ref": "builtins.set"}}}, "dask_array_type": {".class": "SymbolTableNode", "cross_ref": "xarray.core.pycompat.dask_array_type", "kind": "Gdef"}, "decode_cf": {".class": "SymbolTableNode", "cross_ref": "xarray.conventions.decode_cf", "kind": "Gdef"}, "duck_array_ops": {".class": "SymbolTableNode", "cross_ref": "xarray.core.duck_array_ops", "kind": "Gdef"}, "encode": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["var"], "flags": [], "fullname": "xarray.convert.encode", "name": "encode", "type": null}}, "from_cdms2": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["variable"], "flags": [], "fullname": "xarray.convert.from_cdms2", "name": "from_cdms2", "type": null}}, "from_iris": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["cube"], "flags": [], "fullname": "xarray.convert.from_iris", "name": "from_iris", "type": null}}, "get_fill_value": {".class": "SymbolTableNode", "cross_ref": "xarray.core.dtypes.get_fill_value", "kind": "Gdef"}, "iris_forbidden_keys": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["has_explicit_value"], "fullname": "xarray.convert.iris_forbidden_keys", "name": "iris_forbidden_keys", "type": {".class": "Instance", "args": ["builtins.str"], "type_ref": "builtins.set"}}}, "np": {".class": "SymbolTableNode", "cross_ref": "numpy", "kind": "Gdef"}, "pd": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "Var", "flags": ["is_suppressed_import", "is_ready"], "fullname": "xarray.convert.pd", "name": "pd", "type": {".class": "AnyType", "missing_import_name": "xarray.convert.pd", "source_any": null, "type_of_any": 3}}}, "to_cdms2": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0, 1], "arg_names": ["dataarray", "copy"], "flags": [], "fullname": "xarray.convert.to_cdms2", "name": "to_cdms2", "type": null}}, "to_iris": {".class": "SymbolTableNode", "kind": "Gdef", "node": {".class": "FuncDef", "arg_kinds": [0], "arg_names": ["dataarray"], "flags": [], "fullname": "xarray.convert.to_iris", "name": "to_iris", "type": null}}}, "path": "/cellar/users/dlaub/miniconda3/envs/drugcell_transfer/lib/python3.9/site-packages/xarray/convert.py"}