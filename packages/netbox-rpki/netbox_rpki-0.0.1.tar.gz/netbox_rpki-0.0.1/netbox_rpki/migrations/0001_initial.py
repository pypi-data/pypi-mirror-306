# Generated by Django 5.0.9 on 2024-10-30 23:43

import django.db.models.deletion
import taggit.managers
import utilities.json
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('extras', '0121_customfield_related_object_filter'),
        ('ipam', '0070_vlangroup_vlan_id_ranges'),
    ]

    operations = [
        migrations.CreateModel(
            name='RpkiOrganization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('orgId', models.CharField(max_length=200)),
                ('orgName', models.CharField(max_length=200)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('orgName',),
            },
        ),
        migrations.CreateModel(
            name='RpkiCertificate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('issuer', models.CharField(max_length=200)),
                ('subject', models.CharField(max_length=200)),
                ('serial', models.CharField(max_length=200)),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
                ('rpkiOrg', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='netbox_rpki.rpkiorganization')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RpkiRoa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('name', models.CharField(max_length=200)),
                ('originAs', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asns', to='ipam.asn')),
                ('signedBy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roas', to='netbox_rpki.rpkicertificate')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RpkiRoaPrefices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, null=True)),
                ('custom_field_data', models.JSONField(blank=True, default=dict, encoder=utilities.json.CustomFieldJSONEncoder)),
                ('prefix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roausage', to='ipam.prefix')),
                ('roaName', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prefixes', to='netbox_rpki.rpkiroa')),
                ('tags', taggit.managers.TaggableManager(through='extras.TaggedItem', to='extras.Tag')),
            ],
            options={
                'ordering': ('prefix',),
            },
        ),
    ]
