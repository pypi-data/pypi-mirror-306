# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: modules/drivers/lidar/lslidar/proto/config.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from apollo_modules.modules.drivers.lidar.lslidar.proto import lslidar_pb2 as modules_dot_drivers_dot_lidar_dot_lslidar_dot_proto_dot_lslidar__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n0modules/drivers/lidar/lslidar/proto/config.proto\x12\x16\x61pollo.drivers.lslidar\x1a\x31modules/drivers/lidar/lslidar/proto/lslidar.proto\"\xd2\x05\n\x06\x43onfig\x12,\n\x05model\x18\x01 \x01(\x0e\x32\x1d.apollo.drivers.lslidar.Model\x12 \n\tdevice_ip\x18\x02 \x01(\t:\r192.168.1.200\x12\x11\n\tmsop_port\x18\x03 \x01(\r\x12\x12\n\ndifop_port\x18\x04 \x01(\r\x12\x13\n\x0breturn_mode\x18\x05 \x01(\r\x12\x13\n\x0b\x64\x65gree_mode\x18\x06 \x01(\r\x12\x15\n\rdistance_unit\x18\x07 \x01(\x02\x12\x1c\n\x14time_synchronization\x18\x08 \x01(\x08\x12\x15\n\radd_multicast\x18\t \x01(\x08\x12\x1b\n\x08group_ip\x18\n \x01(\t:\t224.1.1.2\x12\x0b\n\x03rpm\x18\x0b \x01(\r\x12\x1c\n\x14\x63onvert_channel_name\x18\x0c \x01(\t\x12\x11\n\ttime_zone\x18\r \x01(\r\x12\x10\n\x08\x66rame_id\x18\x0e \x01(\t\x12\x14\n\x0cscan_channel\x18\x0f \x01(\t\x12\x11\n\tmin_range\x18\x10 \x01(\x02\x12\x11\n\tmax_range\x18\x11 \x01(\x02\x12\x13\n\x0b\x63onfig_vert\x18\x12 \x01(\x08\x12\x12\n\nprint_vert\x18\x13 \x01(\x08\x12\x18\n\x10scan_start_angle\x18\x14 \x01(\x02\x12\x16\n\x0escan_end_angle\x18\x15 \x01(\x02\x12\x13\n\x0b\x63\x61libration\x18\x16 \x01(\x08\x12\x10\n\x08npackets\x18\x17 \x01(\x05\x12\x18\n\x10\x63\x61libration_file\x18\x18 \x01(\t\x12\x13\n\x0bpacket_size\x18\x19 \x01(\r\x12\x16\n\x0evertical_angle\x18\x1a \x01(\r\x12\x15\n\rbottom_left_x\x18\x1b \x01(\x02\x12\x15\n\rbottom_left_y\x18\x1c \x01(\x02\x12\x13\n\x0btop_right_x\x18\x1d \x01(\x02\x12\x13\n\x0btop_right_y\x18\x1e \x01(\x02\x12\x11\n\tpcap_path\x18\x1f \x01(\t\"\xa4\x01\n\x11\x43ompensatorConfig\x12\x16\n\x0eoutput_channel\x18\x01 \x01(\t\x12%\n\x17transform_query_timeout\x18\x02 \x01(\x02:\x04\x30.02\x12\x1d\n\x0eworld_frame_id\x18\x03 \x01(\t:\x05world\x12\x17\n\x0ftarget_frame_id\x18\x04 \x01(\t\x12\x18\n\x10point_cloud_size\x18\x05 \x01(\r')



_CONFIG = DESCRIPTOR.message_types_by_name['Config']
_COMPENSATORCONFIG = DESCRIPTOR.message_types_by_name['CompensatorConfig']
Config = _reflection.GeneratedProtocolMessageType('Config', (_message.Message,), {
  'DESCRIPTOR' : _CONFIG,
  '__module__' : 'modules.drivers.lidar.lslidar.proto.config_pb2'
  # @@protoc_insertion_point(class_scope:apollo.drivers.lslidar.Config)
  })
_sym_db.RegisterMessage(Config)

CompensatorConfig = _reflection.GeneratedProtocolMessageType('CompensatorConfig', (_message.Message,), {
  'DESCRIPTOR' : _COMPENSATORCONFIG,
  '__module__' : 'modules.drivers.lidar.lslidar.proto.config_pb2'
  # @@protoc_insertion_point(class_scope:apollo.drivers.lslidar.CompensatorConfig)
  })
_sym_db.RegisterMessage(CompensatorConfig)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CONFIG._serialized_start=128
  _CONFIG._serialized_end=850
  _COMPENSATORCONFIG._serialized_start=853
  _COMPENSATORCONFIG._serialized_end=1017
# @@protoc_insertion_point(module_scope)
