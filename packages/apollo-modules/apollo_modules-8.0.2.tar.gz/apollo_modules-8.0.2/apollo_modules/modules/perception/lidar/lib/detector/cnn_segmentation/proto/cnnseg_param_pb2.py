# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: modules/perception/lidar/lib/detector/cnn_segmentation/proto/cnnseg_param.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\nOmodules/perception/lidar/lib/detector/cnn_segmentation/proto/cnnseg_param.proto\x12\x17\x61pollo.perception.lidar\"\x87\x04\n\x0b\x43NNSegParam\x12\x1c\n\nmodel_type\x18\x01 \x01(\t:\x08\x43\x61\x66\x66\x65Net\x12<\n\rnetwork_param\x18\x02 \x01(\x0b\x32%.apollo.perception.lidar.NetworkParam\x12<\n\rfeature_param\x18\x03 \x01(\x0b\x32%.apollo.perception.lidar.FeatureParam\x12\x1f\n\x11\x64o_classification\x18\x04 \x01(\x08:\x04true\x12\x18\n\ndo_heading\x18\x05 \x01(\x08:\x04true\x12\x11\n\x06gpu_id\x18\x06 \x01(\r:\x01\x30\x12\x35\n\x0fground_detector\x18\x07 \x01(\t:\x1cSpatioTemporalGroundDetector\x12\"\n\nroi_filter\x18\x08 \x01(\t:\x0eHdmapROIFilter\x12#\n\x14remove_ground_points\x18\t \x01(\x08:\x05\x66\x61lse\x12\x1e\n\x11objectness_thresh\x18\n \x01(\x02:\x03\x30.5\x12\x1e\n\x11\x63onfidence_thresh\x18\x0b \x01(\x02:\x03\x30.1\x12\x1a\n\rheight_thresh\x18\x0c \x01(\x02:\x03\x30.5\x12\x16\n\x0bmin_pts_num\x18\r \x01(\r:\x01\x33\x12\x1c\n\x10\x63onfidence_range\x18\x0e \x01(\x02:\x02\x36\x30\"\x95\x02\n\x0cNetworkParam\x12%\n\x10instance_pt_blob\x18\x01 \x01(\t:\x0binstance_pt\x12(\n\x10\x63\x61tegory_pt_blob\x18\x02 \x01(\t:\x0e\x63\x61tegory_score\x12,\n\x12\x63onfidence_pt_blob\x18\x03 \x01(\t:\x10\x63onfidence_score\x12!\n\x0eheight_pt_blob\x18\x04 \x01(\t:\theight_pt\x12\"\n\rclass_pt_blob\x18\x05 \x01(\t:\x0b\x63lass_score\x12#\n\x0fheading_pt_blob\x18\x06 \x01(\t:\nheading_pt\x12\x1a\n\x0c\x66\x65\x61ture_blob\x18\x07 \x01(\t:\x04\x64\x61ta\"\xce\x01\n\x0c\x46\x65\x61tureParam\x12\x1d\n\x11point_cloud_range\x18\x01 \x01(\x02:\x02\x36\x30\x12\x12\n\x05width\x18\x02 \x01(\r:\x03\x35\x31\x32\x12\x13\n\x06height\x18\x03 \x01(\r:\x03\x35\x31\x32\x12\x16\n\nmin_height\x18\x04 \x01(\x02:\x02-5\x12\x15\n\nmax_height\x18\x05 \x01(\x02:\x01\x35\x12#\n\x15use_intensity_feature\x18\x06 \x01(\x08:\x04true\x12\"\n\x14use_constant_feature\x18\x07 \x01(\x08:\x04true')



_CNNSEGPARAM = DESCRIPTOR.message_types_by_name['CNNSegParam']
_NETWORKPARAM = DESCRIPTOR.message_types_by_name['NetworkParam']
_FEATUREPARAM = DESCRIPTOR.message_types_by_name['FeatureParam']
CNNSegParam = _reflection.GeneratedProtocolMessageType('CNNSegParam', (_message.Message,), {
  'DESCRIPTOR' : _CNNSEGPARAM,
  '__module__' : 'modules.perception.lidar.lib.detector.cnn_segmentation.proto.cnnseg_param_pb2'
  # @@protoc_insertion_point(class_scope:apollo.perception.lidar.CNNSegParam)
  })
_sym_db.RegisterMessage(CNNSegParam)

NetworkParam = _reflection.GeneratedProtocolMessageType('NetworkParam', (_message.Message,), {
  'DESCRIPTOR' : _NETWORKPARAM,
  '__module__' : 'modules.perception.lidar.lib.detector.cnn_segmentation.proto.cnnseg_param_pb2'
  # @@protoc_insertion_point(class_scope:apollo.perception.lidar.NetworkParam)
  })
_sym_db.RegisterMessage(NetworkParam)

FeatureParam = _reflection.GeneratedProtocolMessageType('FeatureParam', (_message.Message,), {
  'DESCRIPTOR' : _FEATUREPARAM,
  '__module__' : 'modules.perception.lidar.lib.detector.cnn_segmentation.proto.cnnseg_param_pb2'
  # @@protoc_insertion_point(class_scope:apollo.perception.lidar.FeatureParam)
  })
_sym_db.RegisterMessage(FeatureParam)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _CNNSEGPARAM._serialized_start=109
  _CNNSEGPARAM._serialized_end=628
  _NETWORKPARAM._serialized_start=631
  _NETWORKPARAM._serialized_end=908
  _FEATUREPARAM._serialized_start=911
  _FEATUREPARAM._serialized_end=1117
# @@protoc_insertion_point(module_scope)
