IF(VEDA_FIND_VERSION AND VEDA_VERSION AND VEDA_VERSION VERSION_LESS VEDA_FIND_VERSION)
	UNSET(VEDA_VERSION CACHE)
	UNSET(VEDA_FOUND CACHE)
ENDIF()
IF(NOT VEDA_FOUND)
	SET(VEDA_FOUND FALSE)
	FIND_PATH(VEDA_DIR "include/veda.h" PATHS "${CMAKE_CURRENT_LIST_DIR}/../" "/usr/local/ve/veda/" "/opt/nec/ve/share/veda")
 
	IF(NOT VEDA_DIR)
		FIND_PACKAGE(Python3 3.7 REQUIRED)
		SET(Python3_USERLIB "$ENV{HOME}/.local/lib/python${Python3_VERSION_MAJOR}.${Python3_VERSION_MINOR}/site-packages")
		FIND_FILE(VEDA_DIR "include/veda.h" PATHS "${Python3_SITELIB}/veda" "${Python3_USERLIB}/veda")
	ENDIF()
 
	IF(VEDA_DIR)
		FIND_LIBRARY(VEDA_LIBRARY "libveda.so" "libveda.a" "PATHS" "${VEDA_DIR}/lib64" "${VEDA_DIR}/../../veos/lib64")
		FIND_FILE(VEDA_DEVICE_LIBRARY "libveda.vso" "PATHS" "${VEDA_DIR}/libve" "${VEDA_DIR}/../../veos/lib64")
		FIND_FILE(VEDA_DEVICE3_LIBRARY "libveda.vso3" "PATHS" "${VEDA_DIR}/libve" "${VEDA_DIR}/../../veos/lib64")
		SET(VEDA_INCLUDE_DIRS "${VEDA_DIR}/include" "CACHE" "STRING" "VEDA dir")

		IF(VEDA_LIBRARY AND VEDA_DEVICE_LIBRARY AND VEDA_DEVICE3_LIBRARY AND VEDA_INCLUDE_DIRS)
			SET(VEDA_FOUND TRUE)
			FILE(READ "${VEDA_INCLUDE_DIRS}/veda/version.h" VEDA_VERSION)
			STRING(REGEX MATCH "\"([0-9.]+)\"" VEDA_VERSION ${VEDA_VERSION})
			SET(VEDA_VERSION ${CMAKE_MATCH_1})
			SET(VEDA_VERSION ${VEDA_VERSION} CACHE STRING "VEDA Version")
			MESSAGE(STATUS "Found VEDA v${VEDA_VERSION}: ${VEDA_DIR}")
		ELSE()
			MESSAGE(STATUS "Unable to find all requirements of VEDA in ${VEDA_DIR}")
			MESSAGE(STATUS "VEDA_LIBRARY: ${VEDA_LIBRARY}")
			MESSAGE(STATUS "VEDA_DEVICE_LIBRARY: ${VEDA_DEVICE_LIBRARY}")
			MESSAGE(STATUS "VEDA_DEVICE3_LIBRARY: ${VEDA_DEVICE3_LIBRARY}")
			MESSAGE(STATUS "VEDA_INCLUDE_DIRS: ${VEDA_INCLUDE_DIRS}")
		ENDIF()
 
		SET(VEDA_FOUND ${VEDA_FOUND} CACHE BOOL "Found VEDA" FORCE)
		MARK_AS_ADVANCED(VEDA_FOUND VEDA_VERSION VEDA_DIR VEDA_LIBRARY VEDA_DEVICE_LIBRARY VEDA_DEVICE3_LIBRARY VEDA_INCLUDE_DIRS)
	ENDIF()
ENDIF()
 
IF(VEDA_FIND_REQUIRED AND NOT VEDA_FOUND)
	MESSAGE(FATAL_ERROR "Unable to find VEDA!")
ENDIF()
 
IF(VEDA_FIND_VERSION AND VEDA_VERSION VERSION_LESS VEDA_FIND_VERSION)
	MESSAGE(FATAL_ERROR "Found VEDA v${VEDA_VERSION} but expected at least v${VEDA_FIND_VERSION}")
ENDIF()
 
STRING(ASCII 59 VEDA_SEMICOLON)
STRING(REPLACE "." "${VEDA_SEMICOLON}" VEDA_VERSION_LIST ${VEDA_VERSION})
SET(VEDA_VERSION_MAJOR 0)
SET(VEDA_VERSION_MINOR 0)
SET(VEDA_VERSION_PATCH 0)
LIST(LENGTH VEDA_VERSION_LIST VEDA_VERSION_LEN)
IF(VEDA_VERSION_LEN GREATER 0)
	LIST(GET VEDA_VERSION_LIST 0 VEDA_VERSION_MAJOR)
ENDIF()
IF(VEDA_VERSION_LEN GREATER 1)
	LIST(GET VEDA_VERSION_LIST 1 VEDA_VERSION_MINOR)
ENDIF()
IF(VEDA_VERSION_LEN GREATER 2)
	LIST(GET VEDA_VERSION_LIST 2 VEDA_VERSION_PATCH)
ENDIF()
UNSET(VEDA_VERSION_LEN)
UNSET(VEDA_VERSION_LIST)
UNSET(VEDA_SEMICOLON)