Metadata-Version: 2.1
Name: status_symbol
Version: 1.0.1
Summary: Status-symbol
Home-page: 
Author: Paul Nation
Author-email: nonhermitian@gmail.com
License: Apache 2.0
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: packaging

# status-symbol
A generic status check for pypi versioning

## Installation

```bash
pip install status-symbol
```

## Usage

The most basic usage is simply:

```python

import status_symbol as ss

update_available, versions = ss.pypi_version_check('PACKAGE_NAME')
if update_available:
    ss.emit_update_warning('PACKAGE_NAME', versions)
```

## Disabling update warnings

It is possible to disable update checks for packages like so:

```python

ss.configuration.disable_version_check('PACKAGE_NAME')
```

One can check for disabled packages as well:

```python

ss.configuration.is_disabled('PACKAGE_NAME')
```

So doing a check and enitting as warning looks like:

```python

disabled = ss.configuration.is_disabled('PACKAGE_NAME')
if not disabled:
    update_available, versions = ss.pypi_version_check('PACKAGE_NAME')
    ss.emit_update_warning('PACKAGE_NAME', versions) if update_available else None
```
