[build-system]
build-backend = 'hatchling.build'
requires = ['hatchling', 'hatch-vcs']

[project]
name = 'sts-libs'
description = 'Library for pytest-based Linux storage tests'
readme = 'sts_libs/README.md'
requires-python = '>=3.9'
dynamic = ['version']
authors = [
  {name = 'Martin Hoyer', email = 'mhoyer@redhat.com'},
  {name = 'Filip Suba', email = 'fsuba@redhat.com'},
  {name = 'Zhaojuan Guo', email = 'zguo@redhat.com'},
  {name = 'Bruno Goncalves', email = 'bgoncalv@redhat.com'},
  {name = 'Jakub Krysl', email = 'jkrysl@redhat.com'},
]
maintainers = [
  {name = 'Martin Hoyer', email = 'mhoyer@redhat.com'},
  {name = 'Filip Suba', email = 'fsuba@redhat.com'},
  {name = 'Zhaojuan Guo', email = 'zguo@redhat.com'},
]
license = 'GPL-3.0-or-later'
license-files = {paths = ['LICENSE']}
classifiers = [
  'Programming Language :: Python :: 3 :: Only',
  'Programming Language :: Python :: 3.9',
  'Topic :: Software Development :: Testing',
  'Topic :: Software Development :: Quality Assurance',
  'Intended Audience :: Developers',
  'Operating System :: POSIX :: Linux',
  'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)',
  'Framework :: Hatch',
]
dependencies = [
  'pytest-testinfra>=10.1, <11',
]

[project.urls]
Repository = 'https://gitlab.com/rh-kernel-stqe/sts/'

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = ['sts_libs/src/sts']

[tool.hatch.envs.default]
dependencies = [
  "ruff",
  "mypy",
  "pre-commit",
]

[tool.hatch.envs.default.scripts]
# TODO use pytest-container
container-prep = """\
  buildah from --name fedora-sts fedora &&\
  buildah run fedora-sts dnf install -y python3-pip &&\
  buildah config --env SETUPTOOLS_SCM_PRETEND_VERSION="0.0.1" fedora-sts &&\
  buildah copy fedora-sts ../sts sts &&\
  buildah run fedora-sts python3 -m pip install -e sts\
  """
tests = 'buildah copy fedora-sts ../sts sts && buildah run fedora-sts pytest sts/sts_libs/tests/'
format = ['ruff check --fix', 'ruff format']
lint = ['ruff check', 'ruff format --check']
check = 'mypy {args:.}'
all = ['format', 'lint', 'check', 'tests']

[tool.ruff]
line-length = 120
namespace-packages = ['sts_libs']
src = ['sts_libs/src']

lint.select = [
  'F',  # Pyflakes
  'E',  # pycodestyle error
  'W',  # pycodestyle warning
  'I',  # isort
  'N',  # pep8-naming
  'D',  # pydocstyle
  'UP',  # pyupgrade
  'YTT',  # flake8-2020
  'ANN',  # flake8-annotations
  'ASYNC', # flake8-async
  'BLE',  # flake8-blind-except
  #'FBT',  # flake8-boolean-trap
  'B',  # flake8-bugbear
  'A',  # flake8-builtins
  'C4',  # flake8-comprehensions
  'DTZ',  # flake8-datetimez
  'T10',  # flake8-debugger
  'EM',  # flake8-errmsg
  'FA',  # flake8-future-annotations
  'ICN',  # flake8-import-conventions
  'G',  # flake8-logging-format
  'INP',  # flake8-no-pep420
  'PIE',  # flake8-pie
  #'T20',  # flake8-print -> TODO
  'PT',  # flake8-pytest-style
  'Q',  # flake8-quotes
  'RSE',  # flake8-raise
  'RET',  # flake8-return
  'SLF',  # flake8-self
  'SLOT',  # flake8-slots
  'SIM',  # flake8-simplify
  'TID',  # flake8-tidy-imports
  'TCH',  # flake8-type-checking
  'INT',  # flake8-gettext
  'ARG',  # flake8-unused-arguments
  'PTH',  # flake8-use-pathlib
  'PGH',  # pygrep-hooks
  'PL',  # Pylint
  'TRY',  # tryceratops
  'FLY',  # flynt
  'PERF',  # perflint
  'FURB',  # refurb
  'LOG',  # flake8-logging
  'RUF',  # Ruff-specific rules
]
lint.ignore = [
  'D10',  # Missing docstring -> TODO
  'D205',  # 1 blank line required between summary line and description -> TODO
  'D417',  # Missing argument descriptions -> Do not use docstring description for well type-annotated args
  'PLR09',  # pylint-refactor too-many -> TODO
  'PLR1702',  # Too many nested blocks
  'PLR2004',  # magic value -> TODO
  'ANN101',  # Missing type annotation for `self` in method -> Not necessary
  'ANN102',  # Missing type annotation for `cls` in method -> Not necessary
  'G004',  # Logging statement uses f-string -> Up for discussion
  'TRY003',  # Avoid specifying long messages outside the exception class
  'EM102',  # Exception must not use an f-string literal, assign to variable first
]

format.quote-style = "single"

[tool.ruff.lint.per-file-ignores]
'tests/*' = ['INP001']
'sts_libs/src/sts/lvm.py' = ['PLR6301']
'sts_libs/tests/*' = ['PLR6301', 'ANN', 'SLF001']

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ['id']

[tool.ruff.lint.flake8-quotes]
inline-quotes = 'single'

[tool.ruff.lint.pydocstyle]
convention = 'google'

[tool.pytest.ini_options]
addopts = ['--verbose']
testpaths = ['sts_libs/tests']

[tool.coverage.report]
omit = ['_test.py']

[tool.mypy]
ignore_missing_imports = true
#strict = true  # TODO -> Will require a lot of effort
show_error_codes = true
python_version = '3.9'

[tool.yamlfix]
explicit_start = 'false'  # '---' at the beggining of the file
line_length = 62  # 62 makes multiline text blocks <= 72 chars
preserve_quotes = 'true'  # otherwise can remove necessary quotes
whitelines = 1 # allow no more than n whiteline(s)
#comments_whitelines = 1
#section_whitelines = 0  # force n whitelines between top-level sections
sequence_style = 'keep_style'  # 'block_style' to force idented lists

[tool.pyright]
pythonVersion = "3.9"
pythonPlatform = "Linux"
reportGeneralTypeIssues = false
