[tool.poetry]
name = "quote-image-generator"
version = "0.1.1"
description = "Create beautiful, customizable images with quotes, supporting unique font styles and emojis"
authors = ["lordralinc <lordralinc@gmail.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/lordralinc/QIG"
repository = "https://github.com/lordralinc/QIG"
keywords = [
    "image",
    "generation", 
    "PIL"
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/lordralinc/QIG/issues"

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
pillow = "^11.0.0"

[tool.poetry.group.dev.dependencies]
black = "^23.3.0"
isort = "^5.12.0"
mypy = "^1.3.0"
ruff = ">=0.0.246"
pre-commit = "^4.0.0"
rich = "^13.9.4"
requests = "^2.32.3"
beautifulsoup4 = "^4.12.3"

[tool.mypy]
python_version = "3.12"
ignore_missing_imports = true
warn_no_return = false
warn_return_any = false
warn_unused_configs = true
check_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.black]
line-length = 99
target-version = ['py311']

[tool.ruff]
line-length = 99
respect-gitignore = true
target-version = "py311"

[tool.ruff.lint]
select = [
    "PL",  # pylint
    "F",   # pyflakes
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "C90", # mccabe
    "I",   # isort
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C40", # flake8-comprehensions
    "T10", # flake8-debugger
    "EXE", # flake8-executable
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PGH", # pygrep-hooks
    "RSE", # flake8-raise
    "RUF", # ruff
    "ALL", # All not listed above
]
ignore = [
    "RUF006",
    "C901",
    "PLR0912",
    "PLR0911",
    "TD002",
    "FIX002",
    "TD003",
    "ANN",     # flake8-annotations
    "BLE",     # flake8-blind-except
    "FBT",     # flake8-boolean-trap
    "COM",     # flake8-commas
    "DTZ",     # flake8-datetimez
    "DJ",      # flake8-Django
    "EM",      # flake8-errmsg
    "INP",     # flake8-no-pep420
    "PYI",     # flake8-pyi
    "Q",       # flake8-quotes
    "RET",     # flake8-return
    "PTH",     # flake8-use-pathlib
    "ERA",     # flake8-eradicate
    "PD",      # pandas-vet
    "D",       # pydocstyle
    "TRY",     # tryceratops
    "SLF",     # flake8-self
    "G004",
    # "E203",  # whitespace before ':' (black)
    "E501", # line too long
    # "W503",  # line break before binary operator (black)
    # "W504",  # line break after binary operator (black)
    "B905",    # `zip()` without an explicit `strict=` parameter (python3.10+ only)
    "PLR0913", # Too many arguments to function call
    "A003",    # Class attribute builtin name shadowing
    "N818",    # Exception should be named with an Error suffix
    "PGH003",  # Use specific rule codes when ignoring type issues
    "ARG002",  # Unused method argument
    "RUF001",  # String contains ambiguous unicode character
    "RUF002",  # Docstring contains ambiguous unicode character
    "RUF003",  # Comment contains ambiguous unicode character
    "PLW2901", # for loop variable overwritten by assignment target
    "PLE1205", # https://github.com/charliermarsh/ruff/issues/3351
    "B030",    # Except handlers should only be exception classes or tuples of exception
    "UP006",   # Use `list` instead of `List` for type annotation
    "UP007",   # Use `X | Y` for type annotations
    "S311",    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S301",    # `pickle` and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
    "S101",    # Use of assert detected
    "PLR2004", # Magic value used in comparison
    "S106",    # Possible hardcoded password
    "ARG001",  # Unused function argument
    "ARG005",  # Unused lambda argument
]
"examples/**.py" = [
    "T201",   # print statement found
    "TCH001", # Move application import into a type-checking block
    "TCH002", # Move third-party import out of a type-checking block
]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing_extensions", "typing"]


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
