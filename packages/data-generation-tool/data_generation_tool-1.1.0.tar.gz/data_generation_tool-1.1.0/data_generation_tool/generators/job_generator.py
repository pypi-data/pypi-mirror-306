from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class JobGenerator(ColumnGenerator):
    """
    Generator for job columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of jobs based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
            ValueError
                If the expected type in the column does not match the type of values generated by the generator.

            UnsatisfiableConstraints
                If the given set of constraints are not satisfiable.
        """

        allowed_jobs = [job for job_list in _jobs_by_category.values() for job in job_list]
        forbidden_jobs = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By):
                if constraint.criterion.lower() == "category":
                    job_category = constraint.value
                    if job_category not in _jobs_by_category:
                        raise ValueError(f"Job category {job_category} is not recognized.")
                    else:
                        allowed_jobs = _jobs_by_category[job_category]

            elif isinstance(constraint, Allowed):
                allowed_jobs = [job for job in allowed_jobs if job in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_jobs = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_jobs = [job for job in allowed_jobs if job not in forbidden_jobs]

        if min_size is not None:
            allowed_jobs = [job for job in allowed_jobs if len(job) >= min_size]

        if max_size is not None:
            allowed_jobs = [job for job in allowed_jobs if len(job) <= max_size]

        if not allowed_jobs:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_jobs, count), column.constraints)


_jobs_by_category = {
    "IT": [
        "Software Developer", "Data Scientist", "Cybersecurity Analyst", "Network Engineer", "Database Administrator",
        "Web Developer", "DevOps Engineer", "UI/UX Designer", "Systems Analyst", "Cloud Architect"
    ],
    "Finance": [
        "Financial Analyst", "Accountant", "Investment Banker", "Financial Advisor", "Actuary",
        "Auditor", "Risk Manager", "Quantitative Analyst", "Economist", "Tax Consultant"
    ],
    "Healthcare": [
        "Doctor", "Nurse", "Pharmacist", "Physical Therapist", "Medical Assistant",
        "Dentist", "Radiologist", "Psychiatrist", "Speech Therapist", "Occupational Therapist"
    ],
    "Education": [
        "Teacher", "Professor", "School Counselor", "Principal", "Librarian",
        "Curriculum Developer", "Education Consultant", "Tutor", "Career Advisor", "Special Education Teacher"
    ],
    "Engineering": [
        "Mechanical Engineer", "Civil Engineer", "Electrical Engineer", "Chemical Engineer", "Aerospace Engineer",
        "Environmental Engineer", "Petroleum Engineer", "Biomedical Engineer", "Industrial Engineer",
        "Materials Engineer"
    ],
    "Marketing": [
        "Marketing Manager", "Digital Marketer", "SEO Specialist", "Social Media Manager", "Content Strategist",
        "Brand Manager", "Market Research Analyst", "Advertising Executive", "Copywriter", "Event Planner"
    ],
}
