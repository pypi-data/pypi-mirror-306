from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class WebsiteGenerator(ColumnGenerator):
    """
    Generator for website columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of websites based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.

        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_websites = [website for website_list in _websites_by_type.values() for website in website_list]
        forbidden_websites = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By):
                if constraint.criterion.lower() == "type":
                    website_type = constraint.value
                    if website_type not in _websites_by_type:
                        raise ValueError(f"Website type {website_type} is not recognized.")
                    available_websites = _websites_by_type[website_type]
                    allowed_websites = available_websites
            elif isinstance(constraint, Allowed):
                allowed_websites = [website for website in allowed_websites if website in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_websites.extend(constraint.value)
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_websites = [website for website in allowed_websites if website not in forbidden_websites]

        if min_size is not None:
            allowed_websites = [website for website in allowed_websites if len(website) >= min_size]

        if max_size is not None:
            allowed_websites = [website for website in allowed_websites if len(website) <= max_size]

        if not allowed_websites:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_websites, count), column.constraints)


_websites_by_type = {
    "e-commerce": [
        "Amazon", "eBay", "Alibaba", "Etsy", "Flipkart", "Taobao",
        "Rakuten", "Zappos", "Walmart", "Target", "Best Buy"
    ],
    "social_media": [
        "Facebook", "Twitter", "Instagram", "LinkedIn", "Pinterest", "Snapchat",
        "TikTok", "Reddit", "YouTube", "WhatsApp", "WeChat"
    ],
    "news": [
        "CNN", "BBC", "Reuters", "The Guardian", "New York Times", "Washington Post",
        "Al Jazeera", "HuffPost", "BuzzFeed", "Fox News", "NPR"
    ],
    "blog": [
        "Medium", "WordPress", "Blogger", "Tumblr", "Wix", "Ghost",
        "Squarespace", "Weebly", "Typepad", "Jimdo", "Strikingly"
    ],
    "educational": [
        "Coursera", "Khan Academy", "Udemy", "edX", "Codecademy", "Duolingo",
        "Ted-Ed", "MIT OpenCourseWare", "Khan Lab School", "Skillshare", "Lynda"
    ],
    "business": [
        "LinkedIn", "Glassdoor", "AngelList", "Crunchbase", "BizBuySell", "ZoomInfo",
        "Forbes", "Bloomberg", "Harvard Business Review", "Inc.", "Fast Company"
    ],
}
