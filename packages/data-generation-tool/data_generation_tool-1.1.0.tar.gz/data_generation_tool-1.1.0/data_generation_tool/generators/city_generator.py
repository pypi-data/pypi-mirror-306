from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class CityGenerator(ColumnGenerator):
    """
    Generator for city columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of cities based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.

        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_cities = [city for cities in _cities_by_continent.values() for city in cities]
        forbidden_cities = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, Allowed):
                allowed_cities = [city for city in allowed_cities if city in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_cities.extend(constraint.value)
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound
            elif isinstance(constraint, By):
                if constraint.criterion.lower() == "continent":
                    continent = constraint.value
                    if continent not in _cities_by_continent:
                        raise ValueError(f"Continent {continent} is not recognized.")

                    allowed_cities = _cities_by_continent[continent]
                else:
                    raise ValueError(f"Unknown criterion: {constraint.criterion}")

        allowed_cities = [city for city in allowed_cities if city not in forbidden_cities]

        if min_size is not None:
            allowed_cities = [city for city in allowed_cities if len(city) >= min_size]

        if max_size is not None:
            allowed_cities = [city for city in allowed_cities if len(city) <= max_size]

        if not allowed_cities:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_cities, count), column.constraints)


# Dictionary of cities by continent
_cities_by_continent = {
    "Africa": [
        "Cotonou", "Porto-Novo", "Abomey", "Abomey-Calavi", "Parakou", "Natitingou", "Grand-Popo", "Kandi",
        "Malanville", "Lokossa",
        "Cove", "Allada", "Lome", "Djougou", "Save", "Casablanca", "Tripoli", "Marrackech", "Brasaville",
        "Cairo", "Lagos", "Kinshasa", "Johannesburg", "Nairobi", "Casablanca", "Accra", "Addis Ababa", "Algiers",
        "Luanda",
        "Kampala", "Dakar", "Abidjan", "Douala", "Harare", "Dar es Salaam", "Tunis", "Maputo", "Kigali", "Lusaka",
        "Bamako", "Nouakchott", "Ouagadougou", "Monrovia", "Gaborone", "Windhoek", "Libreville", "Antananarivo",
        "Mogadishu", "Juba"
    ],
    "Asia": [
        "Tokyo", "Shanghai", "Mumbai", "Seoul", "Bangkok", "Beijing", "Jakarta", "Manila", "Hong Kong", "Kuala Lumpur",
        "Singapore", "Hanoi", "Ho Chi Minh City", "Taipei", "Dhaka", "Colombo", "Islamabad", "Kathmandu", "Riyadh",
        "Dubai",
        "Tehran", "Baghdad", "Jerusalem", "Damascus", "Amman", "Doha", "Muscat", "Kuwait City", "Beirut", "Tashkent",
        "Pattaya"
    ],
    "Europe": [
        "London", "Paris", "Berlin", "Madrid", "Rome", "Athens", "Vienna", "Lisbon", "Brussels", "Amsterdam",
        "Dublin", "Warsaw", "Prague", "Budapest", "Copenhagen", "Stockholm", "Oslo", "Helsinki", "Moscow",
        "Saint Petersburg",
        "Zurich", "Geneva", "Barcelona", "Milan", "Munich", "Frankfurt", "Hamburg", "Lyon", "Marseille", "Naples"
    ],
    "North America": [
        "New York", "Los Angeles", "Chicago", "Toronto", "Mexico City", "Houston", "Havana", "San Francisco",
        "Washington D.C.", "Boston",
        "Miami", "Montreal", "Vancouver", "Dallas", "Philadelphia", "Atlanta", "Guatemala City", "Panama City",
        "San Jose", "Tegucigalpa",
        "Kingston", "Port-au-Prince", "Port of Spain", "Santo Domingo", "San Salvador", "Managua", "Belmopan",
        "Bridgetown", "Nassau", "Castries"
    ],
    "South America": [
        "São Paulo", "Buenos Aires", "Rio de Janeiro", "Lima", "Bogotá", "Santiago", "Caracas", "Quito", "La Paz",
        "Montevideo",
        "Asunción", "Paramaribo", "Georgetown", "Sucre", "Brasília", "Salvador", "Fortaleza", "Cali", "Medellín",
        "Maracaibo",
        "Guayaquil", "Cuenca", "Arequipa", "Cusco", "Valparaíso", "Antofagasta", "Iquique", "Barquisimeto", "Maracay",
        "Maturín"
    ],
    "Australia": [
        "Sydney", "Melbourne", "Brisbane", "Perth", "Adelaide", "Canberra", "Hobart", "Darwin", "Newcastle",
        "Wollongong",
        "Geelong", "Townsville", "Cairns", "Toowoomba", "Ballarat", "Bendigo", "Mackay", "Launceston", "Rockhampton",
        "Bundaberg",
        "Hervey Bay", "Wagga Wagga", "Coffs Harbour", "Mildura", "Shepparton", "Gladstone", "Port Macquarie",
        "Tamworth", "Orange", "Dubbo"
    ]
}
