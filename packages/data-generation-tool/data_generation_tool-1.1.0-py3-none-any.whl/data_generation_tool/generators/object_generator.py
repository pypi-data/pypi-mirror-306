from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class ObjectGenerator(ColumnGenerator):
    """
    Generator for object columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of objects based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.
        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_objects = [obj for obj_list in _objects_by_type.values() for obj in obj_list]
        obj_type = None
        forbidden_objects = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By) and constraint.criterion.lower() == "type":
                obj_type = constraint.value
                if obj_type not in _objects_by_type:
                    raise ValueError(f"Object type {obj_type} is not recognized.")
                allowed_objects = _objects_by_type[obj_type]
            elif isinstance(constraint, Allowed):
                allowed_objects = [obj for obj in allowed_objects if obj in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_objects = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        if not allowed_objects:
            raise ValueError("Object type must be specified in the constraints with 'By'.")

        allowed_objects = [obj for obj in allowed_objects if obj not in forbidden_objects]

        if min_size is not None:
            allowed_objects = [obj for obj in allowed_objects if len(obj) >= min_size]

        if max_size is not None:
            allowed_objects = [obj for obj in allowed_objects if len(obj) <= max_size]

        if not allowed_objects:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_objects, count), column.constraints)


# Dictionary of objects by type
_objects_by_type = {
    "domestic": ["Toaster", "Microwave", "Coffee Maker", "Blender", "Vacuum Cleaner"],
    "office": ["Desk", "Chair", "Computer", "Printer", "Shredder"],
    "fishing": ["Fishing Rod", "Tackle Box", "Lures", "Net", "Cooler"],
}
