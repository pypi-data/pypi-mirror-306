from abc import abstractmethod

import numpy as np

from data_generation_tool.constraints.column_constraints import ColumnConstraint, AllowMissing
from data_generation_tool.requests import ColumnGenerationRequest


class ColumnGenerator:
    """
    Base class for generating columns data.
    """

    def __init__(self, random_state: int | None = None):
        self.rng = np.random.default_rng(random_state)

    @abstractmethod
    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates columns data.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
            ValueError
                If the expected type in the column does not match the type of values generated by the generator.

            UnsatisfiableConstraints
                If the given set of constraints are not satisfiable.
        """
        pass

    def post_processing(self, generated_data: list, constraints: list[ColumnConstraint] = None) -> list:
        """
        Post-processing after data have been generated

        For example, if some missing values are allowed, we will randomly pick some indexes and put the values at None

        Parameters
        ----------
        generated_data : list
            The already generated data
        constraints : list[ColumnConstraint]
            The constraints passed to the generator, we will inspect this value to check if it contains some interesting values such as Nullable
        """

        allow_missing = False
        missing_percent = None

        for constraint in constraints:
            if isinstance(constraint, AllowMissing):
                allow_missing = True
                missing_percent = constraint.percentage
                break

        if not allow_missing:
            return generated_data

        if missing_percent is None:
            missing_percent = 20

        max_index = len(generated_data) - 1
        number_of_nones = int(((max_index + 1) / 100) * missing_percent)
        indexes_to_alter = self.rng.choice(max_index + 1, number_of_nones, replace=False)

        for i in indexes_to_alter:
            generated_data[i] = None

        return generated_data
