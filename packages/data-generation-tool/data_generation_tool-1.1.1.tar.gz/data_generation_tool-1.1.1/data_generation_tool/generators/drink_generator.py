from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class DrinkGenerator(ColumnGenerator):
    """
    Generator for drink columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of drinks based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return
        
        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.

        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        available_drinks = [drink for drinks_list in _drinks.values() for drink in drinks_list]
        forbidden_drinks = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By):
                if constraint.criterion == "continent":
                    continent = constraint.value
                    if continent not in _drinks:
                        raise ValueError(f"Continent {continent} is not recognized.")
                    available_drinks = _drinks[continent]
            elif isinstance(constraint, Allowed):
                available_drinks = [drink for drink in available_drinks if drink in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_drinks = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        if not available_drinks:
            available_drinks = [drink for drinks_list in _drinks.values() for drink in drinks_list]

        allowed_drinks = [drink for drink in available_drinks if drink not in forbidden_drinks]

        if min_size is not None:
            allowed_drinks = [drink for drink in allowed_drinks if len(drink) >= min_size]

        if max_size is not None:
            allowed_drinks = [drink for drink in allowed_drinks if len(drink) <= max_size]

        if not allowed_drinks:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_drinks, count), column.constraints)


_drinks = {
    "Africa": ["Rooibos Tea", "Hibiscus Juice", "Palm Wine", "Bissap", "Ginger Beer"],
    "Asia": ["Chai", "Green Tea", "Sake", "Sugarcane Juice", "Lassi"],
    "Europe": ["Beer", "Wine", "Vodka", "Absinthe", "Gin"],
    "North America": ["Cola", "Root Beer", "Margarita", "Tequila Sunrise", "Mojito"],
    "South America": ["Caipirinha", "Mate", "Pisco Sour", "Aguardiente", "Guarana"],
    "Australia": ["Flat White", "Golden Gaytime", "Bundaberg Ginger Beer", "Pavlova Cocktail", "Milkshake"],
    "Antarctica": ["Frozen Margarita", "Iceberg Cooler", "Polar Espresso", "Frosty Fizz", "Antarctic Gin"]
}
