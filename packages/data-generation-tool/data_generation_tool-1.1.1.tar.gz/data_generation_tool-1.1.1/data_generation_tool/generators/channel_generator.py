from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class ChannelGenerator(ColumnGenerator):
    """
    Generator for channel columns based on program type.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of channels based on the program type and constraints provided.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.
        
        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_channels = [channel for type_channels in _channels_by_type.values() for channel in type_channels]
        forbidden_channels = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, Allowed):
                allowed_channels = [channel for channel in allowed_channels if channel in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_channels = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound
            elif isinstance(constraint, By) and constraint.criterion.lower() == "type":
                program_type = constraint.value
                if program_type not in _channels_by_type:
                    raise ValueError(f"Program type {program_type} is not recognized.")
                else:
                    allowed_channels = _channels_by_type[program_type]

        allowed_channels = [channel for channel in allowed_channels if channel not in forbidden_channels]

        if min_size is not None:
            allowed_channels = [channel for channel in allowed_channels if len(channel) >= min_size]

        if max_size is not None:
            allowed_channels = [channel for channel in allowed_channels if len(channel) <= max_size]

        if not allowed_channels:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_channels, count), column.constraints)


_channels_by_type = {
    "news": ["Africa 24", "CNN", "BBC News", "Fox News", "Al Jazeera", "Sky News"],
    "sports": ["ESPN", "Sky Sports", "Fox Sports", "BT Sport", "NBC Sports"],
    "entertainment": ["HBO", "Netflix", "Amazon Prime Video", "Disney+", "Hulu"],
    "documentary": ["National Geographic", "Discovery Channel", "History Channel", "PBS", "BBC Earth"],
}
