from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class SocialNetworkGenerator(ColumnGenerator):
    """
    Generator for social network columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of social networks based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.

        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_networks = [network for network_list in _networks_by_type.values() for network in network_list]
        forbidden_networks = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By):
                if constraint.criterion.lower() == "type":
                    network_type = constraint.value
                    if network_type not in _networks_by_type:
                        raise ValueError(f"Social network type {network_type} is not recognized.")
                    available_networks = _networks_by_type[network_type]
                    allowed_networks = available_networks
            elif isinstance(constraint, Allowed):
                allowed_networks = [network for network in allowed_networks if network in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_networks.extend(constraint.value)
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_networks = [network for network in allowed_networks if network not in forbidden_networks]

        if min_size is not None:
            allowed_networks = [network for network in allowed_networks if len(network) >= min_size]

        if max_size is not None:
            allowed_networks = [network for network in allowed_networks if len(network) <= max_size]

        if not allowed_networks:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_networks, count), column.constraints)


_networks_by_type = {
    "social_media": [
        "Facebook", "Twitter", "Instagram", "LinkedIn", "Pinterest", "Snapchat",
        "TikTok", "Reddit", "YouTube", "WhatsApp", "WeChat"
    ],
    "professional_network": [
        "LinkedIn", "Glassdoor", "AngelList", "Crunchbase", "BizBuySell", "ZoomInfo",
        "Forbes", "Bloomberg", "Harvard Business Review", "Inc.", "Fast Company"
    ],
    "dating_app": [
        "Tinder", "Bumble", "Hinge", "OkCupid", "Match", "Grindr",
        "Plenty of Fish", "Zoosk", "Coffee Meets Bagel", "eHarmony", "Her"
    ],
    "gaming_network": [
        "Steam", "Xbox Live", "PlayStation Network", "Nintendo Switch Online", "Epic Games", "GOG",
        "Battle.net", "Uplay", "Discord", "Twitch", "Minecraft"
    ],
    "professional_community": [
        "GitHub", "Stack Overflow", "Behance", "Dribbble", "Spiceworks", "ResearchGate",
        "Academia.edu", "Product Hunt", "Designer Hangout", "Slack", "Mobilize"
    ],
}
