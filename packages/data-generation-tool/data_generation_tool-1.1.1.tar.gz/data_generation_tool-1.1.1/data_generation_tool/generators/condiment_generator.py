from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class CondimentGenerator(ColumnGenerator):
    """
    Generator for condiment columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of condiments based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.
        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """
        allowed_condiments = [condiment for condiment_list in _condiments.values() for condiment in condiment_list]

        forbidden_condiments = []
        min_size = None
        max_size = None
        continent = None
        for constraint in column.constraints:
            if isinstance(constraint, By) and constraint.criterion == "continent":
                continent = constraint.value
                if continent not in _condiments:
                    raise ValueError(f"Continent {continent} is not recognized.")
                available_condiments = _condiments[continent]
                break
            elif isinstance(constraint, Allowed):
                allowed_condiments = [condiment for condiment in allowed_condiments if condiment in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_condiments = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        else:
            available_condiments = [condiment for condiments_list in _condiments.values() for condiment in
                                    condiments_list]

        allowed_condiments = [condiment for condiment in available_condiments if condiment not in forbidden_condiments]

        if min_size is not None:
            allowed_condiments = [condiment for condiment in allowed_condiments if len(condiment) >= min_size]

        if max_size is not None:
            allowed_condiments = [condiment for condiment in allowed_condiments if len(condiment) <= max_size]

        if not allowed_condiments:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_condiments, count), column.constraints)


# Dictionary of condiments by continent
_condiments = {
    "Africa": ["Berbere", "Harissa", "Dukkah", "Pili Pili", "Achar"],
    "Asia": ["Soy Sauce", "Sambal", "Wasabi", "Garam Masala", "Fish Sauce"],
    "Europe": ["Pesto", "Dijon Mustard", "Paprika", "Aioli", "Tapenade"],
    "North America": ["Ketchup", "BBQ Sauce", "Salsa", "Maple Syrup", "Ranch Dressing"],
    "South America": ["Chimichurri", "Guacamole", "Aji Amarillo", "Mojo", "Salsa Verde"],
    "Australia": ["Vegemite", "Bush Tomato Relish", "Macadamia Nut Oil", "Australian Mustard", "Lemon Myrtle"],
    "Antarctica": ["Ice Cap Spice", "Snowflake Salt", "Penguin Pepper", "Glacier Garlic", "Frosty Flakes"]
}
