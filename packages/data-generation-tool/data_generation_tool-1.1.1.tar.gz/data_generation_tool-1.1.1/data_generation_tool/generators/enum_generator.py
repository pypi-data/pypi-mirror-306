from data_generation_tool.constraints.column_constraints import MinSize, MaxSize, Allowed
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class EnumGenerator(ColumnGenerator):
    """
    Generator for enum columns based on a provided list of items.
    The `Allowed` constraint is mandatory
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of items based on the specific list provided and the constraints.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.

        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_items = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, Allowed):
                allowed_items = constraint.value

        if min_size is not None:
            allowed_items = [item for item in allowed_items if len(str(item)) >= min_size]

        if max_size is not None:
            allowed_items = [item for item in allowed_items if len(str(item)) <= max_size]

        if not allowed_items:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_items, count), column.constraints)
