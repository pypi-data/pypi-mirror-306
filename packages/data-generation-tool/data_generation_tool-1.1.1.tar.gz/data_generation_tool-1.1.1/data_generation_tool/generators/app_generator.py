from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class AppGenerator(ColumnGenerator):
    """
    Generator for app columns based on app type.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of apps based on the app type and constraints provided.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.
        
        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        allowed_apps = [app for app_list in _apps_by_type.values() for app in app_list]
        app_type = None
        forbidden_apps = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, Allowed):
                allowed_apps = [app for app in allowed_apps if app in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_apps = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

            elif isinstance(constraint, By) and constraint.criterion.lower() == "app_type":
                app_type = constraint.value
                if app_type is None or app_type not in _apps_by_type:
                    raise ValueError(f"App type {app_type} is not recognized.")

        apps = _apps_by_type[app_type] if app_type is not None else allowed_apps
        allowed_apps = [app for app in apps if app not in forbidden_apps]

        if min_size is not None:
            allowed_apps = [app for app in allowed_apps if len(app) >= min_size]

        if max_size is not None:
            allowed_apps = [app for app in allowed_apps if len(app) <= max_size]

        if not allowed_apps:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_apps, count), column.constraints)


_apps_by_type = {
    "domestic": [
        "Home Security", "Smart Lighting", "Temperature Control",
        "Smart Appliances", "Personal Assistant", "Streaming Service",
        "Fitness Tracker", "Recipe App", "Family Organizer",
        "Pet Care App", "Gardening Helper"
    ],
    "office": [
        "Productivity Suite", "Communication Tools", "Project Management",
        "Document Management", "Collaboration Tools", "Note-taking App",
        "Time Management", "Expense Tracking", "CRM Software",
        "Virtual Meeting", "File Sharing"
    ],
    "fishing": [
        "Tide Charts", "Fishing Times", "Fish Identification",
        "Fishing Knots", "Fishing Log", "Boat Tracker",
        "Weather Forecasts", "Marine Navigation", "Tackle Box Organizer",
        "Fishing Gear Reviews", "Fishing Tips"
    ],
    "healthcare": [
        "Telemedicine", "Medical Records", "Fitness App",
        "Symptom Checker", "Medication Reminder", "Health Tracker",
        "Mental Health Support", "Nutrition Guide", "Workout Planner",
        "Health News", "Pregnancy Tracker"
    ],
    "education": [
        "Learning Management", "Online Courses", "Language Learning",
        "Math Tutoring", "Study Planner", "Flashcards",
        "Educational Games", "Virtual Labs", "Student Organizer",
        "Test Preparation", "Coding Tutorials"
    ],
    "entertainment": [
        "Streaming Service", "Gaming Platform", "Social Media",
        "Music Streaming", "Video Calling", "Podcast App",
        "Reading App", "Live Events", "Movie Database",
        "Digital Comics", "Virtual Reality"
    ],
    "travel": [
        "Flight Booking", "Hotel Reservations", "Travel Planner",
        "Language Translator", "Currency Converter", "Itinerary Manager",
        "City Guide", "Restaurant Reviews", "Maps & Navigation",
        "Local Experiences", "Travel Insurance"
    ]
}
