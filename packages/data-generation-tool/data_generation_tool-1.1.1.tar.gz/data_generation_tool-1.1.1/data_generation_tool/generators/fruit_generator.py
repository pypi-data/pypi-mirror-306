from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class FruitGenerator(ColumnGenerator):
    """
    Generator for fruit columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of fruits based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
        ValueError
            If the expected type in the column does not match the type of values generated by the generator.

        UnsatisfiableConstraints
            If the given set of constraints are not satisfiable.
        """

        available_fruits = [fruit for fruits in _fruits_by_continent.values() for fruit in fruits]
        forbidden_fruits = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By):
                if constraint.criterion.lower() == "Continent":
                    continent = constraint.value
                    if continent not in _fruits_by_continent:
                        raise ValueError(f"Continent {continent} is not recognized.")
                    available_fruits = _fruits_by_continent[continent]
            elif isinstance(constraint, Allowed):
                available_fruits = [fruit for fruit in available_fruits if fruit in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_fruits = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_fruits = [fruit for fruit in available_fruits if fruit not in forbidden_fruits]

        if min_size is not None:
            allowed_fruits = [fruit for fruit in allowed_fruits if len(fruit) >= min_size]

        if max_size is not None:
            allowed_fruits = [fruit for fruit in allowed_fruits if len(fruit) <= max_size]

        if not allowed_fruits:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_fruits, count), column.constraints)


_fruits_by_continent = {
    "Africa": ["Mango", "Pawpaw", "Baobab", "African Cherry Orange", "Hog Plum"],
    "Asia": ["Lychee", "Durian", "Rambutan", "Mangosteen", "Jackfruit"],
    "Europe": ["Apple", "Pear", "Plum", "Grape", "Cherry"],
    "North America": ["Blueberry", "Cranberry", "Blackberry", "Raspberry", "Strawberry"],
    "South America": ["Açaí", "Guava", "Passionfruit", "Pitaya", "Soursop"],
    "Oceania": ["Kiwi", "Finger Lime", "Quandong", "Macadamia", "Tamarillo"],
}
