from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval, By
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class MovieGenerator(ColumnGenerator):
    """
    Generator for movie columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of movies based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
            ValueError
                If the expected type in the column does not match the type of values generated by the generator.

            UnsatisfiableConstraints
                If the given set of constraints are not satisfiable.
        """

        allowed_movies = [movie for movie_list in _movies_by_category.values() for movie in movie_list]
        forbidden_movies = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, By):
                if constraint.criterion.lower() == "category":
                    category = constraint.value
                    if category not in _movies_by_category:
                        raise ValueError(f"Category {category} is not recognized.")
                    else:
                        movies = _movies_by_category[category]
                        allowed_movies = movies


            elif isinstance(constraint, Allowed):
                allowed_movies = [movie for movie in allowed_movies if movie in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_movies = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_movies = [movie for movie in allowed_movies if movie not in forbidden_movies]

        if min_size is not None:
            allowed_movies = [movie for movie in allowed_movies if len(movie) >= min_size]

        if max_size is not None:
            allowed_movies = [movie for movie in allowed_movies if len(movie) <= max_size]

        if not allowed_movies:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_movies, count), column.constraints)


_movies_by_category = {
    "Action": ["Die Hard", "Mad Max", "The Dark Knight", "Terminator", "Inception"],
    "Comedy": ["Monty Python and the Holy Grail", "Superbad", "The Hangover", "Anchorman", "Borat"],
    "Drama": ["The Shawshank Redemption", "Forrest Gump", "The Godfather", "Schindler's List", "Pulp Fiction"],
    "Science Fiction": ["Blade Runner", "Star Wars", "The Matrix", "Alien", "Jurassic Park"],
    "Romance": ["Titanic", "The Notebook", "La La Land", "Before Sunrise", "Pride and Prejudice"],
    "Horror": ["The Exorcist", "Halloween", "The Shining", "A Nightmare on Elm Street", "Psycho"],
    "Adventure": ["Indiana Jones", "Pirates of the Caribbean", "Jurassic Park", "The Goonies", "Avatar"],
    "Fantasy": ["The Lord of the Rings", "Harry Potter", "The Chronicles of Narnia", "Pan's Labyrinth",
                "Game of Thrones"],
    "Animation": ["Toy Story", "Finding Nemo", "The Lion King", "Frozen", "Spirited Away"],
    "Thriller": ["Seven", "Silence of the Lambs", "Gone Girl", "Prisoners", "The Usual Suspects"]
}
