from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class BookGenerator(ColumnGenerator):
    """
    Generator for book columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of books based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
            ValueError
                If the expected type in the column does not match the type of values generated by the generator.

            UnsatisfiableConstraints
                If the given set of constraints are not satisfiable.
        """

        allowed_books = [book for books_list in books_by_category.values() for book in books_list]
        forbidden_books = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, Allowed):
                allowed_books = [book for book in allowed_books if book in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_books = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_books = [book for book in allowed_books if book not in forbidden_books]

        if min_size is not None:
            allowed_books = [book for book in allowed_books if len(book) >= min_size]

        if max_size is not None:
            allowed_books = [book for book in allowed_books if len(book) <= max_size]

        if not allowed_books:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_books, count), column.constraints)


books_by_category = {
    "Fantasy": [
        "The Lord of the Rings", "Harry Potter and the Philosopher's Stone", "A Game of Thrones",
        "The Name of the Wind", "Mistborn"
    ],
    "Science Fiction": [
        "Dune", "Neuromancer", "Foundation", "Ender's Game", "The Hitchhiker's Guide to the Galaxy"
    ],
    "Mystery": [
        "The Girl with the Dragon Tattoo", "Gone Girl", "The Da Vinci Code", "Sherlock Holmes",
        "Murder on the Orient Express"
    ],
    "Romance": [
        "Pride and Prejudice", "The Notebook", "Outlander", "Bridgerton", "The Fault in Our Stars"
    ],
    "Thriller": [
        "The Girl on the Train", "The Silent Patient", "The Girl with the Dragon Tattoo", "Gone Girl",
        "The Da Vinci Code"
    ],
    "Non-fiction": [
        "Sapiens: A Brief History of Humankind", "Educated", "Becoming", "The Power of Habit", "Thinking, Fast and Slow"
    ]
}
