from data_generation_tool.constraints.column_constraints import Allowed, Forbidden, MinSize, MaxSize, SizeInterval
from data_generation_tool.errors import UnsatisfiableConstraints
from data_generation_tool.generators import ColumnGenerator
from data_generation_tool.requests import ColumnGenerationRequest


class ScentGenerator(ColumnGenerator):
    """
    Generator for scent columns.
    """

    def generate(self, column: ColumnGenerationRequest, count: int) -> list:
        """
        Generates a list of scents based on the constraints provided in the column request.

        Parameters
        ----------
        column : ColumnGenerationRequest
            The request for generating the given column : contains the constraints
        count : int
            The number of values to return

        Returns
        -------
        list
            The data generated

        Raises
        -------
            ValueError
                If the expected type in the column does not match the type of values generated by the generator.

            UnsatisfiableConstraints
                If the given set of constraints are not satisfiable.
        """

        allowed_scents = _scents
        forbidden_scents = []
        min_size = None
        max_size = None

        for constraint in column.constraints:
            if isinstance(constraint, Allowed):
                allowed_scents = [scent for scent in allowed_scents if scent in constraint.value]
            elif isinstance(constraint, Forbidden):
                forbidden_scents = constraint.value
            elif isinstance(constraint, MinSize):
                min_size = constraint.value
            elif isinstance(constraint, MaxSize):
                max_size = constraint.value
            elif isinstance(constraint, SizeInterval):
                min_size = constraint.lower_bound
                max_size = constraint.upper_bound

        allowed_scents = [scent for scent in allowed_scents if scent not in forbidden_scents]

        if min_size is not None:
            allowed_scents = [scent for scent in allowed_scents if len(scent) >= min_size]

        if max_size is not None:
            allowed_scents = [scent for scent in allowed_scents if len(scent) <= max_size]

        if not allowed_scents:
            raise UnsatisfiableConstraints("The constraints are unsatisfiable.")

        return self.post_processing(self.rng.choice(allowed_scents, count), column.constraints)


_scents = [
    "Rose",
    "Lavender",
    "Vanilla",
    "Sandalwood",
    "Jasmine",
    "Citrus",
    "Patchouli",
    "Cedar",
    "Musk",
    "Amber",
    "Peppermint",
    "Eucalyptus",
    "Lemon",
    "Coconut",
    "Chocolate",
    "Coffee",
    "Tobacco",
    "Leather",
    "Ocean",
    "Rain"
]
