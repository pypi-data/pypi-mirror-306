# if(HAVE_SSE2)
#   add_library(implsse sse.c sse.h template.h)
#   target_include_directories(implsse PUBLIC $<TARGET_PROPERTY:prodigal,INCLUDE_DIRECTORIES>)
#   if(SSE2_C_FLAGS AND NOT SSE2_C_FLAGS STREQUAL " ")
#     target_link_options(implsse PUBLIC ${SSE2_C_FLAGS})
#     target_compile_options(implsse PUBLIC ${SSE2_C_FLAGS})
#   endif()
# endif()

# if(HAVE_AVX2)
#   add_library(implavx avx.c avx.h template.h)
#   target_include_directories(implavx PUBLIC  $<TARGET_PROPERTY:prodigal,INCLUDE_DIRECTORIES>)
#   if(AVX2_C_FLAGS AND NOT AVX2_C_FLAGS STREQUAL " ")
#     target_link_options(implavx PUBLIC ${AVX2_C_FLAGS})
#     target_compile_options(implavx PUBLIC ${AVX2_C_FLAGS})
#   endif()
# endif()

# if(HAVE_NEON)
#   add_library(implneon neon.c neon.h template.h)
#   target_include_directories(implneon PUBLIC  $<TARGET_PROPERTY:prodigal,INCLUDE_DIRECTORIES>)
#   if(NEON_C_FLAGS AND NOT NEON_C_FLAGS STREQUAL " ")
#     target_link_options(implneon PUBLIC ${NEON_C_FLAGS})
#     target_compile_options(implneon PUBLIC ${NEON_C_FLAGS})
#   endif()
# endif()

# add_library(impl generic.c generic.h template.h)
# target_include_directories(impl PUBLIC $<TARGET_PROPERTY:prodigal,INCLUDE_DIRECTORIES> ${PROJECT_SOURCE_DIR}/src/pyrodigal/prodigal)



cython_extension(generic LINKS prodigal EXTRA_SOURCES generic.c generic.h template.h)
if(HAVE_SSE2)
  cython_extension(sse2 LINKS prodigal EXTRA_SOURCES sse2.c sse2.h template.h)
  string(STRIP "${SSE2_C_FLAGS}" IMPL_FLAGS)
  if(IMPL_FLAGS)
    target_compile_options(pyrodigal.impl.sse2 PUBLIC ${IMPL_FLAGS})
  endif()
endif()
if(HAVE_AVX2)
  cython_extension(avx2 LINKS prodigal EXTRA_SOURCES avx2.c avx2.h template.h)
  string(STRIP "${AVX2_C_FLAGS}" IMPL_FLAGS)
  if(IMPL_FLAGS)
    target_compile_options(pyrodigal.impl.avx2 PUBLIC ${IMPL_FLAGS})
  endif()
endif()
if(HAVE_NEON)
  cython_extension(neon LINKS prodigal EXTRA_SOURCES neon.c neon.h template.h)
  string(STRIP "${NEON_C_FLAGS}" IMPL_FLAGS)
  if(IMPL_FLAGS)
    target_compile_options(pyrodigal.impl.neon PUBLIC ${IMPL_FLAGS})
  endif()
endif()