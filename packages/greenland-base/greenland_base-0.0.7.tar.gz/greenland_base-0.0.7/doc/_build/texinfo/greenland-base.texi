\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename greenland-base.info
@documentencoding UTF-8
@ifinfo
@*Generated by Sphinx 8.0.2.@*
@end ifinfo
@settitle greenland-base
@defindex ge
@paragraphindent 0
@exampleindent 4
@finalout
@dircategory Miscellaneous
@direntry
* greenland-base: (greenland-base.info). One line description of project
@end direntry

@c %**end of header

@copying
@quotation
greenland-base 0.0.6, Oct 04, 2024

M E Leypold

Copyright @copyright{} 2024, M E Leypold
@end quotation

@end copying

@titlepage
@title greenland-base
@insertcopying
@end titlepage
@contents

@c %** start of user preamble

@c %** end of user preamble

@ifnottex
@node Top
@top greenland-base
@insertcopying
@end ifnottex

@c %**start of body
@anchor{index doc}@anchor{1}
@c greenland-base documentation master file, created by
@c sphinx-quickstart on Sun Aug 25 17:22:25 2024.
@c You can adapt this file completely to your liking, but it should at least
@c contain the root `toctree` directive.

@menu
* Module greenland.base.enums: Module greenland base enums. 
* Python Module Index:: 
* Index:: 

@detailmenu
 --- The Detailed Node Listing ---

Module greenland.base.enums

* Constructing enum types with Enum:: 
* Example(s): Example s. 
* Comparison to built-in enum:: 
* Design decisions and alternatives:: 

Constructing enum types with Enum

* Membership:: 
* Iteration:: 
* Sort order:: 
* Conversion to and from numbers:: 
* Conversion to and from strings:: 
* Explicitely specifying ord:: 
* Attributes:: 
* Typing:: 

@end detailmenu
@end menu

@node Module greenland base enums,Python Module Index,Top,Top
@anchor{enums doc}@anchor{2}@anchor{enums greenland-base-documentation}@anchor{3}@anchor{enums module-greenland-base-enums}@anchor{4}
@chapter Module @cite{greenland.base.enums}


@c implementation: ../src/greenland/base/enums.py

@geindex module; greenland.base.enums
@anchor{enums module-greenland base enums}@anchor{0}
Provides an enumeration (Enum) type as python objects.

The way programming languages handle “enums” — a small set of
discrete objects belonging together, like primary colors or days of
the week – is often influenced by the capabilities of the programming
language whithin which such a facility exists. Very often the emphasis
is on providing names (identifiers) for integers as if the central
semantics of e.g. a weekday is it being a number. Enums in C certainly
work like this.

One unfortunate consequence of these types of design decisions is,
that it is difficult to express in type annotations that a certain
parameter should only take members of a specific enum. The conclusion
we must draw is, that it is desirable that enum types correspond to
classes and that the enum members are instances of those classes, so
it is possible to express the following:

@example
def foo(day: Weekday):
    ...
@end example

The built-in enums of `Python' work like this already.  The author of
this package also became (admittedly) aware of the built-in enums too
late, so went down a slightly different (but possibly simpler) path.

This package provides enums as a type where the enumeration type is a
class (almost like any other) which only has a finite, explicitely
specified number of instances (the members) and where the enum member
can be enriched with almost any kind of additional behaviour.

@menu
* Constructing enum types with Enum:: 
* Example(s): Example s. 
* Comparison to built-in enum:: 
* Design decisions and alternatives:: 

@end menu

@node Constructing enum types with Enum,Example s,,Module greenland base enums
@anchor{enums constructing-enum-types-with-enum}@anchor{5}
@section Constructing enum types with @code{Enum}


@geindex Enum (class in greenland.base.enums)
@anchor{enums greenland base enums Enum}@anchor{6}
@deffn {Class} Enum (name_or_ord: str | int, ord: int | None = None)

The super class of all enum types (= classes).

Enum types are created by deriving from @ref{6,,Enum}. Members
are added by calling the constructor and assigning to an
identifier in the same namespace as the class definition before
calling @code{finalize()}.

After @code{finalize()}, the constructor will just either
return a previously existing member of the enum type or raise a
@code{ParseError}.

@*Parameters: 

@itemize *

@item 
@code{name_or_ord} (@code{str}@code{ | }@code{int}) – Before finalizing the enum type only the name of
the enum member — a @code{str} – is allowed here. After
finalization both a @code{str} and a @code{int} here are allowed and
do not construct a new member, but rather retrieve a member of
the give `name' or `ord' respectively. A
@code{ParseError} will be raised if such a member does
not exist.

@item 
@code{ord} (@code{int}@code{ | }@code{None}) – Before finalizing the the enum type an optional @code{ord}
integer for the member. After finalization this argument must
not be given.
@end itemize

@end deffn


@float LiteralBlock

@caption{Define enum type and members:}

@example
from greenland.base.enums import Enum


class Direction(Enum):
    pass


NORTH  = Direction('NORTH')
EAST = Direction('EAST')
SOUTH = Direction('SOUTH')
WEST = Direction('WEST')

Direction.finalize()
@end example

@end float


@code{finalize()} will actually do two things:


@itemize -

@item 
Lock the type so that further calls to the constructor result either
in retrieval of an already defined member or in raising a
@code{ParseError} if no such member exists.

@item 
Check if all members have been bound to names in the same namespace
where the enum class has been defined.
@end itemize


@float LiteralBlock

@caption{Behavior after finalization:}

@example
assert Direction('SOUTH') == SOUTH

with pytest.raises(AssertionError):
    _ = Direction('FOO')
@end example

@end float


Typically enums are global types. I cannot currently see (except for
testing purposes) much of an application for defining an enum in a
local namespace.

Regardless, if one desires to do so, this is possible, but
@code{finalize()} needs to be called with @code{locals()}:


@float LiteralBlock

@caption{Local enum definition:}

@example
class Turn(Enum):
    pass

LEFT = Turn('LEFT')
RIGHT = Turn('RIGHT')

Turn.finalize(locals())
@end example

@end float


@menu
* Membership:: 
* Iteration:: 
* Sort order:: 
* Conversion to and from numbers:: 
* Conversion to and from strings:: 
* Explicitely specifying ord:: 
* Attributes:: 
* Typing:: 

@end menu

@node Membership,Iteration,,Constructing enum types with Enum
@anchor{enums membership}@anchor{7}
@subsection Membership


Membership (if a value is a member of an enum) can be tested using the
operator `in' or using `isinstance'.


@float LiteralBlock

@caption{Testing membership:}

@example
assert SOUTH in Direction
assert isinstance(SOUTH, Direction)

thing = object()

assert thing not in Direction
@end example

@end float


@node Iteration,Sort order,Membership,Constructing enum types with Enum
@anchor{enums iteration}@anchor{8}
@subsection Iteration


The members of an enum type can be iterated over with the operator
`in'. The order in which the members are provided by the iterator is
the order of definition.


@float LiteralBlock

@caption{Iterate over enum members:}

@example
members = []

for member in Direction:
    members.append(member)

assert members == [NORTH, EAST, SOUTH, WEST]
@end example

@end float


An iterator can also be explicitely obtained using the property
@code{member}.


@float LiteralBlock

@caption{Iterate over enum members with the property ‘members’:}

@example
members = []

for member in Direction.members:
    members.append(member)

assert members == [NORTH, EAST, SOUTH, WEST]
@end example

@end float


@node Sort order,Conversion to and from numbers,Iteration,Constructing enum types with Enum
@anchor{enums sort-order}@anchor{9}
@subsection Sort order



@float LiteralBlock

@caption{Default ordering:}

@example
assert NORTH < SOUTH
assert not NORTH > SOUTH
assert EAST  > NORTH
assert not EAST < NORTH
assert EAST != NORTH
@end example

@end float


@node Conversion to and from numbers,Conversion to and from strings,Sort order,Constructing enum types with Enum
@anchor{enums conversion-to-and-from-numbers}@anchor{a}
@subsection Conversion to and from numbers



@float LiteralBlock

@caption{Conversion to and from numbers:}

@example
assert SOUTH.ord == 2
assert int(SOUTH) == 2
assert Direction(2) is SOUTH
assert Direction[2] is SOUTH
@end example

@end float


@node Conversion to and from strings,Explicitely specifying ord,Conversion to and from numbers,Constructing enum types with Enum
@anchor{enums conversion-to-and-from-strings}@anchor{b}
@subsection Conversion to and from strings



@float LiteralBlock

@caption{Conversion to and from strings:}

@example
assert str(SOUTH) == 'SOUTH'
assert repr(SOUTH) == 'SOUTH'
assert Direction('SOUTH') is SOUTH
assert Direction['SOUTH'] is SOUTH
@end example

@end float


@node Explicitely specifying ord,Attributes,Conversion to and from strings,Constructing enum types with Enum
@anchor{enums explicitely-specifying-ord}@anchor{c}
@subsection Explicitely specifying @cite{ord}


@code{ord()} can be overridden in the default constructor with the
keyword argument @code{ord}. It is possible to provide an own
constructor, but it then should be considered whether and how to pass
on @code{ord} to the super class @ref{6,,Enum}.


@float LiteralBlock

@caption{Explicitely specifying ord:}

@example
class Quartett(Enum):
    pass

ONE = Quartett('ONE')                # automatic ord = 0
TWO = Quartett('TWO', ord = 100)
THREE = Quartett('THREE')            # automatic ord = 101
FOUR = Quartett('FOUR', ord = 50)

Quartett.finalize(locals())
@end example

@end float


Those members where @code{ord} is specified get the desired
@code{ord}, but will raise an assertion if the ord value already
exists. Where no @code{ord} is specified, an @code{ord} value (one)
larger than all @code{ord} values of the members existing so far
is chosen automatically. This algorithm has the advantage of
preserving the definition order in the sort order as far as possible,
but avoids unwelcome surprises.


@float LiteralBlock

@caption{Overridden ord values:}

@example
assert ONE.ord == 0
assert TWO.ord == 100
assert THREE.ord == 101
assert FOUR.ord == 50
@end example

@end float


The sort order is defined by the @code{ord} attribute of the enum
members.


@float LiteralBlock

@caption{Sort order when overriding ord:}

@example
assert FOUR < THREE
assert FOUR < TWO
@end example

@end float


Whereas the iteration order is always the order in which the members where defined.


@float LiteralBlock

@caption{Unchanged iteration order when overriding ord:}

@example
assert list(Quartett.members) == [
    ONE, TWO, THREE, FOUR
]
@end example

@end float


@node Attributes,Typing,Explicitely specifying ord,Constructing enum types with Enum
@anchor{enums attributes}@anchor{d}
@subsection Attributes


(TBD)

@c ?
@c 
@c Should we really document the single methods, given that above we
@c have already given complete examples?

@c !
@c 
@c No public methods!

@node Typing,,Attributes,Constructing enum types with Enum
@anchor{enums typing}@anchor{e}
@subsection Typing


(TBD)


@float LiteralBlock

@caption{Typed function example:}

@example
def print_direction(d: Direction) -> None:
    print(d)


print_direction(NORTH)
@end example

@end float


@c ?
@c 
@c Failsafes.

@node Example s,Comparison to built-in enum,Constructing enum types with Enum,Module greenland base enums
@anchor{enums example-s}@anchor{f}
@section Example(s)


The complete code examples can be found in the file `enums-example.py'
in the doc distribution archive or in @code{doc/_build/tangle} after
building the documentation with @code{make tangle}.


@node Comparison to built-in enum,Design decisions and alternatives,Example s,Module greenland base enums
@anchor{enums comparison-to-built-in-enum}@anchor{10}
@section Comparison to built-in enum



@itemize -

@item 
TBD: More complicated

@item 
TBD: Only a single construction parameter
@end itemize

@node Design decisions and alternatives,,Comparison to built-in enum,Module greenland base enums
@anchor{enums design-decisions-and-alternatives}@anchor{11}
@section Design decisions and alternatives


(TBD)

@node Python Module Index,Index,Module greenland base enums,Top
@unnumbered Python Module Index


@menu
* greenland.base.enums: 0. 
@end menu


@node Index,,Python Module Index,Top
@unnumbered Index


@printindex ge


@c %**end of body
@bye
