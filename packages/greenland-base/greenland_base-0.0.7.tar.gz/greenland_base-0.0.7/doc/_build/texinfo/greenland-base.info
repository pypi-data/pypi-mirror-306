This is greenland-base.info, produced by makeinfo version 7.1 from
greenland-base.texi.

     greenland-base 0.0.6, Oct 04, 2024

     M E Leypold

     Copyright © 2024, M E Leypold

INFO-DIR-SECTION Miscellaneous
START-INFO-DIR-ENTRY
* greenland-base: (greenland-base.info). One line description of project
END-INFO-DIR-ENTRY


   Generated by Sphinx 8.0.2.


File: greenland-base.info,  Node: Top,  Next: Module greenland base enums,  Up: (dir)

greenland-base
**************

     greenland-base 0.0.6, Oct 04, 2024

     M E Leypold

     Copyright © 2024, M E Leypold

* Menu:

* Module greenland.base.enums: Module greenland base enums.
* Python Module Index::
* Index::

 -- The Detailed Node Listing --

Module greenland.base.enums

* Constructing enum types with Enum::
* Example(s): Example s.
* Comparison to built-in enum::
* Design decisions and alternatives::

Constructing enum types with Enum

* Membership::
* Iteration::
* Sort order::
* Conversion to and from numbers::
* Conversion to and from strings::
* Explicitely specifying ord::
* Attributes::
* Typing::



File: greenland-base.info,  Node: Module greenland base enums,  Next: Python Module Index,  Prev: Top,  Up: Top

1 Module ‘greenland.base.enums’
*******************************

Provides an enumeration (Enum) type as python objects.

The way programming languages handle “enums” — a small set of discrete
objects belonging together, like primary colors or days of the week – is
often influenced by the capabilities of the programming language whithin
which such a facility exists.  Very often the emphasis is on providing
names (identifiers) for integers as if the central semantics of e.g.  a
weekday is it being a number.  Enums in C certainly work like this.

One unfortunate consequence of these types of design decisions is, that
it is difficult to express in type annotations that a certain parameter
should only take members of a specific enum.  The conclusion we must
draw is, that it is desirable that enum types correspond to classes and
that the enum members are instances of those classes, so it is possible
to express the following:

     def foo(day: Weekday):
         ...

The built-in enums of 'Python' work like this already.  The author of
this package also became (admittedly) aware of the built-in enums too
late, so went down a slightly different (but possibly simpler) path.

This package provides enums as a type where the enumeration type is a
class (almost like any other) which only has a finite, explicitely
specified number of instances (the members) and where the enum member
can be enriched with almost any kind of additional behaviour.

* Menu:

* Constructing enum types with Enum::
* Example(s): Example s.
* Comparison to built-in enum::
* Design decisions and alternatives::


File: greenland-base.info,  Node: Constructing enum types with Enum,  Next: Example s,  Up: Module greenland base enums

1.1 Constructing enum types with ‘Enum’
=======================================

 -- Class: Enum (name_or_ord: str | int, ord: int | None = None)

     The super class of all enum types (= classes).

     Enum types are created by deriving from *note Enum: 6.  Members are
     added by calling the constructor and assigning to an identifier in
     the same namespace as the class definition before calling
     ‘finalize()’.

     After ‘finalize()’, the constructor will just either return a
     previously existing member of the enum type or raise a
     ‘ParseError’.


     Parameters:

        * ‘name_or_ord’ (‘str’‘ | ’‘int’) – Before finalizing the enum
          type only the name of the enum member — a ‘str’ – is allowed
          here.  After finalization both a ‘str’ and a ‘int’ here are
          allowed and do not construct a new member, but rather retrieve
          a member of the give 'name' or 'ord' respectively.  A
          ‘ParseError’ will be raised if such a member does not exist.

        * ‘ord’ (‘int’‘ | ’‘None’) – Before finalizing the the enum type
          an optional ‘ord’ integer for the member.  After finalization
          this argument must not be given.

     from greenland.base.enums import Enum


     class Direction(Enum):
         pass


     NORTH  = Direction('NORTH')
     EAST = Direction('EAST')
     SOUTH = Direction('SOUTH')
     WEST = Direction('WEST')

     Direction.finalize()

LiteralBlock: Define enum type and members:

‘finalize()’ will actually do two things:

   - Lock the type so that further calls to the constructor result
     either in retrieval of an already defined member or in raising a
     ‘ParseError’ if no such member exists.

   - Check if all members have been bound to names in the same namespace
     where the enum class has been defined.

     assert Direction('SOUTH') == SOUTH

     with pytest.raises(AssertionError):
         _ = Direction('FOO')

LiteralBlock: Behavior after finalization:

Typically enums are global types.  I cannot currently see (except for
testing purposes) much of an application for defining an enum in a local
namespace.

Regardless, if one desires to do so, this is possible, but ‘finalize()’
needs to be called with ‘locals()’:

     class Turn(Enum):
         pass

     LEFT = Turn('LEFT')
     RIGHT = Turn('RIGHT')

     Turn.finalize(locals())

LiteralBlock: Local enum definition:

* Menu:

* Membership::
* Iteration::
* Sort order::
* Conversion to and from numbers::
* Conversion to and from strings::
* Explicitely specifying ord::
* Attributes::
* Typing::


File: greenland-base.info,  Node: Membership,  Next: Iteration,  Up: Constructing enum types with Enum

1.1.1 Membership
----------------

Membership (if a value is a member of an enum) can be tested using the
operator 'in' or using 'isinstance'.

     assert SOUTH in Direction
     assert isinstance(SOUTH, Direction)

     thing = object()

     assert thing not in Direction

LiteralBlock: Testing membership:


File: greenland-base.info,  Node: Iteration,  Next: Sort order,  Prev: Membership,  Up: Constructing enum types with Enum

1.1.2 Iteration
---------------

The members of an enum type can be iterated over with the operator 'in'.
The order in which the members are provided by the iterator is the order
of definition.

     members = []

     for member in Direction:
         members.append(member)

     assert members == [NORTH, EAST, SOUTH, WEST]

LiteralBlock: Iterate over enum members:

An iterator can also be explicitely obtained using the property
‘member’.

     members = []

     for member in Direction.members:
         members.append(member)

     assert members == [NORTH, EAST, SOUTH, WEST]

LiteralBlock: Iterate over enum members with the property ‘members’:


File: greenland-base.info,  Node: Sort order,  Next: Conversion to and from numbers,  Prev: Iteration,  Up: Constructing enum types with Enum

1.1.3 Sort order
----------------

     assert NORTH < SOUTH
     assert not NORTH > SOUTH
     assert EAST  > NORTH
     assert not EAST < NORTH
     assert EAST != NORTH

LiteralBlock: Default ordering:


File: greenland-base.info,  Node: Conversion to and from numbers,  Next: Conversion to and from strings,  Prev: Sort order,  Up: Constructing enum types with Enum

1.1.4 Conversion to and from numbers
------------------------------------

     assert SOUTH.ord == 2
     assert int(SOUTH) == 2
     assert Direction(2) is SOUTH
     assert Direction[2] is SOUTH

LiteralBlock: Conversion to and from numbers:


File: greenland-base.info,  Node: Conversion to and from strings,  Next: Explicitely specifying ord,  Prev: Conversion to and from numbers,  Up: Constructing enum types with Enum

1.1.5 Conversion to and from strings
------------------------------------

     assert str(SOUTH) == 'SOUTH'
     assert repr(SOUTH) == 'SOUTH'
     assert Direction('SOUTH') is SOUTH
     assert Direction['SOUTH'] is SOUTH

LiteralBlock: Conversion to and from strings:


File: greenland-base.info,  Node: Explicitely specifying ord,  Next: Attributes,  Prev: Conversion to and from strings,  Up: Constructing enum types with Enum

1.1.6 Explicitely specifying ‘ord’
----------------------------------

‘ord()’ can be overridden in the default constructor with the keyword
argument ‘ord’.  It is possible to provide an own constructor, but it
then should be considered whether and how to pass on ‘ord’ to the super
class *note Enum: 6.

     class Quartett(Enum):
         pass

     ONE = Quartett('ONE')                # automatic ord = 0
     TWO = Quartett('TWO', ord = 100)
     THREE = Quartett('THREE')            # automatic ord = 101
     FOUR = Quartett('FOUR', ord = 50)

     Quartett.finalize(locals())

LiteralBlock: Explicitely specifying ord:

Those members where ‘ord’ is specified get the desired ‘ord’, but will
raise an assertion if the ord value already exists.  Where no ‘ord’ is
specified, an ‘ord’ value (one) larger than all ‘ord’ values of the
members existing so far is chosen automatically.  This algorithm has the
advantage of preserving the definition order in the sort order as far as
possible, but avoids unwelcome surprises.

     assert ONE.ord == 0
     assert TWO.ord == 100
     assert THREE.ord == 101
     assert FOUR.ord == 50

LiteralBlock: Overridden ord values:

The sort order is defined by the ‘ord’ attribute of the enum members.

     assert FOUR < THREE
     assert FOUR < TWO

LiteralBlock: Sort order when overriding ord:

Whereas the iteration order is always the order in which the members
where defined.

     assert list(Quartett.members) == [
         ONE, TWO, THREE, FOUR
     ]

LiteralBlock: Unchanged iteration order when overriding ord:


File: greenland-base.info,  Node: Attributes,  Next: Typing,  Prev: Explicitely specifying ord,  Up: Constructing enum types with Enum

1.1.7 Attributes
----------------

(TBD)


File: greenland-base.info,  Node: Typing,  Prev: Attributes,  Up: Constructing enum types with Enum

1.1.8 Typing
------------

(TBD)

     def print_direction(d: Direction) -> None:
         print(d)


     print_direction(NORTH)

LiteralBlock: Typed function example:


File: greenland-base.info,  Node: Example s,  Next: Comparison to built-in enum,  Prev: Constructing enum types with Enum,  Up: Module greenland base enums

1.2 Example(s)
==============

The complete code examples can be found in the file 'enums-example.py'
in the doc distribution archive or in ‘doc/_build/tangle’ after building
the documentation with ‘make tangle’.


File: greenland-base.info,  Node: Comparison to built-in enum,  Next: Design decisions and alternatives,  Prev: Example s,  Up: Module greenland base enums

1.3 Comparison to built-in enum
===============================

   - TBD: More complicated

   - TBD: Only a single construction parameter


File: greenland-base.info,  Node: Design decisions and alternatives,  Prev: Comparison to built-in enum,  Up: Module greenland base enums

1.4 Design decisions and alternatives
=====================================

(TBD)


File: greenland-base.info,  Node: Python Module Index,  Next: Index,  Prev: Module greenland base enums,  Up: Top

Python Module Index
*******************

* Menu:

* greenland.base.enums: 0.


File: greenland-base.info,  Node: Index,  Prev: Python Module Index,  Up: Top

Index
*****

 [index ]
* Menu:

* Enum (class in greenland.base.enums):  Constructing enum types with Enum.
                                                                (line 6)
* module; greenland.base.enums:          Module greenland base enums.
                                                                (line 6)



Tag Table:
Node: Top362
Ref: index doc578
Ref: 1578
Node: Module greenland base enums1087
Ref: enums doc1202
Ref: 21202
Ref: enums greenland-base-documentation1202
Ref: 31202
Ref: enums module-greenland-base-enums1202
Ref: 41202
Ref: enums module-greenland base enums1271
Ref: 01271
Node: Constructing enum types with Enum2813
Ref: enums constructing-enum-types-with-enum2936
Ref: 52936
Ref: enums greenland base enums Enum3021
Ref: 63021
Node: Membership5623
Ref: enums membership5729
Ref: 75729
Node: Iteration6040
Ref: enums iteration6165
Ref: 86165
Node: Sort order6829
Ref: enums sort-order6974
Ref: 96974
Node: Conversion to and from numbers7180
Ref: enums conversion-to-and-from-numbers7346
Ref: a7346
Node: Conversion to and from strings7592
Ref: enums conversion-to-and-from-strings7774
Ref: b7774
Node: Explicitely specifying ord8046
Ref: enums explicitely-specifying-ord8208
Ref: c8208
Node: Attributes9815
Ref: enums attributes9953
Ref: d9953
Node: Typing9995
Ref: enums typing10098
Ref: e10098
Node: Example s10268
Ref: enums example-s10427
Ref: f10427
Node: Comparison to built-in enum10649
Ref: enums comparison-to-built-in-enum10808
Ref: 1010808
Node: Design decisions and alternatives10949
Ref: enums design-decisions-and-alternatives11090
Ref: 1111090
Node: Python Module Index11174
Node: Index11369

End Tag Table


Local Variables:
coding: utf-8
End:
