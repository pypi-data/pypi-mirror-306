name: CI/CD

on:
  push:
    branches:
      - main          # Run on pushes to the main branch
      - develop       # Run on pushes to the develop branch
      - 'feature/**'  # Run on pushes to any feature branch
    tags:
      - 'v*.*.*'      # Run on version tags like v1.0.0      
  pull_request:
    branches:
      - main          # Run on pull requests to the main branch
      - develop       # Run on pull requests to the develop branch
      - 'feature/**'  # Run on pull requests to any feature branch

jobs:
  tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7.17, 3.8.18, 3.9.19, 3.10.14, 3.11.9, 3.12.4]  # Test against multiple Python versions

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4  # Updated to version v4

    - name: Set up Python
      uses: actions/setup-python@v4  # Updated to version v4
      with:
        python-version: ${{ matrix.python-version }}  # Set up the specified Python version

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip  # Upgrade pip
        pip install flake8
        pip install -r requirements.txt  # Install dependencies from requirements.txt

    - name: Lint with flake8
      run: |
        flake8 .  # Run flake8, it will use the settings from the .flake8 file

    - name: Run tests
      run: |
        python -m unittest discover -s tests  # Discover and run tests in the tests directory

  build:
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      matrix:
        python-version: [3.7.17, 3.8.18, 3.9.19, 3.10.14, 3.11.9, 3.12.4]  # Test against multiple Python versions

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to version v4

      - name: Set up Python
        uses: actions/setup-python@v4  # Updated to version v4
        with:
          python-version: ${{ matrix.python-version }}  # Set up the specified Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Install dependencies from requirements.txt

      - name: Install build tools
        run: |
          pip install setuptools wheel twine setuptools-scm

      - name: Build the package
        run: |
          python setup.py sdist bdist_wheel

      - name: Test installation of micro_registry
        run: |
          python -m pip install dist/*.whl  # Install the package locally
          python -c "import micro_registry; print('micro_registry installed successfully')"  # Verify that the package can be imported
          python -c "from micro_registry.registry import register_class; print('micro_registry installation and import successful')"  # Verify installation and a function import                    

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3  # Updated to version v3
        with:
          name: build-artifacts
          path: dist/*

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to version v4

      - name: Set up Python
        uses: actions/setup-python@v4  # Updated to version v4
        with:
          python-version: '3.x'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine setuptools-scm

      - name: Build the package
        run: |
          python setup.py sdist bdist_wheel

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload dist/*